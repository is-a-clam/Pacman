/*! For license information please see bundle.js.LICENSE.txt */
;(() => {
    var __webpack_modules__ = {
            1983: (e, t, n) => {
                "use strict"
                n(6266),
                    n(990),
                    n(911),
                    n(4160),
                    n(6197),
                    n(6728),
                    n(4039),
                    n(3568),
                    n(8051),
                    n(8250),
                    n(5434),
                    n(4952),
                    n(6337),
                    n(5666)
            },
            203: (
                __unused_webpack_module,
                __webpack_exports__,
                __webpack_require__
            ) => {
                "use strict"
                function _get() {
                    return (
                        (_get =
                            "undefined" != typeof Reflect && Reflect.get
                                ? Reflect.get
                                : function (e, t, n) {
                                      var i = _superPropBase(e, t)
                                      if (i) {
                                          var r =
                                              Object.getOwnPropertyDescriptor(
                                                  i,
                                                  t
                                              )
                                          return r.get
                                              ? r.get.call(
                                                    arguments.length < 3 ? e : n
                                                )
                                              : r.value
                                      }
                                  }),
                        _get.apply(this, arguments)
                    )
                }
                function _superPropBase(e, t) {
                    for (
                        ;
                        !Object.prototype.hasOwnProperty.call(e, t) &&
                        null !== (e = _getPrototypeOf(e));

                    );
                    return e
                }
                function _inherits(e, t) {
                    if ("function" != typeof t && null !== t)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        )
                    ;(e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            writable: !0,
                            configurable: !0,
                        },
                    })),
                        Object.defineProperty(e, "prototype", { writable: !1 }),
                        t && _setPrototypeOf(e, t)
                }
                function _setPrototypeOf(e, t) {
                    return (
                        (_setPrototypeOf =
                            Object.setPrototypeOf ||
                            function (e, t) {
                                return (e.__proto__ = t), e
                            }),
                        _setPrototypeOf(e, t)
                    )
                }
                function _createSuper(e) {
                    var t = _isNativeReflectConstruct()
                    return function () {
                        var n,
                            i = _getPrototypeOf(e)
                        if (t) {
                            var r = _getPrototypeOf(this).constructor
                            n = Reflect.construct(i, arguments, r)
                        } else n = i.apply(this, arguments)
                        return _possibleConstructorReturn(this, n)
                    }
                }
                function _possibleConstructorReturn(e, t) {
                    if (
                        t &&
                        ("object" === _typeof(t) || "function" == typeof t)
                    )
                        return t
                    if (void 0 !== t)
                        throw new TypeError(
                            "Derived constructors may only return object or undefined"
                        )
                    return _assertThisInitialized(e)
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError(
                            "this hasn't been initialised - super() hasn't been called"
                        )
                    return e
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct)
                        return !1
                    if (Reflect.construct.sham) return !1
                    if ("function" == typeof Proxy) return !0
                    try {
                        return (
                            Boolean.prototype.valueOf.call(
                                Reflect.construct(Boolean, [], function () {})
                            ),
                            !0
                        )
                    } catch (e) {
                        return !1
                    }
                }
                function _getPrototypeOf(e) {
                    return (
                        (_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf
                            : function (e) {
                                  return e.__proto__ || Object.getPrototypeOf(e)
                              }),
                        _getPrototypeOf(e)
                    )
                }
                function _typeof(e) {
                    return (
                        (_typeof =
                            "function" == typeof Symbol &&
                            "symbol" == typeof Symbol.iterator
                                ? function (e) {
                                      return typeof e
                                  }
                                : function (e) {
                                      return e &&
                                          "function" == typeof Symbol &&
                                          e.constructor === Symbol &&
                                          e !== Symbol.prototype
                                          ? "symbol"
                                          : typeof e
                                  }),
                        _typeof(e)
                    )
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t))
                        throw new TypeError("Cannot call a class as a function")
                }
                function _defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var i = t[n]
                        ;(i.enumerable = i.enumerable || !1),
                            (i.configurable = !0),
                            "value" in i && (i.writable = !0),
                            Object.defineProperty(e, i.key, i)
                    }
                }
                function _createClass(e, t, n) {
                    return (
                        t && _defineProperties(e.prototype, t),
                        n && _defineProperties(e, n),
                        Object.defineProperty(e, "prototype", { writable: !1 }),
                        e
                    )
                }
                function capitalize(e) {
                    return e.charAt(0).toUpperCase() + e.slice(1)
                }
                function trimLeft(e) {
                    return e.replace(/^\s+/, "")
                }
                function trimRight(e) {
                    return e.replace(/\s+$/, "")
                }
                function isNumeric(e) {
                    return (
                        "string" == typeof e && (e = e.trim()),
                        !isNaN(e) && /[+-]?([0-9]*[.])?[0-9]+/.test(e)
                    )
                }
                function isBoolean(e) {
                    var t = e.trim()
                    return "true" === t || "false" === t
                }
                function toHex$1(e) {
                    for (var t = "", n = 0; n < e.length; )
                        t += e.charCodeAt(n++).toString(16)
                    return t
                }
                __webpack_require__.d(__webpack_exports__, {
                    Tg: () => ColorLayer,
                    JH: () => Entity,
                    Hf: () => Stage,
                    n0: () => audio,
                    Uh: () => device$1,
                    H6: () => game,
                    _m: () => loader,
                    d_: () => pool,
                    SB: () => state,
                    Rk: () => video,
                }),
                    "undefined" != typeof window &&
                        void 0 === window.console &&
                        ((window.console = {}),
                        (window.console.log = function () {}),
                        (window.console.assert = function () {}),
                        (window.console.warn = function () {}),
                        (window.console.error = function () {
                            alert(
                                Array.prototype.slice.call(arguments).join(", ")
                            )
                        }))
                var stringUtils = Object.freeze({
                        __proto__: null,
                        capitalize,
                        trimLeft,
                        trimRight,
                        isNumeric,
                        isBoolean,
                        toHex: toHex$1,
                    }),
                    vendors$1 = ["ms", "MS", "moz", "webkit", "o"]
                function prefixed(e, t) {
                    if (e in (t = t || window)) return t[e]
                    var n,
                        i = capitalize(e)
                    return (
                        vendors$1.some(function (e) {
                            var r = e + i
                            return (n = r in t ? t[r] : void 0)
                        }),
                        n
                    )
                }
                function setPrefixed(e, t, n) {
                    if (!(e in (n = n || window))) {
                        var i = capitalize(e)
                        return (
                            vendors$1.some(function (e) {
                                var r = e + i
                                if (r in n) return (n[r] = t), !0
                            }),
                            !1
                        )
                    }
                    n[e] = t
                }
                var agentUtils = Object.freeze({
                        __proto__: null,
                        prefixed,
                        setPrefixed,
                    }),
                    DEG_TO_RAD = Math.PI / 180,
                    RAD_TO_DEG = 180 / Math.PI,
                    TAU = 2 * Math.PI,
                    ETA = 0.5 * Math.PI,
                    EPSILON = 1e-6
                function isPowerOfTwo(e) {
                    return 0 == (e & (e - 1))
                }
                function nextPowerOfTwo(e) {
                    return (
                        e--,
                        (e |= e >> 1),
                        (e |= e >> 2),
                        (e |= e >> 4),
                        (e |= e >> 8),
                        (e |= e >> 16),
                        ++e
                    )
                }
                function degToRad(e) {
                    return e * DEG_TO_RAD
                }
                function radToDeg(e) {
                    return e * RAD_TO_DEG
                }
                function _clamp(e, t, n) {
                    return e < t ? t : e > n ? n : +e
                }
                function random$1(e, t) {
                    return ~~(Math.random() * (t - e)) + e
                }
                function randomFloat(e, t) {
                    return Math.random() * (t - e) + e
                }
                function weightedRandom$1(e, t) {
                    return ~~(Math.pow(Math.random(), 2) * (t - e)) + e
                }
                function round(e) {
                    var t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : 0,
                        n = Math.pow(10, t)
                    return ~~(0.5 + e * n) / n
                }
                function toBeCloseTo(e, t) {
                    var n =
                        arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : 2
                    return Math.abs(e - t) < Math.pow(10, -n) / 2
                }
                var math = Object.freeze({
                    __proto__: null,
                    DEG_TO_RAD,
                    RAD_TO_DEG,
                    TAU,
                    ETA,
                    EPSILON,
                    isPowerOfTwo,
                    nextPowerOfTwo,
                    degToRad,
                    radToDeg,
                    clamp: _clamp,
                    random: random$1,
                    randomFloat,
                    weightedRandom: weightedRandom$1,
                    round,
                    toBeCloseTo,
                })
                function _remove(e, t) {
                    var n = Array.prototype.indexOf.call(e, t)
                    return -1 !== n && Array.prototype.splice.call(e, n, 1), e
                }
                function random(e) {
                    return e[random$1(0, e.length)]
                }
                function weightedRandom(e) {
                    return e[weightedRandom$1(0, e.length)]
                }
                var arrayUtils = Object.freeze({
                        __proto__: null,
                        remove: _remove,
                        random,
                        weightedRandom,
                    }),
                    REMOVE_PATH = /^.*(\\|\/|\:)/,
                    REMOVE_EXT = /\.[^\.]*$/
                function getBasename(e) {
                    return e.replace(REMOVE_PATH, "").replace(REMOVE_EXT, "")
                }
                function getExtension(e) {
                    return e.substring(e.lastIndexOf(".") + 1, e.length)
                }
                var fileUtils = Object.freeze({
                    __proto__: null,
                    getBasename,
                    getExtension,
                })
                function defer(e, t) {
                    for (
                        var n = arguments.length,
                            i = new Array(n > 2 ? n - 2 : 0),
                            r = 2;
                        r < n;
                        r++
                    )
                        i[r - 2] = arguments[r]
                    return setTimeout.apply(void 0, [e.bind(t), 0.01].concat(i))
                }
                function throttle(e, t, n) {
                    var i,
                        r = window.performance.now()
                    return (
                        "boolean" != typeof n && (n = !1),
                        function () {
                            var o = window.performance.now(),
                                s = o - r,
                                a = arguments
                            if (!(s < t)) return (r = o), e.apply(null, a)
                            !1 === n &&
                                (clearTimeout(i),
                                (i = setTimeout(function () {
                                    return (r = o), e.apply(null, a)
                                }, s)))
                        }
                    )
                }
                var fnUtils = Object.freeze({
                        __proto__: null,
                        defer,
                        throttle,
                    }),
                    objectClass = {},
                    instance_counter = 0,
                    pool = {
                        register: function (e, t) {
                            var n =
                                arguments.length > 2 &&
                                void 0 !== arguments[2] &&
                                arguments[2]
                            if (void 0 === t)
                                throw new Error(
                                    "Cannot register object '" +
                                        e +
                                        "', invalid class"
                                )
                            objectClass[e] = { class: t, pool: n ? [] : void 0 }
                        },
                        pull: function (e) {
                            for (
                                var t = new Array(arguments.length), n = 0;
                                n < arguments.length;
                                n++
                            )
                                t[n] = arguments[n]
                            var i = objectClass[e]
                            if (i) {
                                var r,
                                    o = i.class,
                                    s = i.pool
                                return (
                                    s && (r = s.pop())
                                        ? (t.shift(),
                                          "function" == typeof r.onResetEvent &&
                                              r.onResetEvent.apply(r, t),
                                          instance_counter--)
                                        : ((t[0] = o),
                                          (r = new (o.bind.apply(o, t))()),
                                          s && (r.className = e)),
                                    r
                                )
                            }
                            throw new Error(
                                "Cannot instantiate object of type '" + e + "'"
                            )
                        },
                        purge: function () {
                            for (var e in objectClass)
                                objectClass[e] && (objectClass[e].pool = [])
                            instance_counter = 0
                        },
                        push: function (e) {
                            var t =
                                !(
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                ) || arguments[1]
                            if (!this.poolable(e)) {
                                if (!0 === t)
                                    throw new Error(
                                        "me.pool: object " +
                                            e +
                                            " cannot be recycled"
                                    )
                                return !1
                            }
                            return (
                                objectClass[e.className].pool.push(e),
                                instance_counter++,
                                !0
                            )
                        },
                        exists: function (e) {
                            return e in objectClass
                        },
                        poolable: function (e) {
                            var t = e.className
                            return (
                                void 0 !== t &&
                                "function" == typeof e.onResetEvent &&
                                t in objectClass &&
                                "undefined" !== objectClass[t].pool
                            )
                        },
                        getInstanceCount: function () {
                            return instance_counter
                        },
                    },
                    Vector2d = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0
                                        return (this.x = e), (this.y = t), this
                                    },
                                },
                                {
                                    key: "_set",
                                    value: function (e, t) {
                                        return (this.x = e), (this.y = t), this
                                    },
                                },
                                {
                                    key: "set",
                                    value: function (e, t) {
                                        if (e !== +e || t !== +t)
                                            throw new Error(
                                                "invalid x,y parameters (not a number)"
                                            )
                                        return this._set(e, t)
                                    },
                                },
                                {
                                    key: "setZero",
                                    value: function () {
                                        return this.set(0, 0)
                                    },
                                },
                                {
                                    key: "setV",
                                    value: function (e) {
                                        return this._set(e.x, e.y)
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        return this._set(
                                            this.x + e.x,
                                            this.y + e.y
                                        )
                                    },
                                },
                                {
                                    key: "sub",
                                    value: function (e) {
                                        return this._set(
                                            this.x - e.x,
                                            this.y - e.y
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        return this._set(
                                            this.x * e,
                                            this.y * (void 0 !== t ? t : e)
                                        )
                                    },
                                },
                                {
                                    key: "toIso",
                                    value: function () {
                                        return this._set(
                                            this.x - this.y,
                                            0.5 * (this.x + this.y)
                                        )
                                    },
                                },
                                {
                                    key: "to2d",
                                    value: function () {
                                        return this._set(
                                            this.y + this.x / 2,
                                            this.y - this.x / 2
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this._set(
                                            this.x * e.x,
                                            this.y * e.y
                                        )
                                    },
                                },
                                {
                                    key: "div",
                                    value: function (e) {
                                        return this._set(this.x / e, this.y / e)
                                    },
                                },
                                {
                                    key: "abs",
                                    value: function () {
                                        return this._set(
                                            this.x < 0 ? -this.x : this.x,
                                            this.y < 0 ? -this.y : this.y
                                        )
                                    },
                                },
                                {
                                    key: "clamp",
                                    value: function (t, n) {
                                        return new e(
                                            _clamp(this.x, t, n),
                                            _clamp(this.y, t, n)
                                        )
                                    },
                                },
                                {
                                    key: "clampSelf",
                                    value: function (e, t) {
                                        return this._set(
                                            _clamp(this.x, e, t),
                                            _clamp(this.y, e, t)
                                        )
                                    },
                                },
                                {
                                    key: "minV",
                                    value: function (e) {
                                        return this._set(
                                            this.x < e.x ? this.x : e.x,
                                            this.y < e.y ? this.y : e.y
                                        )
                                    },
                                },
                                {
                                    key: "maxV",
                                    value: function (e) {
                                        return this._set(
                                            this.x > e.x ? this.x : e.x,
                                            this.y > e.y ? this.y : e.y
                                        )
                                    },
                                },
                                {
                                    key: "floor",
                                    value: function () {
                                        return new e(
                                            Math.floor(this.x),
                                            Math.floor(this.y)
                                        )
                                    },
                                },
                                {
                                    key: "floorSelf",
                                    value: function () {
                                        return this._set(
                                            Math.floor(this.x),
                                            Math.floor(this.y)
                                        )
                                    },
                                },
                                {
                                    key: "ceil",
                                    value: function () {
                                        return new e(
                                            Math.ceil(this.x),
                                            Math.ceil(this.y)
                                        )
                                    },
                                },
                                {
                                    key: "ceilSelf",
                                    value: function () {
                                        return this._set(
                                            Math.ceil(this.x),
                                            Math.ceil(this.y)
                                        )
                                    },
                                },
                                {
                                    key: "negate",
                                    value: function () {
                                        return new e(-this.x, -this.y)
                                    },
                                },
                                {
                                    key: "negateSelf",
                                    value: function () {
                                        return this._set(-this.x, -this.y)
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this._set(e.x, e.y)
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function () {
                                        var e, t
                                        return (
                                            2 === arguments.length
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y)),
                                            this.x === e && this.y === t
                                        )
                                    },
                                },
                                {
                                    key: "normalize",
                                    value: function () {
                                        return this.div(this.length() || 1)
                                    },
                                },
                                {
                                    key: "perp",
                                    value: function () {
                                        return this._set(this.y, -this.x)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        var n = 0,
                                            i = 0
                                        "object" === _typeof(t) &&
                                            ((n = t.x), (i = t.y))
                                        var r = this.x - n,
                                            o = this.y - i,
                                            s = Math.cos(e),
                                            a = Math.sin(e)
                                        return this._set(
                                            r * s - o * a + n,
                                            r * a + o * s + i
                                        )
                                    },
                                },
                                {
                                    key: "dotProduct",
                                    value: function (e) {
                                        return this.x * e.x + this.y * e.y
                                    },
                                },
                                {
                                    key: "length2",
                                    value: function () {
                                        return this.dotProduct(this)
                                    },
                                },
                                {
                                    key: "length",
                                    value: function () {
                                        return Math.sqrt(this.length2())
                                    },
                                },
                                {
                                    key: "lerp",
                                    value: function (e, t) {
                                        return (
                                            (this.x += (e.x - this.x) * t),
                                            (this.y += (e.y - this.y) * t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "distance",
                                    value: function (e) {
                                        var t = this.x - e.x,
                                            n = this.y - e.y
                                        return Math.sqrt(t * t + n * n)
                                    },
                                },
                                {
                                    key: "angle",
                                    value: function (e) {
                                        return Math.acos(
                                            _clamp(
                                                this.dotProduct(e) /
                                                    (this.length() *
                                                        e.length()),
                                                -1,
                                                1
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "project",
                                    value: function (e) {
                                        return this.scale(
                                            this.dotProduct(e) / e.length2()
                                        )
                                    },
                                },
                                {
                                    key: "projectN",
                                    value: function (e) {
                                        return this.scale(this.dotProduct(e))
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull(
                                            "Vector2d",
                                            this.x,
                                            this.y
                                        )
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        return "x:" + this.x + ",y:" + this.y
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    _toHex = function (e) {
                        return (
                            "0123456789ABCDEF".charAt((e - (e % 16)) >> 4) +
                            "0123456789ABCDEF".charAt(e % 16)
                        )
                    },
                    rgbaRx = /^rgba?\((\d+), ?(\d+), ?(\d+)(, ?([\d\.]+))?\)$/,
                    hex3Rx = /^#([\da-fA-F])([\da-fA-F])([\da-fA-F])$/,
                    hex4Rx =
                        /^#([\da-fA-F])([\da-fA-F])([\da-fA-F])([\da-fA-F])$/,
                    hex6Rx = /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})$/,
                    hex8Rx =
                        /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})$/,
                    cssToRGB = new Map()
                ;[
                    ["black", [0, 0, 0]],
                    ["silver", [192, 192, 129]],
                    ["gray", [128, 128, 128]],
                    ["white", [255, 255, 255]],
                    ["maroon", [128, 0, 0]],
                    ["red", [255, 0, 0]],
                    ["purple", [128, 0, 128]],
                    ["fuchsia", [255, 0, 255]],
                    ["green", [0, 128, 0]],
                    ["lime", [0, 255, 0]],
                    ["olive", [128, 128, 0]],
                    ["yellow", [255, 255, 0]],
                    ["navy", [0, 0, 128]],
                    ["blue", [0, 0, 255]],
                    ["teal", [0, 128, 128]],
                    ["aqua", [0, 255, 255]],
                    ["orange", [255, 165, 0]],
                    ["aliceblue", [240, 248, 245]],
                    ["antiquewhite", [250, 235, 215]],
                    ["aquamarine", [127, 255, 212]],
                    ["azure", [240, 255, 255]],
                    ["beige", [245, 245, 220]],
                    ["bisque", [255, 228, 196]],
                    ["blanchedalmond", [255, 235, 205]],
                    ["blueviolet", [138, 43, 226]],
                    ["brown", [165, 42, 42]],
                    ["burlywood", [222, 184, 35]],
                    ["cadetblue", [95, 158, 160]],
                    ["chartreuse", [127, 255, 0]],
                    ["chocolate", [210, 105, 30]],
                    ["coral", [255, 127, 80]],
                    ["cornflowerblue", [100, 149, 237]],
                    ["cornsilk", [255, 248, 220]],
                    ["crimson", [220, 20, 60]],
                    ["darkblue", [0, 0, 139]],
                    ["darkcyan", [0, 139, 139]],
                    ["darkgoldenrod", [184, 134, 11]],
                    ["darkgray[*]", [169, 169, 169]],
                    ["darkgreen", [0, 100, 0]],
                    ["darkgrey[*]", [169, 169, 169]],
                    ["darkkhaki", [189, 183, 107]],
                    ["darkmagenta", [139, 0, 139]],
                    ["darkolivegreen", [85, 107, 47]],
                    ["darkorange", [255, 140, 0]],
                    ["darkorchid", [153, 50, 204]],
                    ["darkred", [139, 0, 0]],
                    ["darksalmon", [233, 150, 122]],
                    ["darkseagreen", [143, 188, 143]],
                    ["darkslateblue", [72, 61, 139]],
                    ["darkslategray", [47, 79, 79]],
                    ["darkslategrey", [47, 79, 79]],
                    ["darkturquoise", [0, 206, 209]],
                    ["darkviolet", [148, 0, 211]],
                    ["deeppink", [255, 20, 147]],
                    ["deepskyblue", [0, 191, 255]],
                    ["dimgray", [105, 105, 105]],
                    ["dimgrey", [105, 105, 105]],
                    ["dodgerblue", [30, 144, 255]],
                    ["firebrick", [178, 34, 34]],
                    ["floralwhite", [255, 250, 240]],
                    ["forestgreen", [34, 139, 34]],
                    ["gainsboro", [220, 220, 220]],
                    ["ghostwhite", [248, 248, 255]],
                    ["gold", [255, 215, 0]],
                    ["goldenrod", [218, 165, 32]],
                    ["greenyellow", [173, 255, 47]],
                    ["grey", [128, 128, 128]],
                    ["honeydew", [240, 255, 240]],
                    ["hotpink", [255, 105, 180]],
                    ["indianred", [205, 92, 92]],
                    ["indigo", [75, 0, 130]],
                    ["ivory", [255, 255, 240]],
                    ["khaki", [240, 230, 140]],
                    ["lavender", [230, 230, 250]],
                    ["lavenderblush", [255, 240, 245]],
                    ["lawngreen", [124, 252, 0]],
                    ["lemonchiffon", [255, 250, 205]],
                    ["lightblue", [173, 216, 230]],
                    ["lightcoral", [240, 128, 128]],
                    ["lightcyan", [224, 255, 255]],
                    ["lightgoldenrodyellow", [250, 250, 210]],
                    ["lightgray", [211, 211, 211]],
                    ["lightgreen", [144, 238, 144]],
                    ["lightgrey", [211, 211, 211]],
                    ["lightpink", [255, 182, 193]],
                    ["lightsalmon", [255, 160, 122]],
                    ["lightseagreen", [32, 178, 170]],
                    ["lightskyblue", [135, 206, 250]],
                    ["lightslategray", [119, 136, 153]],
                    ["lightslategrey", [119, 136, 153]],
                    ["lightsteelblue", [176, 196, 222]],
                    ["lightyellow", [255, 255, 224]],
                    ["limegreen", [50, 205, 50]],
                    ["linen", [250, 240, 230]],
                    ["mediumaquamarine", [102, 205, 170]],
                    ["mediumblue", [0, 0, 205]],
                    ["mediumorchid", [186, 85, 211]],
                    ["mediumpurple", [147, 112, 219]],
                    ["mediumseagreen", [60, 179, 113]],
                    ["mediumslateblue", [123, 104, 238]],
                    ["mediumspringgreen", [0, 250, 154]],
                    ["mediumturquoise", [72, 209, 204]],
                    ["mediumvioletred", [199, 21, 133]],
                    ["midnightblue", [25, 25, 112]],
                    ["mintcream", [245, 255, 250]],
                    ["mistyrose", [255, 228, 225]],
                    ["moccasin", [255, 228, 181]],
                    ["navajowhite", [255, 222, 173]],
                    ["oldlace", [253, 245, 230]],
                    ["olivedrab", [107, 142, 35]],
                    ["orangered", [255, 69, 0]],
                    ["orchid", [218, 112, 214]],
                    ["palegoldenrod", [238, 232, 170]],
                    ["palegreen", [152, 251, 152]],
                    ["paleturquoise", [175, 238, 238]],
                    ["palevioletred", [219, 112, 147]],
                    ["papayawhip", [255, 239, 213]],
                    ["peachpuff", [255, 218, 185]],
                    ["peru", [205, 133, 63]],
                    ["pink", [255, 192, 203]],
                    ["plum", [221, 160, 221]],
                    ["powderblue", [176, 224, 230]],
                    ["rosybrown", [188, 143, 143]],
                    ["royalblue", [65, 105, 225]],
                    ["saddlebrown", [139, 69, 19]],
                    ["salmon", [250, 128, 114]],
                    ["sandybrown", [244, 164, 96]],
                    ["seagreen", [46, 139, 87]],
                    ["seashell", [255, 245, 238]],
                    ["sienna", [160, 82, 45]],
                    ["skyblue", [135, 206, 235]],
                    ["slateblue", [106, 90, 205]],
                    ["slategray", [112, 128, 144]],
                    ["slategrey", [112, 128, 144]],
                    ["snow", [255, 250, 250]],
                    ["springgreen", [0, 255, 127]],
                    ["steelblue", [70, 130, 180]],
                    ["tan", [210, 180, 140]],
                    ["thistle", [216, 191, 216]],
                    ["tomato", [255, 99, 71]],
                    ["turquoise", [64, 224, 208]],
                    ["violet", [238, 130, 238]],
                    ["wheat", [245, 222, 179]],
                    ["whitesmoke", [245, 245, 245]],
                    ["yellowgreen", [154, 205, 50]],
                ].forEach(function (e) {
                    cssToRGB.set(e[0], e[1])
                })
                var Color = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 0,
                                            i =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : 1
                                        return (
                                            void 0 === this.glArray &&
                                                (this.glArray =
                                                    new Float32Array([
                                                        0, 0, 0, 1,
                                                    ])),
                                            this.setColor(e, t, n, i)
                                        )
                                    },
                                },
                                {
                                    key: "r",
                                    get: function () {
                                        return ~~(255 * this.glArray[0])
                                    },
                                    set: function (e) {
                                        this.glArray[0] =
                                            _clamp(~~e || 0, 0, 255) / 255
                                    },
                                },
                                {
                                    key: "g",
                                    get: function () {
                                        return ~~(255 * this.glArray[1])
                                    },
                                    set: function (e) {
                                        this.glArray[1] =
                                            _clamp(~~e || 0, 0, 255) / 255
                                    },
                                },
                                {
                                    key: "b",
                                    get: function () {
                                        return ~~(255 * this.glArray[2])
                                    },
                                    set: function (e) {
                                        this.glArray[2] =
                                            _clamp(~~e || 0, 0, 255) / 255
                                    },
                                },
                                {
                                    key: "alpha",
                                    get: function () {
                                        return this.glArray[3]
                                    },
                                    set: function (e) {
                                        this.glArray[3] =
                                            void 0 === e ? 1 : _clamp(+e, 0, 1)
                                    },
                                },
                                {
                                    key: "setColor",
                                    value: function (t, n, i) {
                                        var r =
                                            arguments.length > 3 &&
                                            void 0 !== arguments[3]
                                                ? arguments[3]
                                                : 1
                                        return t instanceof e
                                            ? (this.glArray.set(t.glArray), t)
                                            : ((this.r = t),
                                              (this.g = n),
                                              (this.b = i),
                                              (this.alpha = r),
                                              this)
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull("Color", this)
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (t) {
                                        return t instanceof e
                                            ? (this.glArray.set(t.glArray),
                                              this)
                                            : this.parseCSS(t)
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        return (
                                            (this.glArray[0] = _clamp(
                                                this.glArray[0] + e.glArray[0],
                                                0,
                                                1
                                            )),
                                            (this.glArray[1] = _clamp(
                                                this.glArray[1] + e.glArray[1],
                                                0,
                                                1
                                            )),
                                            (this.glArray[2] = _clamp(
                                                this.glArray[2] + e.glArray[2],
                                                0,
                                                1
                                            )),
                                            (this.glArray[3] =
                                                (this.glArray[3] +
                                                    e.glArray[3]) /
                                                2),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "darken",
                                    value: function (e) {
                                        return (
                                            (e = _clamp(e, 0, 1)),
                                            (this.glArray[0] *= e),
                                            (this.glArray[1] *= e),
                                            (this.glArray[2] *= e),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "lerp",
                                    value: function (e, t) {
                                        return (
                                            (t = _clamp(t, 0, 1)),
                                            (this.glArray[0] +=
                                                (e.glArray[0] -
                                                    this.glArray[0]) *
                                                t),
                                            (this.glArray[1] +=
                                                (e.glArray[1] -
                                                    this.glArray[1]) *
                                                t),
                                            (this.glArray[2] +=
                                                (e.glArray[2] -
                                                    this.glArray[2]) *
                                                t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "lighten",
                                    value: function (e) {
                                        return (
                                            (e = _clamp(e, 0, 1)),
                                            (this.glArray[0] = _clamp(
                                                this.glArray[0] +
                                                    (1 - this.glArray[0]) * e,
                                                0,
                                                1
                                            )),
                                            (this.glArray[1] = _clamp(
                                                this.glArray[1] +
                                                    (1 - this.glArray[1]) * e,
                                                0,
                                                1
                                            )),
                                            (this.glArray[2] = _clamp(
                                                this.glArray[2] +
                                                    (1 - this.glArray[2]) * e,
                                                0,
                                                1
                                            )),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "random",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 255
                                        return (
                                            e < 0 && (e = 0),
                                            t > 255 && (t = 255),
                                            this.setColor(
                                                random$1(e, t),
                                                random$1(e, t),
                                                random$1(e, t),
                                                this.alpha
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        return (
                                            this.glArray[0] === e.glArray[0] &&
                                            this.glArray[1] === e.glArray[1] &&
                                            this.glArray[2] === e.glArray[2] &&
                                            this.glArray[3] === e.glArray[3]
                                        )
                                    },
                                },
                                {
                                    key: "parseCSS",
                                    value: function (e) {
                                        return cssToRGB.has(e)
                                            ? this.setColor.apply(
                                                  this,
                                                  cssToRGB.get(e)
                                              )
                                            : this.parseRGB(e)
                                    },
                                },
                                {
                                    key: "parseRGB",
                                    value: function (e) {
                                        var t = rgbaRx.exec(e)
                                        return t
                                            ? this.setColor(
                                                  +t[1],
                                                  +t[2],
                                                  +t[3],
                                                  +t[5]
                                              )
                                            : this.parseHex(e)
                                    },
                                },
                                {
                                    key: "parseHex",
                                    value: function (e) {
                                        var t,
                                            n =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1] &&
                                                arguments[1]
                                        if ((t = hex8Rx.exec(e)))
                                            return this.setColor(
                                                parseInt(
                                                    t[!1 === n ? 1 : 2],
                                                    16
                                                ),
                                                parseInt(
                                                    t[!1 === n ? 2 : 3],
                                                    16
                                                ),
                                                parseInt(
                                                    t[!1 === n ? 3 : 4],
                                                    16
                                                ),
                                                (
                                                    _clamp(
                                                        parseInt(
                                                            t[!1 === n ? 4 : 1],
                                                            16
                                                        ),
                                                        0,
                                                        255
                                                    ) / 255
                                                ).toFixed(1)
                                            )
                                        if ((t = hex6Rx.exec(e)))
                                            return this.setColor(
                                                parseInt(t[1], 16),
                                                parseInt(t[2], 16),
                                                parseInt(t[3], 16)
                                            )
                                        if ((t = hex4Rx.exec(e))) {
                                            var i = t[!1 === n ? 1 : 2],
                                                r = t[!1 === n ? 2 : 3],
                                                o = t[!1 === n ? 3 : 4],
                                                s = t[!1 === n ? 4 : 1]
                                            return this.setColor(
                                                parseInt(i + i, 16),
                                                parseInt(r + r, 16),
                                                parseInt(o + o, 16),
                                                (
                                                    _clamp(
                                                        parseInt(s + s, 16),
                                                        0,
                                                        255
                                                    ) / 255
                                                ).toFixed(1)
                                            )
                                        }
                                        if ((t = hex3Rx.exec(e)))
                                            return this.setColor(
                                                parseInt(t[1] + t[1], 16),
                                                parseInt(t[2] + t[2], 16),
                                                parseInt(t[3] + t[3], 16)
                                            )
                                        throw new Error(
                                            "invalid parameter: " + e
                                        )
                                    },
                                },
                                {
                                    key: "toUint32",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : this.alpha,
                                            t = 255 & this.r,
                                            n = 255 & this.g,
                                            i = 255 & this.b,
                                            r = (255 * e) & 255
                                        return (
                                            (r << 24) + (t << 16) + (n << 8) + i
                                        )
                                    },
                                },
                                {
                                    key: "toArray",
                                    value: function () {
                                        return this.glArray
                                    },
                                },
                                {
                                    key: "toHex",
                                    value: function () {
                                        return (
                                            "#" +
                                            _toHex(this.r) +
                                            _toHex(this.g) +
                                            _toHex(this.b)
                                        )
                                    },
                                },
                                {
                                    key: "toHex8",
                                    value: function () {
                                        return (
                                            "#" +
                                            _toHex(this.r) +
                                            _toHex(this.g) +
                                            _toHex(this.b) +
                                            _toHex(255 * this.alpha)
                                        )
                                    },
                                },
                                {
                                    key: "toRGB",
                                    value: function () {
                                        return (
                                            "rgb(" +
                                            this.r +
                                            "," +
                                            this.g +
                                            "," +
                                            this.b +
                                            ")"
                                        )
                                    },
                                },
                                {
                                    key: "toRGBA",
                                    value: function () {
                                        return (
                                            "rgba(" +
                                            this.r +
                                            "," +
                                            this.g +
                                            "," +
                                            this.b +
                                            "," +
                                            this.alpha +
                                            ")"
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    Matrix3d = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        void 0 === this.val &&
                                            (this.val = new Float32Array(16)),
                                            arguments.length &&
                                            arguments[0] instanceof e
                                                ? this.copy(arguments[0])
                                                : 16 === arguments.length
                                                ? this.setTransform.apply(
                                                      this,
                                                      arguments
                                                  )
                                                : this.identity()
                                    },
                                },
                                {
                                    key: "tx",
                                    get: function () {
                                        return this.val[12]
                                    },
                                },
                                {
                                    key: "ty",
                                    get: function () {
                                        return this.val[13]
                                    },
                                },
                                {
                                    key: "tz",
                                    get: function () {
                                        return this.val[14]
                                    },
                                },
                                {
                                    key: "identity",
                                    value: function () {
                                        return this.setTransform(
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1
                                        )
                                    },
                                },
                                {
                                    key: "setTransform",
                                    value: function (
                                        e,
                                        t,
                                        n,
                                        i,
                                        r,
                                        o,
                                        s,
                                        a,
                                        l,
                                        u,
                                        h,
                                        c,
                                        d,
                                        f,
                                        p,
                                        v
                                    ) {
                                        var g = this.val
                                        return (
                                            (g[0] = e),
                                            (g[1] = t),
                                            (g[2] = n),
                                            (g[3] = i),
                                            (g[4] = r),
                                            (g[5] = o),
                                            (g[6] = s),
                                            (g[7] = a),
                                            (g[8] = l),
                                            (g[9] = u),
                                            (g[10] = h),
                                            (g[11] = c),
                                            (g[12] = d),
                                            (g[13] = f),
                                            (g[14] = p),
                                            (g[15] = v),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this.val.set(e.val), this
                                    },
                                },
                                {
                                    key: "fromMat2d",
                                    value: function (e) {
                                        var t = e.val
                                        return this.setTransform(
                                            t[0],
                                            t[3],
                                            t[6],
                                            0,
                                            t[1],
                                            t[4],
                                            t[7],
                                            0,
                                            t[2],
                                            t[5],
                                            t[8],
                                            0,
                                            0,
                                            0,
                                            0,
                                            1
                                        )
                                    },
                                },
                                {
                                    key: "multiply",
                                    value: function (e) {
                                        var t = this.val,
                                            n = e.val,
                                            i = t[0],
                                            r = t[1],
                                            o = t[2],
                                            s = t[3],
                                            a = t[4],
                                            l = t[5],
                                            u = t[6],
                                            h = t[7],
                                            c = t[8],
                                            d = t[9],
                                            f = t[10],
                                            p = t[11],
                                            v = t[12],
                                            g = t[13],
                                            y = t[14],
                                            _ = t[15],
                                            m = n[0],
                                            x = n[1],
                                            w = n[2],
                                            b = n[3]
                                        return (
                                            (t[0] =
                                                m * i + x * a + w * c + b * v),
                                            (t[1] =
                                                m * r + x * l + w * d + b * g),
                                            (t[2] =
                                                m * o + x * u + w * f + b * y),
                                            (t[3] =
                                                m * s + x * h + w * p + b * _),
                                            (m = n[4]),
                                            (x = n[5]),
                                            (w = n[6]),
                                            (b = n[7]),
                                            (t[4] =
                                                m * i + x * a + w * c + b * v),
                                            (t[5] =
                                                m * r + x * l + w * d + b * g),
                                            (t[6] =
                                                m * o + x * u + w * f + b * y),
                                            (t[7] =
                                                m * s + x * h + w * p + b * _),
                                            (m = n[8]),
                                            (x = n[9]),
                                            (w = n[10]),
                                            (b = n[11]),
                                            (t[8] =
                                                m * i + x * a + w * c + b * v),
                                            (t[9] =
                                                m * r + x * l + w * d + b * g),
                                            (t[10] =
                                                m * o + x * u + w * f + b * y),
                                            (t[11] =
                                                m * s + x * h + w * p + b * _),
                                            (m = n[12]),
                                            (x = n[13]),
                                            (w = n[14]),
                                            (b = n[15]),
                                            (t[12] =
                                                m * i + x * a + w * c + b * v),
                                            (t[13] =
                                                m * r + x * l + w * d + b * g),
                                            (t[14] =
                                                m * o + x * u + w * f + b * y),
                                            (t[15] =
                                                m * s + x * h + w * p + b * _),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "transpose",
                                    value: function () {
                                        var e = this.val,
                                            t = e[1],
                                            n = e[2],
                                            i = e[3],
                                            r = e[6],
                                            o = e[7],
                                            s = e[11]
                                        return (
                                            (e[1] = e[4]),
                                            (e[2] = e[8]),
                                            (e[3] = e[12]),
                                            (e[4] = t),
                                            (e[6] = e[9]),
                                            (e[7] = e[13]),
                                            (e[8] = n),
                                            (e[9] = r),
                                            (e[11] = e[14]),
                                            (e[12] = i),
                                            (e[13] = o),
                                            (e[14] = s),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "invert",
                                    value: function () {
                                        var e = this.val,
                                            t = e[0],
                                            n = e[1],
                                            i = e[2],
                                            r = e[3],
                                            o = e[4],
                                            s = e[5],
                                            a = e[6],
                                            l = e[7],
                                            u = e[8],
                                            h = e[9],
                                            c = e[10],
                                            d = e[11],
                                            f = e[12],
                                            p = e[13],
                                            v = e[14],
                                            g = e[15],
                                            y = t * s - n * o,
                                            _ = t * a - i * o,
                                            m = t * l - r * o,
                                            x = n * a - i * s,
                                            w = n * l - r * s,
                                            b = i * l - r * a,
                                            E = u * p - h * f,
                                            T = u * v - c * f,
                                            k = u * g - d * f,
                                            S = h * v - c * p,
                                            A = h * g - d * p,
                                            C = c * g - d * v,
                                            O =
                                                y * C -
                                                _ * A +
                                                m * S +
                                                x * k -
                                                w * T +
                                                b * E
                                        return O
                                            ? ((O = 1 / O),
                                              (e[0] =
                                                  (s * C - a * A + l * S) * O),
                                              (e[1] =
                                                  (i * A - n * C - r * S) * O),
                                              (e[2] =
                                                  (p * b - v * w + g * x) * O),
                                              (e[3] =
                                                  (c * w - h * b - d * x) * O),
                                              (e[4] =
                                                  (a * k - o * C - l * T) * O),
                                              (e[5] =
                                                  (t * C - i * k + r * T) * O),
                                              (e[6] =
                                                  (v * m - f * b - g * _) * O),
                                              (e[7] =
                                                  (u * b - c * m + d * _) * O),
                                              (e[8] =
                                                  (o * A - s * k + l * E) * O),
                                              (e[9] =
                                                  (n * k - t * A - r * E) * O),
                                              (e[10] =
                                                  (f * w - p * m + g * y) * O),
                                              (e[11] =
                                                  (h * m - u * w - d * y) * O),
                                              (e[12] =
                                                  (s * T - o * S - a * E) * O),
                                              (e[13] =
                                                  (t * S - n * T + i * E) * O),
                                              (e[14] =
                                                  (p * _ - f * x - v * y) * O),
                                              (e[15] =
                                                  (u * x - h * _ + c * y) * O),
                                              this)
                                            : null
                                    },
                                },
                                {
                                    key: "apply",
                                    value: function (e) {
                                        var t = this.val,
                                            n = e.x,
                                            i = e.y,
                                            r = void 0 !== e.z ? e.z : 1,
                                            o =
                                                t[3] * n +
                                                    t[7] * i +
                                                    t[11] * r +
                                                    t[15] || 1
                                        return (
                                            (e.x =
                                                (t[0] * n +
                                                    t[4] * i +
                                                    t[8] * r +
                                                    t[12]) /
                                                o),
                                            (e.y =
                                                (t[1] * n +
                                                    t[5] * i +
                                                    t[9] * r +
                                                    t[13]) /
                                                o),
                                            void 0 !== e.z &&
                                                (e.z =
                                                    (t[2] * n +
                                                        t[6] * i +
                                                        t[10] * r +
                                                        t[14]) /
                                                    o),
                                            e
                                        )
                                    },
                                },
                                {
                                    key: "applyInverse",
                                    value: function (e) {
                                        var t = pool
                                            .pull("Matrix3d", this)
                                            .invert()
                                        return t.apply(e), pool.push(t), e
                                    },
                                },
                                {
                                    key: "ortho",
                                    value: function (e, t, n, i, r, o) {
                                        var s = this.val,
                                            a = 1 / (e - t),
                                            l = 1 / (n - i),
                                            u = 1 / (r - o)
                                        return (
                                            (s[0] = -2 * a),
                                            (s[1] = 0),
                                            (s[2] = 0),
                                            (s[3] = 0),
                                            (s[4] = 0),
                                            (s[5] = -2 * l),
                                            (s[6] = 0),
                                            (s[7] = 0),
                                            (s[8] = 0),
                                            (s[9] = 0),
                                            (s[10] = 2 * u),
                                            (s[11] = 0),
                                            (s[12] = (e + t) * a),
                                            (s[13] = (i + n) * l),
                                            (s[14] = (o + r) * u),
                                            (s[15] = 1),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t, n) {
                                        var i = this.val,
                                            r = e,
                                            o = void 0 === t ? r : t,
                                            s = void 0 === n ? 0 : n
                                        return (
                                            (i[0] = i[0] * r),
                                            (i[1] = i[1] * r),
                                            (i[2] = i[2] * r),
                                            (i[3] = i[3] * r),
                                            (i[4] = i[4] * o),
                                            (i[5] = i[5] * o),
                                            (i[6] = i[6] * o),
                                            (i[7] = i[7] * o),
                                            (i[8] = i[8] * s),
                                            (i[9] = i[9] * s),
                                            (i[10] = i[10] * s),
                                            (i[11] = i[11] * s),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this.scale(e.x, e.y, e.z)
                                    },
                                },
                                {
                                    key: "scaleX",
                                    value: function (e) {
                                        return this.scale(e, 1)
                                    },
                                },
                                {
                                    key: "scaleY",
                                    value: function (e) {
                                        return this.scale(1, e)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        var n,
                                            i,
                                            r,
                                            o,
                                            s,
                                            a,
                                            l,
                                            u,
                                            h,
                                            c,
                                            d,
                                            f,
                                            p,
                                            v,
                                            g,
                                            y,
                                            _,
                                            m,
                                            x,
                                            w,
                                            b,
                                            E,
                                            T,
                                            k,
                                            S = this.val,
                                            A = t.x,
                                            C = t.y,
                                            O = t.z,
                                            P = Math.sqrt(A * A + C * C + O * O)
                                        return P < EPSILON
                                            ? null
                                            : ((A *= P = 1 / P),
                                              (C *= P),
                                              (O *= P),
                                              (n = Math.sin(e)),
                                              (r = 1 - (i = Math.cos(e))),
                                              (o = S[0]),
                                              (s = S[1]),
                                              (a = S[2]),
                                              (l = S[3]),
                                              (u = S[4]),
                                              (h = S[5]),
                                              (c = S[6]),
                                              (d = S[7]),
                                              (f = S[8]),
                                              (p = S[9]),
                                              (v = S[10]),
                                              (g = S[11]),
                                              (y = A * A * r + i),
                                              (_ = C * A * r + O * n),
                                              (m = O * A * r - C * n),
                                              (x = A * C * r - O * n),
                                              (w = C * C * r + i),
                                              (b = O * C * r + A * n),
                                              (E = A * O * r + C * n),
                                              (T = C * O * r - A * n),
                                              (k = O * O * r + i),
                                              (S[0] = o * y + u * _ + f * m),
                                              (S[1] = s * y + h * _ + p * m),
                                              (S[2] = a * y + c * _ + v * m),
                                              (S[3] = l * y + d * _ + g * m),
                                              (S[4] = o * x + u * w + f * b),
                                              (S[5] = s * x + h * w + p * b),
                                              (S[6] = a * x + c * w + v * b),
                                              (S[7] = l * x + d * w + g * b),
                                              (S[8] = o * E + u * T + f * k),
                                              (S[9] = s * E + h * T + p * k),
                                              (S[10] = a * E + c * T + v * k),
                                              (S[11] = l * E + d * T + g * k),
                                              this)
                                    },
                                },
                                {
                                    key: "translate",
                                    value: function () {
                                        var e,
                                            t,
                                            n,
                                            i = this.val
                                        return (
                                            arguments.length > 1
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]),
                                                  (n =
                                                      void 0 === arguments[2]
                                                          ? 0
                                                          : arguments[2]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y),
                                                  (n =
                                                      void 0 === arguments[0].z
                                                          ? 0
                                                          : arguments[0].z)),
                                            (i[12] =
                                                i[0] * e +
                                                i[4] * t +
                                                i[8] * n +
                                                i[12]),
                                            (i[13] =
                                                i[1] * e +
                                                i[5] * t +
                                                i[9] * n +
                                                i[13]),
                                            (i[14] =
                                                i[2] * e +
                                                i[6] * t +
                                                i[10] * n +
                                                i[14]),
                                            (i[15] =
                                                i[3] * e +
                                                i[7] * t +
                                                i[11] * n +
                                                i[15]),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "isIdentity",
                                    value: function () {
                                        var e = this.val
                                        return (
                                            1 === e[0] &&
                                            0 === e[1] &&
                                            0 === e[2] &&
                                            0 === e[3] &&
                                            0 === e[4] &&
                                            1 === e[5] &&
                                            0 === e[6] &&
                                            0 === e[7] &&
                                            0 === e[8] &&
                                            0 === e[9] &&
                                            1 === e[10] &&
                                            0 === e[11] &&
                                            0 === e[12] &&
                                            0 === e[13] &&
                                            0 === e[14] &&
                                            1 === e[15]
                                        )
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        var t = e.val,
                                            n = this.val
                                        return (
                                            n[0] === t[0] &&
                                            n[1] === t[1] &&
                                            n[2] === t[2] &&
                                            n[3] === t[3] &&
                                            n[4] === t[4] &&
                                            n[5] === t[5] &&
                                            n[6] === t[6] &&
                                            n[7] === t[7] &&
                                            n[8] === t[8] &&
                                            n[9] === t[9] &&
                                            n[10] === t[10] &&
                                            n[11] === t[11] &&
                                            n[12] === t[12] &&
                                            n[13] === t[13] &&
                                            n[14] === t[14] &&
                                            n[15] === t[15]
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull("Matrix3d", this)
                                    },
                                },
                                {
                                    key: "toArray",
                                    value: function () {
                                        return this.val
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        var e = this.val
                                        return (
                                            "me.Matrix3d(" +
                                            e[0] +
                                            ", " +
                                            e[1] +
                                            ", " +
                                            e[2] +
                                            ", " +
                                            e[3] +
                                            ", " +
                                            e[4] +
                                            ", " +
                                            e[5] +
                                            ", " +
                                            e[6] +
                                            ", " +
                                            e[7] +
                                            ", " +
                                            e[8] +
                                            ", " +
                                            e[9] +
                                            ", " +
                                            e[10] +
                                            ", " +
                                            e[11] +
                                            ", " +
                                            e[12] +
                                            ", " +
                                            e[13] +
                                            ", " +
                                            e[14] +
                                            ", " +
                                            e[15] +
                                            ")"
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    Matrix2d = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        return (
                                            void 0 === this.val &&
                                                (this.val = new Float32Array(
                                                    9
                                                )),
                                            arguments.length &&
                                            arguments[0] instanceof e
                                                ? this.copy(arguments[0])
                                                : arguments.length &&
                                                  arguments[0] instanceof
                                                      Matrix3d
                                                ? this.fromMat3d(arguments[0])
                                                : arguments.length >= 6
                                                ? this.setTransform.apply(
                                                      this,
                                                      arguments
                                                  )
                                                : this.identity(),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "tx",
                                    get: function () {
                                        return this.val[6]
                                    },
                                },
                                {
                                    key: "ty",
                                    get: function () {
                                        return this.val[7]
                                    },
                                },
                                {
                                    key: "identity",
                                    value: function () {
                                        return (
                                            this.setTransform(
                                                1,
                                                0,
                                                0,
                                                0,
                                                1,
                                                0,
                                                0,
                                                0,
                                                1
                                            ),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setTransform",
                                    value: function () {
                                        var e = this.val
                                        return (
                                            9 === arguments.length
                                                ? ((e[0] = arguments[0]),
                                                  (e[1] = arguments[1]),
                                                  (e[2] = arguments[2]),
                                                  (e[3] = arguments[3]),
                                                  (e[4] = arguments[4]),
                                                  (e[5] = arguments[5]),
                                                  (e[6] = arguments[6]),
                                                  (e[7] = arguments[7]),
                                                  (e[8] = arguments[8]))
                                                : 6 === arguments.length &&
                                                  ((e[0] = arguments[0]),
                                                  (e[1] = arguments[2]),
                                                  (e[2] = arguments[4]),
                                                  (e[3] = arguments[1]),
                                                  (e[4] = arguments[3]),
                                                  (e[5] = arguments[5]),
                                                  (e[6] = 0),
                                                  (e[7] = 0),
                                                  (e[8] = 1)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this.val.set(e.val), this
                                    },
                                },
                                {
                                    key: "fromMat3d",
                                    value: function (e) {
                                        var t = e.val,
                                            n = this.val
                                        return (
                                            (n[0] = t[0]),
                                            (n[1] = t[1]),
                                            (n[2] = t[2]),
                                            (n[3] = t[4]),
                                            (n[4] = t[5]),
                                            (n[5] = t[6]),
                                            (n[6] = t[8]),
                                            (n[7] = t[9]),
                                            (n[8] = t[10]),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "multiply",
                                    value: function (e) {
                                        var t = e.val,
                                            n = this.val,
                                            i = n[0],
                                            r = n[1],
                                            o = n[3],
                                            s = n[4],
                                            a = t[0],
                                            l = t[1],
                                            u = t[3],
                                            h = t[4],
                                            c = t[6],
                                            d = t[7]
                                        return (
                                            (n[0] = i * a + o * l),
                                            (n[1] = r * a + s * l),
                                            (n[3] = i * u + o * h),
                                            (n[4] = r * u + s * h),
                                            (n[6] += i * c + o * d),
                                            (n[7] += r * c + s * d),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "transpose",
                                    value: function () {
                                        var e = this.val,
                                            t = e[1],
                                            n = e[2],
                                            i = e[5]
                                        return (
                                            (e[1] = e[3]),
                                            (e[2] = e[6]),
                                            (e[3] = t),
                                            (e[5] = e[7]),
                                            (e[6] = n),
                                            (e[7] = i),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "invert",
                                    value: function () {
                                        var e = this.val,
                                            t = e[0],
                                            n = e[1],
                                            i = e[2],
                                            r = e[3],
                                            o = e[4],
                                            s = e[5],
                                            a = e[6],
                                            l = e[7],
                                            u = e[8],
                                            h = u * o - s * l,
                                            c = s * a - u * r,
                                            d = l * r - o * a,
                                            f = t * h + n * c + i * d
                                        return (
                                            (e[0] = h / f),
                                            (e[1] = (i * l - u * n) / f),
                                            (e[2] = (s * n - i * o) / f),
                                            (e[3] = c / f),
                                            (e[4] = (u * t - i * a) / f),
                                            (e[5] = (i * r - s * t) / f),
                                            (e[6] = d / f),
                                            (e[7] = (n * a - l * t) / f),
                                            (e[8] = (o * t - n * r) / f),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "apply",
                                    value: function (e) {
                                        var t = this.val,
                                            n = e.x,
                                            i = e.y
                                        return (
                                            (e.x = n * t[0] + i * t[3] + t[6]),
                                            (e.y = n * t[1] + i * t[4] + t[7]),
                                            e
                                        )
                                    },
                                },
                                {
                                    key: "applyInverse",
                                    value: function (e) {
                                        var t = this.val,
                                            n = e.x,
                                            i = e.y,
                                            r = 1 / (t[0] * t[4] + t[3] * -t[1])
                                        return (
                                            (e.x =
                                                t[4] * r * n +
                                                -t[3] * r * i +
                                                (t[7] * t[3] - t[6] * t[4]) *
                                                    r),
                                            (e.y =
                                                t[0] * r * i +
                                                -t[1] * r * n +
                                                (-t[7] * t[0] + t[6] * t[1]) *
                                                    r),
                                            e
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        var n = this.val,
                                            i = e,
                                            r = void 0 === t ? i : t
                                        return (
                                            (n[0] *= i),
                                            (n[1] *= i),
                                            (n[3] *= r),
                                            (n[4] *= r),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this.scale(e.x, e.y)
                                    },
                                },
                                {
                                    key: "scaleX",
                                    value: function (e) {
                                        return this.scale(e, 1)
                                    },
                                },
                                {
                                    key: "scaleY",
                                    value: function (e) {
                                        return this.scale(1, e)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e) {
                                        if (0 !== e) {
                                            var t = this.val,
                                                n = t[0],
                                                i = t[1],
                                                r = t[2],
                                                o = t[3],
                                                s = t[4],
                                                a = t[5],
                                                l = Math.sin(e),
                                                u = Math.cos(e)
                                            ;(t[0] = u * n + l * o),
                                                (t[1] = u * i + l * s),
                                                (t[2] = u * r + l * a),
                                                (t[3] = u * o - l * n),
                                                (t[4] = u * s - l * i),
                                                (t[5] = u * a - l * r)
                                        }
                                        return this
                                    },
                                },
                                {
                                    key: "translate",
                                    value: function () {
                                        var e,
                                            t,
                                            n = this.val
                                        return (
                                            2 === arguments.length
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y)),
                                            (n[6] += n[0] * e + n[3] * t),
                                            (n[7] += n[1] * e + n[4] * t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "isIdentity",
                                    value: function () {
                                        var e = this.val
                                        return (
                                            1 === e[0] &&
                                            0 === e[1] &&
                                            0 === e[2] &&
                                            0 === e[3] &&
                                            1 === e[4] &&
                                            0 === e[5] &&
                                            0 === e[6] &&
                                            0 === e[7] &&
                                            1 === e[8]
                                        )
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        var t = e.val,
                                            n = this.val
                                        return (
                                            n[0] === t[0] &&
                                            n[1] === t[1] &&
                                            n[2] === t[2] &&
                                            n[3] === t[3] &&
                                            n[4] === t[4] &&
                                            n[5] === t[5] &&
                                            n[6] === t[6] &&
                                            n[7] === t[7] &&
                                            n[8] === t[8]
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull("Matrix2d", this)
                                    },
                                },
                                {
                                    key: "toArray",
                                    value: function () {
                                        return this.val
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        var e = this.val
                                        return (
                                            "me.Matrix2d(" +
                                            e[0] +
                                            ", " +
                                            e[1] +
                                            ", " +
                                            e[2] +
                                            ", " +
                                            e[3] +
                                            ", " +
                                            e[4] +
                                            ", " +
                                            e[5] +
                                            ", " +
                                            e[6] +
                                            ", " +
                                            e[7] +
                                            ", " +
                                            e[8] +
                                            ")"
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    commonjsGlobal =
                        "undefined" != typeof globalThis
                            ? globalThis
                            : "undefined" != typeof window
                            ? window
                            : void 0 !== __webpack_require__.g
                            ? __webpack_require__.g
                            : "undefined" != typeof self
                            ? self
                            : {},
                    eventemitter3 = { exports: {} }
                !(function (e) {
                    var t = Object.prototype.hasOwnProperty,
                        n = "~"
                    function i() {}
                    function r(e, t, n) {
                        ;(this.fn = e),
                            (this.context = t),
                            (this.once = n || !1)
                    }
                    function o(e, t, i, o, s) {
                        if ("function" != typeof i)
                            throw new TypeError(
                                "The listener must be a function"
                            )
                        var a = new r(i, o || e, s),
                            l = n ? n + t : t
                        return (
                            e._events[l]
                                ? e._events[l].fn
                                    ? (e._events[l] = [e._events[l], a])
                                    : e._events[l].push(a)
                                : ((e._events[l] = a), e._eventsCount++),
                            e
                        )
                    }
                    function s(e, t) {
                        0 == --e._eventsCount
                            ? (e._events = new i())
                            : delete e._events[t]
                    }
                    function a() {
                        ;(this._events = new i()), (this._eventsCount = 0)
                    }
                    Object.create &&
                        ((i.prototype = Object.create(null)),
                        new i().__proto__ || (n = !1)),
                        (a.prototype.eventNames = function () {
                            var e,
                                i,
                                r = []
                            if (0 === this._eventsCount) return r
                            for (i in (e = this._events))
                                t.call(e, i) && r.push(n ? i.slice(1) : i)
                            return Object.getOwnPropertySymbols
                                ? r.concat(Object.getOwnPropertySymbols(e))
                                : r
                        }),
                        (a.prototype.listeners = function (e) {
                            var t = n ? n + e : e,
                                i = this._events[t]
                            if (!i) return []
                            if (i.fn) return [i.fn]
                            for (
                                var r = 0, o = i.length, s = new Array(o);
                                r < o;
                                r++
                            )
                                s[r] = i[r].fn
                            return s
                        }),
                        (a.prototype.listenerCount = function (e) {
                            var t = n ? n + e : e,
                                i = this._events[t]
                            return i ? (i.fn ? 1 : i.length) : 0
                        }),
                        (a.prototype.emit = function (e, t, i, r, o, s) {
                            var a = n ? n + e : e
                            if (!this._events[a]) return !1
                            var l,
                                u,
                                h = this._events[a],
                                c = arguments.length
                            if (h.fn) {
                                switch (
                                    (h.once &&
                                        this.removeListener(
                                            e,
                                            h.fn,
                                            void 0,
                                            !0
                                        ),
                                    c)
                                ) {
                                    case 1:
                                        return h.fn.call(h.context), !0
                                    case 2:
                                        return h.fn.call(h.context, t), !0
                                    case 3:
                                        return h.fn.call(h.context, t, i), !0
                                    case 4:
                                        return h.fn.call(h.context, t, i, r), !0
                                    case 5:
                                        return (
                                            h.fn.call(h.context, t, i, r, o), !0
                                        )
                                    case 6:
                                        return (
                                            h.fn.call(h.context, t, i, r, o, s),
                                            !0
                                        )
                                }
                                for (u = 1, l = new Array(c - 1); u < c; u++)
                                    l[u - 1] = arguments[u]
                                h.fn.apply(h.context, l)
                            } else {
                                var d,
                                    f = h.length
                                for (u = 0; u < f; u++)
                                    switch (
                                        (h[u].once &&
                                            this.removeListener(
                                                e,
                                                h[u].fn,
                                                void 0,
                                                !0
                                            ),
                                        c)
                                    ) {
                                        case 1:
                                            h[u].fn.call(h[u].context)
                                            break
                                        case 2:
                                            h[u].fn.call(h[u].context, t)
                                            break
                                        case 3:
                                            h[u].fn.call(h[u].context, t, i)
                                            break
                                        case 4:
                                            h[u].fn.call(h[u].context, t, i, r)
                                            break
                                        default:
                                            if (!l)
                                                for (
                                                    d = 1, l = new Array(c - 1);
                                                    d < c;
                                                    d++
                                                )
                                                    l[d - 1] = arguments[d]
                                            h[u].fn.apply(h[u].context, l)
                                    }
                            }
                            return !0
                        }),
                        (a.prototype.on = function (e, t, n) {
                            return o(this, e, t, n, !1)
                        }),
                        (a.prototype.once = function (e, t, n) {
                            return o(this, e, t, n, !0)
                        }),
                        (a.prototype.removeListener = function (e, t, i, r) {
                            var o = n ? n + e : e
                            if (!this._events[o]) return this
                            if (!t) return s(this, o), this
                            var a = this._events[o]
                            if (a.fn)
                                a.fn !== t ||
                                    (r && !a.once) ||
                                    (i && a.context !== i) ||
                                    s(this, o)
                            else {
                                for (
                                    var l = 0, u = [], h = a.length;
                                    l < h;
                                    l++
                                )
                                    (a[l].fn !== t ||
                                        (r && !a[l].once) ||
                                        (i && a[l].context !== i)) &&
                                        u.push(a[l])
                                u.length
                                    ? (this._events[o] =
                                          1 === u.length ? u[0] : u)
                                    : s(this, o)
                            }
                            return this
                        }),
                        (a.prototype.removeAllListeners = function (e) {
                            var t
                            return (
                                e
                                    ? ((t = n ? n + e : e),
                                      this._events[t] && s(this, t))
                                    : ((this._events = new i()),
                                      (this._eventsCount = 0)),
                                this
                            )
                        }),
                        (a.prototype.off = a.prototype.removeListener),
                        (a.prototype.addListener = a.prototype.on),
                        (a.prefixed = n),
                        (a.EventEmitter = a),
                        (e.exports = a)
                })(eventemitter3)
                var EventEmitter = eventemitter3.exports,
                    eventEmitter = new EventEmitter(),
                    BOOT = "me.boot",
                    STATE_PAUSE = "me.state.onPause",
                    STATE_RESUME = "me.state.onResume",
                    STATE_STOP = "me.state.onStop",
                    STATE_RESTART = "me.state.onRestart",
                    VIDEO_INIT = "me.video.onInit",
                    GAME_INIT = "me.game.onInit",
                    GAME_RESET = "me.game.onReset",
                    GAME_BEFORE_UPDATE = "me.game.beforeUpdate",
                    GAME_AFTER_UPDATE = "me.game.afterUpdate",
                    GAME_UPDATE = "me.game.onUpdate",
                    GAME_BEFORE_DRAW = "me.game.beforeDraw",
                    GAME_AFTER_DRAW = "me.game.afterDraw",
                    LEVEL_LOADED = "me.game.onLevelLoaded",
                    LOADER_COMPLETE = "me.loader.onload",
                    LOADER_PROGRESS = "me.loader.onProgress",
                    KEYDOWN = "me.input.keydown",
                    KEYUP = "me.input.keyup",
                    GAMEPAD_CONNECTED = "gamepad.connected",
                    GAMEPAD_DISCONNECTED = "gamepad.disconnected",
                    GAMEPAD_UPDATE = "gamepad.update",
                    POINTERMOVE = "me.event.pointermove",
                    DRAGSTART = "me.game.dragstart",
                    DRAGEND = "me.game.dragend",
                    WINDOW_ONRESIZE = "window.onresize",
                    CANVAS_ONRESIZE = "canvas.onresize",
                    VIEWPORT_ONRESIZE = "viewport.onresize",
                    WINDOW_ONORIENTATION_CHANGE = "window.orientationchange",
                    WINDOW_ONSCROLL = "window.onscroll",
                    VIEWPORT_ONCHANGE = "viewport.onchange",
                    WEBGL_ONCONTEXT_LOST = "renderer.webglcontextlost",
                    WEBGL_ONCONTEXT_RESTORED = "renderer.webglcontextrestored"
                function emit(e) {
                    for (
                        var t = arguments.length,
                            n = new Array(t > 1 ? t - 1 : 0),
                            i = 1;
                        i < t;
                        i++
                    )
                        n[i - 1] = arguments[i]
                    return eventEmitter.emit.apply(eventEmitter, [e].concat(n))
                }
                function on(e, t, n) {
                    return eventEmitter.on(e, t, n)
                }
                function once(e, t, n) {
                    return eventEmitter.once(e, t, n)
                }
                function off(e, t) {
                    return eventEmitter.off(e, t)
                }
                var event = Object.freeze({
                        __proto__: null,
                        BOOT,
                        STATE_PAUSE,
                        STATE_RESUME,
                        STATE_STOP,
                        STATE_RESTART,
                        VIDEO_INIT,
                        GAME_INIT,
                        GAME_RESET,
                        GAME_BEFORE_UPDATE,
                        GAME_AFTER_UPDATE,
                        GAME_UPDATE,
                        GAME_BEFORE_DRAW,
                        GAME_AFTER_DRAW,
                        LEVEL_LOADED,
                        LOADER_COMPLETE,
                        LOADER_PROGRESS,
                        KEYDOWN,
                        KEYUP,
                        GAMEPAD_CONNECTED,
                        GAMEPAD_DISCONNECTED,
                        GAMEPAD_UPDATE,
                        POINTERMOVE,
                        DRAGSTART,
                        DRAGEND,
                        WINDOW_ONRESIZE,
                        CANVAS_ONRESIZE,
                        VIEWPORT_ONRESIZE,
                        WINDOW_ONORIENTATION_CHANGE,
                        WINDOW_ONSCROLL,
                        VIEWPORT_ONCHANGE,
                        WEBGL_ONCONTEXT_LOST,
                        WEBGL_ONCONTEXT_RESTORED,
                        emit,
                        on,
                        once,
                        off,
                    }),
                    howler = {},
                    exports
                ;(exports = howler),
                    (function () {
                        var e = function () {
                            this.init()
                        }
                        e.prototype = {
                            init: function () {
                                var e = this || t
                                return (
                                    (e._counter = 1e3),
                                    (e._html5AudioPool = []),
                                    (e.html5PoolSize = 10),
                                    (e._codecs = {}),
                                    (e._howls = []),
                                    (e._muted = !1),
                                    (e._volume = 1),
                                    (e._canPlayEvent = "canplaythrough"),
                                    (e._navigator =
                                        "undefined" != typeof window &&
                                        window.navigator
                                            ? window.navigator
                                            : null),
                                    (e.masterGain = null),
                                    (e.noAudio = !1),
                                    (e.usingWebAudio = !0),
                                    (e.autoSuspend = !0),
                                    (e.ctx = null),
                                    (e.autoUnlock = !0),
                                    e._setup(),
                                    e
                                )
                            },
                            volume: function (e) {
                                var n = this || t
                                if (
                                    ((e = parseFloat(e)),
                                    n.ctx || u(),
                                    void 0 !== e && e >= 0 && e <= 1)
                                ) {
                                    if (((n._volume = e), n._muted)) return n
                                    n.usingWebAudio &&
                                        n.masterGain.gain.setValueAtTime(
                                            e,
                                            t.ctx.currentTime
                                        )
                                    for (var i = 0; i < n._howls.length; i++)
                                        if (!n._howls[i]._webAudio)
                                            for (
                                                var r =
                                                        n._howls[
                                                            i
                                                        ]._getSoundIds(),
                                                    o = 0;
                                                o < r.length;
                                                o++
                                            ) {
                                                var s = n._howls[i]._soundById(
                                                    r[o]
                                                )
                                                s &&
                                                    s._node &&
                                                    (s._node.volume =
                                                        s._volume * e)
                                            }
                                    return n
                                }
                                return n._volume
                            },
                            mute: function (e) {
                                var n = this || t
                                n.ctx || u(),
                                    (n._muted = e),
                                    n.usingWebAudio &&
                                        n.masterGain.gain.setValueAtTime(
                                            e ? 0 : n._volume,
                                            t.ctx.currentTime
                                        )
                                for (var i = 0; i < n._howls.length; i++)
                                    if (!n._howls[i]._webAudio)
                                        for (
                                            var r = n._howls[i]._getSoundIds(),
                                                o = 0;
                                            o < r.length;
                                            o++
                                        ) {
                                            var s = n._howls[i]._soundById(r[o])
                                            s &&
                                                s._node &&
                                                (s._node.muted =
                                                    !!e || s._muted)
                                        }
                                return n
                            },
                            stop: function () {
                                for (
                                    var e = this || t, n = 0;
                                    n < e._howls.length;
                                    n++
                                )
                                    e._howls[n].stop()
                                return e
                            },
                            unload: function () {
                                for (
                                    var e = this || t, n = e._howls.length - 1;
                                    n >= 0;
                                    n--
                                )
                                    e._howls[n].unload()
                                return (
                                    e.usingWebAudio &&
                                        e.ctx &&
                                        void 0 !== e.ctx.close &&
                                        (e.ctx.close(), (e.ctx = null), u()),
                                    e
                                )
                            },
                            codecs: function (e) {
                                return (this || t)._codecs[e.replace(/^x-/, "")]
                            },
                            _setup: function () {
                                var e = this || t
                                if (
                                    ((e.state =
                                        (e.ctx && e.ctx.state) || "suspended"),
                                    e._autoSuspend(),
                                    !e.usingWebAudio)
                                )
                                    if ("undefined" != typeof Audio)
                                        try {
                                            void 0 ===
                                                new Audio().oncanplaythrough &&
                                                (e._canPlayEvent = "canplay")
                                        } catch (t) {
                                            e.noAudio = !0
                                        }
                                    else e.noAudio = !0
                                try {
                                    new Audio().muted && (e.noAudio = !0)
                                } catch (e) {}
                                return e.noAudio || e._setupCodecs(), e
                            },
                            _setupCodecs: function () {
                                var e = this || t,
                                    n = null
                                try {
                                    n =
                                        "undefined" != typeof Audio
                                            ? new Audio()
                                            : null
                                } catch (t) {
                                    return e
                                }
                                if (!n || "function" != typeof n.canPlayType)
                                    return e
                                var i = n
                                        .canPlayType("audio/mpeg;")
                                        .replace(/^no$/, ""),
                                    r = e._navigator
                                        ? e._navigator.userAgent
                                        : "",
                                    o = r.match(/OPR\/([0-6].)/g),
                                    s =
                                        o &&
                                        parseInt(o[0].split("/")[1], 10) < 33,
                                    a =
                                        -1 !== r.indexOf("Safari") &&
                                        -1 === r.indexOf("Chrome"),
                                    l = r.match(/Version\/(.*?) /),
                                    u = a && l && parseInt(l[1], 10) < 15
                                return (
                                    (e._codecs = {
                                        mp3: !(
                                            s ||
                                            (!i &&
                                                !n
                                                    .canPlayType("audio/mp3;")
                                                    .replace(/^no$/, ""))
                                        ),
                                        mpeg: !!i,
                                        opus: !!n
                                            .canPlayType(
                                                'audio/ogg; codecs="opus"'
                                            )
                                            .replace(/^no$/, ""),
                                        ogg: !!n
                                            .canPlayType(
                                                'audio/ogg; codecs="vorbis"'
                                            )
                                            .replace(/^no$/, ""),
                                        oga: !!n
                                            .canPlayType(
                                                'audio/ogg; codecs="vorbis"'
                                            )
                                            .replace(/^no$/, ""),
                                        wav: !!(
                                            n.canPlayType(
                                                'audio/wav; codecs="1"'
                                            ) || n.canPlayType("audio/wav")
                                        ).replace(/^no$/, ""),
                                        aac: !!n
                                            .canPlayType("audio/aac;")
                                            .replace(/^no$/, ""),
                                        caf: !!n
                                            .canPlayType("audio/x-caf;")
                                            .replace(/^no$/, ""),
                                        m4a: !!(
                                            n.canPlayType("audio/x-m4a;") ||
                                            n.canPlayType("audio/m4a;") ||
                                            n.canPlayType("audio/aac;")
                                        ).replace(/^no$/, ""),
                                        m4b: !!(
                                            n.canPlayType("audio/x-m4b;") ||
                                            n.canPlayType("audio/m4b;") ||
                                            n.canPlayType("audio/aac;")
                                        ).replace(/^no$/, ""),
                                        mp4: !!(
                                            n.canPlayType("audio/x-mp4;") ||
                                            n.canPlayType("audio/mp4;") ||
                                            n.canPlayType("audio/aac;")
                                        ).replace(/^no$/, ""),
                                        weba: !(
                                            u ||
                                            !n
                                                .canPlayType(
                                                    'audio/webm; codecs="vorbis"'
                                                )
                                                .replace(/^no$/, "")
                                        ),
                                        webm: !(
                                            u ||
                                            !n
                                                .canPlayType(
                                                    'audio/webm; codecs="vorbis"'
                                                )
                                                .replace(/^no$/, "")
                                        ),
                                        dolby: !!n
                                            .canPlayType(
                                                'audio/mp4; codecs="ec-3"'
                                            )
                                            .replace(/^no$/, ""),
                                        flac: !!(
                                            n.canPlayType("audio/x-flac;") ||
                                            n.canPlayType("audio/flac;")
                                        ).replace(/^no$/, ""),
                                    }),
                                    e
                                )
                            },
                            _unlockAudio: function () {
                                var e = this || t
                                if (!e._audioUnlocked && e.ctx) {
                                    ;(e._audioUnlocked = !1),
                                        (e.autoUnlock = !1),
                                        e._mobileUnloaded ||
                                            44100 === e.ctx.sampleRate ||
                                            ((e._mobileUnloaded = !0),
                                            e.unload()),
                                        (e._scratchBuffer = e.ctx.createBuffer(
                                            1,
                                            1,
                                            22050
                                        ))
                                    var n = function t(n) {
                                        for (
                                            ;
                                            e._html5AudioPool.length <
                                            e.html5PoolSize;

                                        )
                                            try {
                                                var i = new Audio()
                                                ;(i._unlocked = !0),
                                                    e._releaseHtml5Audio(i)
                                            } catch (n) {
                                                e.noAudio = !0
                                                break
                                            }
                                        for (
                                            var r = 0;
                                            r < e._howls.length;
                                            r++
                                        )
                                            if (!e._howls[r]._webAudio)
                                                for (
                                                    var o =
                                                            e._howls[
                                                                r
                                                            ]._getSoundIds(),
                                                        s = 0;
                                                    s < o.length;
                                                    s++
                                                ) {
                                                    var a = e._howls[
                                                        r
                                                    ]._soundById(o[s])
                                                    a &&
                                                        a._node &&
                                                        !a._node._unlocked &&
                                                        ((a._node._unlocked =
                                                            !0),
                                                        a._node.load())
                                                }
                                        e._autoResume()
                                        var l = e.ctx.createBufferSource()
                                        ;(l.buffer = e._scratchBuffer),
                                            l.connect(e.ctx.destination),
                                            void 0 === l.start
                                                ? l.noteOn(0)
                                                : l.start(0),
                                            "function" == typeof e.ctx.resume &&
                                                e.ctx.resume(),
                                            (l.onended = function () {
                                                l.disconnect(0),
                                                    (e._audioUnlocked = !0),
                                                    document.removeEventListener(
                                                        "touchstart",
                                                        t,
                                                        !0
                                                    ),
                                                    document.removeEventListener(
                                                        "touchend",
                                                        t,
                                                        !0
                                                    ),
                                                    document.removeEventListener(
                                                        "click",
                                                        t,
                                                        !0
                                                    ),
                                                    document.removeEventListener(
                                                        "keydown",
                                                        t,
                                                        !0
                                                    )
                                                for (
                                                    var n = 0;
                                                    n < e._howls.length;
                                                    n++
                                                )
                                                    e._howls[n]._emit("unlock")
                                            })
                                    }
                                    return (
                                        document.addEventListener(
                                            "touchstart",
                                            n,
                                            !0
                                        ),
                                        document.addEventListener(
                                            "touchend",
                                            n,
                                            !0
                                        ),
                                        document.addEventListener(
                                            "click",
                                            n,
                                            !0
                                        ),
                                        document.addEventListener(
                                            "keydown",
                                            n,
                                            !0
                                        ),
                                        e
                                    )
                                }
                            },
                            _obtainHtml5Audio: function () {
                                var e = this || t
                                if (e._html5AudioPool.length)
                                    return e._html5AudioPool.pop()
                                var n = new Audio().play()
                                return (
                                    n &&
                                        "undefined" != typeof Promise &&
                                        (n instanceof Promise ||
                                            "function" == typeof n.then) &&
                                        n.catch(function () {
                                            console.warn(
                                                "HTML5 Audio pool exhausted, returning potentially locked audio object."
                                            )
                                        }),
                                    new Audio()
                                )
                            },
                            _releaseHtml5Audio: function (e) {
                                var n = this || t
                                return (
                                    e._unlocked && n._html5AudioPool.push(e), n
                                )
                            },
                            _autoSuspend: function () {
                                var e = this
                                if (
                                    e.autoSuspend &&
                                    e.ctx &&
                                    void 0 !== e.ctx.suspend &&
                                    t.usingWebAudio
                                ) {
                                    for (var n = 0; n < e._howls.length; n++)
                                        if (e._howls[n]._webAudio)
                                            for (
                                                var i = 0;
                                                i < e._howls[n]._sounds.length;
                                                i++
                                            )
                                                if (
                                                    !e._howls[n]._sounds[i]
                                                        ._paused
                                                )
                                                    return e
                                    return (
                                        e._suspendTimer &&
                                            clearTimeout(e._suspendTimer),
                                        (e._suspendTimer = setTimeout(
                                            function () {
                                                if (e.autoSuspend) {
                                                    ;(e._suspendTimer = null),
                                                        (e.state = "suspending")
                                                    var t = function () {
                                                        ;(e.state =
                                                            "suspended"),
                                                            e._resumeAfterSuspend &&
                                                                (delete e._resumeAfterSuspend,
                                                                e._autoResume())
                                                    }
                                                    e.ctx.suspend().then(t, t)
                                                }
                                            },
                                            3e4
                                        )),
                                        e
                                    )
                                }
                            },
                            _autoResume: function () {
                                var e = this
                                if (
                                    e.ctx &&
                                    void 0 !== e.ctx.resume &&
                                    t.usingWebAudio
                                )
                                    return (
                                        "running" === e.state &&
                                        "interrupted" !== e.ctx.state &&
                                        e._suspendTimer
                                            ? (clearTimeout(e._suspendTimer),
                                              (e._suspendTimer = null))
                                            : "suspended" === e.state ||
                                              ("running" === e.state &&
                                                  "interrupted" === e.ctx.state)
                                            ? (e.ctx.resume().then(function () {
                                                  e.state = "running"
                                                  for (
                                                      var t = 0;
                                                      t < e._howls.length;
                                                      t++
                                                  )
                                                      e._howls[t]._emit(
                                                          "resume"
                                                      )
                                              }),
                                              e._suspendTimer &&
                                                  (clearTimeout(
                                                      e._suspendTimer
                                                  ),
                                                  (e._suspendTimer = null)))
                                            : "suspending" === e.state &&
                                              (e._resumeAfterSuspend = !0),
                                        e
                                    )
                            },
                        }
                        var t = new e(),
                            n = function (e) {
                                e.src && 0 !== e.src.length
                                    ? this.init(e)
                                    : console.error(
                                          "An array of source files must be passed with any new Howl."
                                      )
                            }
                        n.prototype = {
                            init: function (e) {
                                var n = this
                                return (
                                    t.ctx || u(),
                                    (n._autoplay = e.autoplay || !1),
                                    (n._format =
                                        "string" != typeof e.format
                                            ? e.format
                                            : [e.format]),
                                    (n._html5 = e.html5 || !1),
                                    (n._muted = e.mute || !1),
                                    (n._loop = e.loop || !1),
                                    (n._pool = e.pool || 5),
                                    (n._preload =
                                        ("boolean" != typeof e.preload &&
                                            "metadata" !== e.preload) ||
                                        e.preload),
                                    (n._rate = e.rate || 1),
                                    (n._sprite = e.sprite || {}),
                                    (n._src =
                                        "string" != typeof e.src
                                            ? e.src
                                            : [e.src]),
                                    (n._volume =
                                        void 0 !== e.volume ? e.volume : 1),
                                    (n._xhr = {
                                        method:
                                            e.xhr && e.xhr.method
                                                ? e.xhr.method
                                                : "GET",
                                        headers:
                                            e.xhr && e.xhr.headers
                                                ? e.xhr.headers
                                                : null,
                                        withCredentials:
                                            !(
                                                !e.xhr || !e.xhr.withCredentials
                                            ) && e.xhr.withCredentials,
                                    }),
                                    (n._duration = 0),
                                    (n._state = "unloaded"),
                                    (n._sounds = []),
                                    (n._endTimers = {}),
                                    (n._queue = []),
                                    (n._playLock = !1),
                                    (n._onend = e.onend
                                        ? [{ fn: e.onend }]
                                        : []),
                                    (n._onfade = e.onfade
                                        ? [{ fn: e.onfade }]
                                        : []),
                                    (n._onload = e.onload
                                        ? [{ fn: e.onload }]
                                        : []),
                                    (n._onloaderror = e.onloaderror
                                        ? [{ fn: e.onloaderror }]
                                        : []),
                                    (n._onplayerror = e.onplayerror
                                        ? [{ fn: e.onplayerror }]
                                        : []),
                                    (n._onpause = e.onpause
                                        ? [{ fn: e.onpause }]
                                        : []),
                                    (n._onplay = e.onplay
                                        ? [{ fn: e.onplay }]
                                        : []),
                                    (n._onstop = e.onstop
                                        ? [{ fn: e.onstop }]
                                        : []),
                                    (n._onmute = e.onmute
                                        ? [{ fn: e.onmute }]
                                        : []),
                                    (n._onvolume = e.onvolume
                                        ? [{ fn: e.onvolume }]
                                        : []),
                                    (n._onrate = e.onrate
                                        ? [{ fn: e.onrate }]
                                        : []),
                                    (n._onseek = e.onseek
                                        ? [{ fn: e.onseek }]
                                        : []),
                                    (n._onunlock = e.onunlock
                                        ? [{ fn: e.onunlock }]
                                        : []),
                                    (n._onresume = []),
                                    (n._webAudio =
                                        t.usingWebAudio && !n._html5),
                                    void 0 !== t.ctx &&
                                        t.ctx &&
                                        t.autoUnlock &&
                                        t._unlockAudio(),
                                    t._howls.push(n),
                                    n._autoplay &&
                                        n._queue.push({
                                            event: "play",
                                            action: function () {
                                                n.play()
                                            },
                                        }),
                                    n._preload &&
                                        "none" !== n._preload &&
                                        n.load(),
                                    n
                                )
                            },
                            load: function () {
                                var e = this,
                                    n = null
                                if (t.noAudio)
                                    e._emit(
                                        "loaderror",
                                        null,
                                        "No audio support."
                                    )
                                else {
                                    "string" == typeof e._src &&
                                        (e._src = [e._src])
                                    for (var r = 0; r < e._src.length; r++) {
                                        var s, a
                                        if (e._format && e._format[r])
                                            s = e._format[r]
                                        else {
                                            if (
                                                "string" !=
                                                typeof (a = e._src[r])
                                            ) {
                                                e._emit(
                                                    "loaderror",
                                                    null,
                                                    "Non-string found in selected audio sources - ignoring."
                                                )
                                                continue
                                            }
                                            ;(s =
                                                /^data:audio\/([^;,]+);/i.exec(
                                                    a
                                                )) ||
                                                (s = /\.([^.]+)$/.exec(
                                                    a.split("?", 1)[0]
                                                )),
                                                s && (s = s[1].toLowerCase())
                                        }
                                        if (
                                            (s ||
                                                console.warn(
                                                    'No file extension was found. Consider using the "format" property or specify an extension.'
                                                ),
                                            s && t.codecs(s))
                                        ) {
                                            n = e._src[r]
                                            break
                                        }
                                    }
                                    if (n)
                                        return (
                                            (e._src = n),
                                            (e._state = "loading"),
                                            "https:" ===
                                                window.location.protocol &&
                                                "http:" === n.slice(0, 5) &&
                                                ((e._html5 = !0),
                                                (e._webAudio = !1)),
                                            new i(e),
                                            e._webAudio && o(e),
                                            e
                                        )
                                    e._emit(
                                        "loaderror",
                                        null,
                                        "No codec support for selected audio sources."
                                    )
                                }
                            },
                            play: function (e, n) {
                                var i = this,
                                    r = null
                                if ("number" == typeof e) (r = e), (e = null)
                                else {
                                    if (
                                        "string" == typeof e &&
                                        "loaded" === i._state &&
                                        !i._sprite[e]
                                    )
                                        return null
                                    if (
                                        void 0 === e &&
                                        ((e = "__default"), !i._playLock)
                                    ) {
                                        for (
                                            var o = 0, s = 0;
                                            s < i._sounds.length;
                                            s++
                                        )
                                            i._sounds[s]._paused &&
                                                !i._sounds[s]._ended &&
                                                (o++, (r = i._sounds[s]._id))
                                        1 === o ? (e = null) : (r = null)
                                    }
                                }
                                var a = r ? i._soundById(r) : i._inactiveSound()
                                if (!a) return null
                                if (
                                    (r && !e && (e = a._sprite || "__default"),
                                    "loaded" !== i._state)
                                ) {
                                    ;(a._sprite = e), (a._ended = !1)
                                    var l = a._id
                                    return (
                                        i._queue.push({
                                            event: "play",
                                            action: function () {
                                                i.play(l)
                                            },
                                        }),
                                        l
                                    )
                                }
                                if (r && !a._paused)
                                    return n || i._loadQueue("play"), a._id
                                i._webAudio && t._autoResume()
                                var u = Math.max(
                                        0,
                                        a._seek > 0
                                            ? a._seek
                                            : i._sprite[e][0] / 1e3
                                    ),
                                    h = Math.max(
                                        0,
                                        (i._sprite[e][0] + i._sprite[e][1]) /
                                            1e3 -
                                            u
                                    ),
                                    c = (1e3 * h) / Math.abs(a._rate),
                                    d = i._sprite[e][0] / 1e3,
                                    f =
                                        (i._sprite[e][0] + i._sprite[e][1]) /
                                        1e3
                                ;(a._sprite = e), (a._ended = !1)
                                var p = function () {
                                    ;(a._paused = !1),
                                        (a._seek = u),
                                        (a._start = d),
                                        (a._stop = f),
                                        (a._loop = !(
                                            !a._loop && !i._sprite[e][2]
                                        ))
                                }
                                if (!(u >= f)) {
                                    var v = a._node
                                    if (i._webAudio) {
                                        var g = function () {
                                            ;(i._playLock = !1),
                                                p(),
                                                i._refreshBuffer(a)
                                            var e =
                                                a._muted || i._muted
                                                    ? 0
                                                    : a._volume
                                            v.gain.setValueAtTime(
                                                e,
                                                t.ctx.currentTime
                                            ),
                                                (a._playStart =
                                                    t.ctx.currentTime),
                                                void 0 === v.bufferSource.start
                                                    ? a._loop
                                                        ? v.bufferSource.noteGrainOn(
                                                              0,
                                                              u,
                                                              86400
                                                          )
                                                        : v.bufferSource.noteGrainOn(
                                                              0,
                                                              u,
                                                              h
                                                          )
                                                    : a._loop
                                                    ? v.bufferSource.start(
                                                          0,
                                                          u,
                                                          86400
                                                      )
                                                    : v.bufferSource.start(
                                                          0,
                                                          u,
                                                          h
                                                      ),
                                                c !== 1 / 0 &&
                                                    (i._endTimers[a._id] =
                                                        setTimeout(
                                                            i._ended.bind(i, a),
                                                            c
                                                        )),
                                                n ||
                                                    setTimeout(function () {
                                                        i._emit("play", a._id),
                                                            i._loadQueue()
                                                    }, 0)
                                        }
                                        "running" === t.state &&
                                        "interrupted" !== t.ctx.state
                                            ? g()
                                            : ((i._playLock = !0),
                                              i.once("resume", g),
                                              i._clearTimer(a._id))
                                    } else {
                                        var y = function () {
                                            ;(v.currentTime = u),
                                                (v.muted =
                                                    a._muted ||
                                                    i._muted ||
                                                    t._muted ||
                                                    v.muted),
                                                (v.volume =
                                                    a._volume * t.volume()),
                                                (v.playbackRate = a._rate)
                                            try {
                                                var r = v.play()
                                                if (
                                                    (r &&
                                                    "undefined" !=
                                                        typeof Promise &&
                                                    (r instanceof Promise ||
                                                        "function" ==
                                                            typeof r.then)
                                                        ? ((i._playLock = !0),
                                                          p(),
                                                          r
                                                              .then(
                                                                  function () {
                                                                      ;(i._playLock =
                                                                          !1),
                                                                          (v._unlocked =
                                                                              !0),
                                                                          n
                                                                              ? i._loadQueue()
                                                                              : i._emit(
                                                                                    "play",
                                                                                    a._id
                                                                                )
                                                                  }
                                                              )
                                                              .catch(
                                                                  function () {
                                                                      ;(i._playLock =
                                                                          !1),
                                                                          i._emit(
                                                                              "playerror",
                                                                              a._id,
                                                                              "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."
                                                                          ),
                                                                          (a._ended =
                                                                              !0),
                                                                          (a._paused =
                                                                              !0)
                                                                  }
                                                              ))
                                                        : n ||
                                                          ((i._playLock = !1),
                                                          p(),
                                                          i._emit(
                                                              "play",
                                                              a._id
                                                          )),
                                                    (v.playbackRate = a._rate),
                                                    v.paused)
                                                )
                                                    return void i._emit(
                                                        "playerror",
                                                        a._id,
                                                        "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."
                                                    )
                                                "__default" !== e || a._loop
                                                    ? (i._endTimers[a._id] =
                                                          setTimeout(
                                                              i._ended.bind(
                                                                  i,
                                                                  a
                                                              ),
                                                              c
                                                          ))
                                                    : ((i._endTimers[a._id] =
                                                          function () {
                                                              i._ended(a),
                                                                  v.removeEventListener(
                                                                      "ended",
                                                                      i
                                                                          ._endTimers[
                                                                          a._id
                                                                      ],
                                                                      !1
                                                                  )
                                                          }),
                                                      v.addEventListener(
                                                          "ended",
                                                          i._endTimers[a._id],
                                                          !1
                                                      ))
                                            } catch (e) {
                                                i._emit("playerror", a._id, e)
                                            }
                                        }
                                        "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA" ===
                                            v.src &&
                                            ((v.src = i._src), v.load())
                                        var _ =
                                            (window && window.ejecta) ||
                                            (!v.readyState &&
                                                t._navigator.isCocoonJS)
                                        v.readyState >= 3 || _
                                            ? y()
                                            : ((i._playLock = !0),
                                              (i._state = "loading"),
                                              v.addEventListener(
                                                  t._canPlayEvent,
                                                  function e() {
                                                      ;(i._state = "loaded"),
                                                          y(),
                                                          v.removeEventListener(
                                                              t._canPlayEvent,
                                                              e,
                                                              !1
                                                          )
                                                  },
                                                  !1
                                              ),
                                              i._clearTimer(a._id))
                                    }
                                    return a._id
                                }
                                i._ended(a)
                            },
                            pause: function (e) {
                                var t = this
                                if ("loaded" !== t._state || t._playLock)
                                    return (
                                        t._queue.push({
                                            event: "pause",
                                            action: function () {
                                                t.pause(e)
                                            },
                                        }),
                                        t
                                    )
                                for (
                                    var n = t._getSoundIds(e), i = 0;
                                    i < n.length;
                                    i++
                                ) {
                                    t._clearTimer(n[i])
                                    var r = t._soundById(n[i])
                                    if (
                                        r &&
                                        !r._paused &&
                                        ((r._seek = t.seek(n[i])),
                                        (r._rateSeek = 0),
                                        (r._paused = !0),
                                        t._stopFade(n[i]),
                                        r._node)
                                    )
                                        if (t._webAudio) {
                                            if (!r._node.bufferSource) continue
                                            void 0 === r._node.bufferSource.stop
                                                ? r._node.bufferSource.noteOff(
                                                      0
                                                  )
                                                : r._node.bufferSource.stop(0),
                                                t._cleanBuffer(r._node)
                                        } else
                                            (isNaN(r._node.duration) &&
                                                r._node.duration !== 1 / 0) ||
                                                r._node.pause()
                                    arguments[1] ||
                                        t._emit("pause", r ? r._id : null)
                                }
                                return t
                            },
                            stop: function (e, t) {
                                var n = this
                                if ("loaded" !== n._state || n._playLock)
                                    return (
                                        n._queue.push({
                                            event: "stop",
                                            action: function () {
                                                n.stop(e)
                                            },
                                        }),
                                        n
                                    )
                                for (
                                    var i = n._getSoundIds(e), r = 0;
                                    r < i.length;
                                    r++
                                ) {
                                    n._clearTimer(i[r])
                                    var o = n._soundById(i[r])
                                    o &&
                                        ((o._seek = o._start || 0),
                                        (o._rateSeek = 0),
                                        (o._paused = !0),
                                        (o._ended = !0),
                                        n._stopFade(i[r]),
                                        o._node &&
                                            (n._webAudio
                                                ? o._node.bufferSource &&
                                                  (void 0 ===
                                                  o._node.bufferSource.stop
                                                      ? o._node.bufferSource.noteOff(
                                                            0
                                                        )
                                                      : o._node.bufferSource.stop(
                                                            0
                                                        ),
                                                  n._cleanBuffer(o._node))
                                                : (isNaN(o._node.duration) &&
                                                      o._node.duration !==
                                                          1 / 0) ||
                                                  ((o._node.currentTime =
                                                      o._start || 0),
                                                  o._node.pause(),
                                                  o._node.duration === 1 / 0 &&
                                                      n._clearSound(o._node))),
                                        t || n._emit("stop", o._id))
                                }
                                return n
                            },
                            mute: function (e, n) {
                                var i = this
                                if ("loaded" !== i._state || i._playLock)
                                    return (
                                        i._queue.push({
                                            event: "mute",
                                            action: function () {
                                                i.mute(e, n)
                                            },
                                        }),
                                        i
                                    )
                                if (void 0 === n) {
                                    if ("boolean" != typeof e) return i._muted
                                    i._muted = e
                                }
                                for (
                                    var r = i._getSoundIds(n), o = 0;
                                    o < r.length;
                                    o++
                                ) {
                                    var s = i._soundById(r[o])
                                    s &&
                                        ((s._muted = e),
                                        s._interval && i._stopFade(s._id),
                                        i._webAudio && s._node
                                            ? s._node.gain.setValueAtTime(
                                                  e ? 0 : s._volume,
                                                  t.ctx.currentTime
                                              )
                                            : s._node &&
                                              (s._node.muted = !!t._muted || e),
                                        i._emit("mute", s._id))
                                }
                                return i
                            },
                            volume: function () {
                                var e,
                                    n,
                                    i,
                                    r = this,
                                    o = arguments
                                if (0 === o.length) return r._volume
                                if (
                                    1 === o.length ||
                                    (2 === o.length && void 0 === o[1])
                                ) {
                                    var s = r._getSoundIds(),
                                        a = s.indexOf(o[0])
                                    a >= 0
                                        ? (n = parseInt(o[0], 10))
                                        : (e = parseFloat(o[0]))
                                } else
                                    o.length >= 2 &&
                                        ((e = parseFloat(o[0])),
                                        (n = parseInt(o[1], 10)))
                                if (!(void 0 !== e && e >= 0 && e <= 1))
                                    return (i = n
                                        ? r._soundById(n)
                                        : r._sounds[0])
                                        ? i._volume
                                        : 0
                                if ("loaded" !== r._state || r._playLock)
                                    return (
                                        r._queue.push({
                                            event: "volume",
                                            action: function () {
                                                r.volume.apply(r, o)
                                            },
                                        }),
                                        r
                                    )
                                void 0 === n && (r._volume = e),
                                    (n = r._getSoundIds(n))
                                for (var l = 0; l < n.length; l++)
                                    (i = r._soundById(n[l])) &&
                                        ((i._volume = e),
                                        o[2] || r._stopFade(n[l]),
                                        r._webAudio && i._node && !i._muted
                                            ? i._node.gain.setValueAtTime(
                                                  e,
                                                  t.ctx.currentTime
                                              )
                                            : i._node &&
                                              !i._muted &&
                                              (i._node.volume = e * t.volume()),
                                        r._emit("volume", i._id))
                                return r
                            },
                            fade: function (e, n, i, r) {
                                var o = this
                                if ("loaded" !== o._state || o._playLock)
                                    return (
                                        o._queue.push({
                                            event: "fade",
                                            action: function () {
                                                o.fade(e, n, i, r)
                                            },
                                        }),
                                        o
                                    )
                                ;(e = Math.min(Math.max(0, parseFloat(e)), 1)),
                                    (n = Math.min(
                                        Math.max(0, parseFloat(n)),
                                        1
                                    )),
                                    (i = parseFloat(i)),
                                    o.volume(e, r)
                                for (
                                    var s = o._getSoundIds(r), a = 0;
                                    a < s.length;
                                    a++
                                ) {
                                    var l = o._soundById(s[a])
                                    if (l) {
                                        if (
                                            (r || o._stopFade(s[a]),
                                            o._webAudio && !l._muted)
                                        ) {
                                            var u = t.ctx.currentTime,
                                                h = u + i / 1e3
                                            ;(l._volume = e),
                                                l._node.gain.setValueAtTime(
                                                    e,
                                                    u
                                                ),
                                                l._node.gain.linearRampToValueAtTime(
                                                    n,
                                                    h
                                                )
                                        }
                                        o._startFadeInterval(
                                            l,
                                            e,
                                            n,
                                            i,
                                            s[a],
                                            void 0 === r
                                        )
                                    }
                                }
                                return o
                            },
                            _startFadeInterval: function (e, t, n, i, r, o) {
                                var s = this,
                                    a = t,
                                    l = n - t,
                                    u = Math.abs(l / 0.01),
                                    h = Math.max(4, u > 0 ? i / u : i),
                                    c = Date.now()
                                ;(e._fadeTo = n),
                                    (e._interval = setInterval(function () {
                                        var r = (Date.now() - c) / i
                                        ;(c = Date.now()),
                                            (a += l * r),
                                            (a = Math.round(100 * a) / 100),
                                            (a =
                                                l < 0
                                                    ? Math.max(n, a)
                                                    : Math.min(n, a)),
                                            s._webAudio
                                                ? (e._volume = a)
                                                : s.volume(a, e._id, !0),
                                            o && (s._volume = a),
                                            ((n < t && a <= n) ||
                                                (n > t && a >= n)) &&
                                                (clearInterval(e._interval),
                                                (e._interval = null),
                                                (e._fadeTo = null),
                                                s.volume(n, e._id),
                                                s._emit("fade", e._id))
                                    }, h))
                            },
                            _stopFade: function (e) {
                                var n = this,
                                    i = n._soundById(e)
                                return (
                                    i &&
                                        i._interval &&
                                        (n._webAudio &&
                                            i._node.gain.cancelScheduledValues(
                                                t.ctx.currentTime
                                            ),
                                        clearInterval(i._interval),
                                        (i._interval = null),
                                        n.volume(i._fadeTo, e),
                                        (i._fadeTo = null),
                                        n._emit("fade", e)),
                                    n
                                )
                            },
                            loop: function () {
                                var e,
                                    t,
                                    n,
                                    i = this,
                                    r = arguments
                                if (0 === r.length) return i._loop
                                if (1 === r.length) {
                                    if ("boolean" != typeof r[0])
                                        return (
                                            !!(n = i._soundById(
                                                parseInt(r[0], 10)
                                            )) && n._loop
                                        )
                                    ;(e = r[0]), (i._loop = e)
                                } else
                                    2 === r.length &&
                                        ((e = r[0]), (t = parseInt(r[1], 10)))
                                for (
                                    var o = i._getSoundIds(t), s = 0;
                                    s < o.length;
                                    s++
                                )
                                    (n = i._soundById(o[s])) &&
                                        ((n._loop = e),
                                        i._webAudio &&
                                            n._node &&
                                            n._node.bufferSource &&
                                            ((n._node.bufferSource.loop = e),
                                            e &&
                                                ((n._node.bufferSource.loopStart =
                                                    n._start || 0),
                                                (n._node.bufferSource.loopEnd =
                                                    n._stop),
                                                i.playing(o[s]) &&
                                                    (i.pause(o[s], !0),
                                                    i.play(o[s], !0)))))
                                return i
                            },
                            rate: function () {
                                var e,
                                    n,
                                    i,
                                    r = this,
                                    o = arguments
                                if (0 === o.length) n = r._sounds[0]._id
                                else if (1 === o.length) {
                                    var s = r._getSoundIds(),
                                        a = s.indexOf(o[0])
                                    a >= 0
                                        ? (n = parseInt(o[0], 10))
                                        : (e = parseFloat(o[0]))
                                } else
                                    2 === o.length &&
                                        ((e = parseFloat(o[0])),
                                        (n = parseInt(o[1], 10)))
                                if ("number" != typeof e)
                                    return (i = r._soundById(n))
                                        ? i._rate
                                        : r._rate
                                if ("loaded" !== r._state || r._playLock)
                                    return (
                                        r._queue.push({
                                            event: "rate",
                                            action: function () {
                                                r.rate.apply(r, o)
                                            },
                                        }),
                                        r
                                    )
                                void 0 === n && (r._rate = e),
                                    (n = r._getSoundIds(n))
                                for (var l = 0; l < n.length; l++)
                                    if ((i = r._soundById(n[l]))) {
                                        r.playing(n[l]) &&
                                            ((i._rateSeek = r.seek(n[l])),
                                            (i._playStart = r._webAudio
                                                ? t.ctx.currentTime
                                                : i._playStart)),
                                            (i._rate = e),
                                            r._webAudio &&
                                            i._node &&
                                            i._node.bufferSource
                                                ? i._node.bufferSource.playbackRate.setValueAtTime(
                                                      e,
                                                      t.ctx.currentTime
                                                  )
                                                : i._node &&
                                                  (i._node.playbackRate = e)
                                        var u = r.seek(n[l]),
                                            h =
                                                (r._sprite[i._sprite][0] +
                                                    r._sprite[i._sprite][1]) /
                                                    1e3 -
                                                u,
                                            c = (1e3 * h) / Math.abs(i._rate)
                                        ;(!r._endTimers[n[l]] && i._paused) ||
                                            (r._clearTimer(n[l]),
                                            (r._endTimers[n[l]] = setTimeout(
                                                r._ended.bind(r, i),
                                                c
                                            ))),
                                            r._emit("rate", i._id)
                                    }
                                return r
                            },
                            seek: function () {
                                var e,
                                    n,
                                    i = this,
                                    r = arguments
                                if (0 === r.length)
                                    i._sounds.length && (n = i._sounds[0]._id)
                                else if (1 === r.length) {
                                    var o = i._getSoundIds(),
                                        s = o.indexOf(r[0])
                                    s >= 0
                                        ? (n = parseInt(r[0], 10))
                                        : i._sounds.length &&
                                          ((n = i._sounds[0]._id),
                                          (e = parseFloat(r[0])))
                                } else
                                    2 === r.length &&
                                        ((e = parseFloat(r[0])),
                                        (n = parseInt(r[1], 10)))
                                if (void 0 === n) return 0
                                if (
                                    "number" == typeof e &&
                                    ("loaded" !== i._state || i._playLock)
                                )
                                    return (
                                        i._queue.push({
                                            event: "seek",
                                            action: function () {
                                                i.seek.apply(i, r)
                                            },
                                        }),
                                        i
                                    )
                                var a = i._soundById(n)
                                if (a) {
                                    if (!("number" == typeof e && e >= 0)) {
                                        if (i._webAudio) {
                                            var l = i.playing(n)
                                                    ? t.ctx.currentTime -
                                                      a._playStart
                                                    : 0,
                                                u = a._rateSeek
                                                    ? a._rateSeek - a._seek
                                                    : 0
                                            return (
                                                a._seek +
                                                (u + l * Math.abs(a._rate))
                                            )
                                        }
                                        return a._node.currentTime
                                    }
                                    var h = i.playing(n)
                                    h && i.pause(n, !0),
                                        (a._seek = e),
                                        (a._ended = !1),
                                        i._clearTimer(n),
                                        i._webAudio ||
                                            !a._node ||
                                            isNaN(a._node.duration) ||
                                            (a._node.currentTime = e)
                                    var c = function () {
                                        h && i.play(n, !0), i._emit("seek", n)
                                    }
                                    if (h && !i._webAudio) {
                                        var d = function e() {
                                            i._playLock ? setTimeout(e, 0) : c()
                                        }
                                        setTimeout(d, 0)
                                    } else c()
                                }
                                return i
                            },
                            playing: function (e) {
                                var t = this
                                if ("number" == typeof e) {
                                    var n = t._soundById(e)
                                    return !!n && !n._paused
                                }
                                for (var i = 0; i < t._sounds.length; i++)
                                    if (!t._sounds[i]._paused) return !0
                                return !1
                            },
                            duration: function (e) {
                                var t = this,
                                    n = t._duration,
                                    i = t._soundById(e)
                                return (
                                    i && (n = t._sprite[i._sprite][1] / 1e3), n
                                )
                            },
                            state: function () {
                                return this._state
                            },
                            unload: function () {
                                for (
                                    var e = this, n = e._sounds, i = 0;
                                    i < n.length;
                                    i++
                                )
                                    n[i]._paused || e.stop(n[i]._id),
                                        e._webAudio ||
                                            (e._clearSound(n[i]._node),
                                            n[i]._node.removeEventListener(
                                                "error",
                                                n[i]._errorFn,
                                                !1
                                            ),
                                            n[i]._node.removeEventListener(
                                                t._canPlayEvent,
                                                n[i]._loadFn,
                                                !1
                                            ),
                                            n[i]._node.removeEventListener(
                                                "ended",
                                                n[i]._endFn,
                                                !1
                                            ),
                                            t._releaseHtml5Audio(n[i]._node)),
                                        delete n[i]._node,
                                        e._clearTimer(n[i]._id)
                                var o = t._howls.indexOf(e)
                                o >= 0 && t._howls.splice(o, 1)
                                var s = !0
                                for (i = 0; i < t._howls.length; i++)
                                    if (
                                        t._howls[i]._src === e._src ||
                                        e._src.indexOf(t._howls[i]._src) >= 0
                                    ) {
                                        s = !1
                                        break
                                    }
                                return (
                                    r && s && delete r[e._src],
                                    (t.noAudio = !1),
                                    (e._state = "unloaded"),
                                    (e._sounds = []),
                                    (e = null),
                                    null
                                )
                            },
                            on: function (e, t, n, i) {
                                var r = this["_on" + e]
                                return (
                                    "function" == typeof t &&
                                        r.push(
                                            i
                                                ? { id: n, fn: t, once: i }
                                                : { id: n, fn: t }
                                        ),
                                    this
                                )
                            },
                            off: function (e, t, n) {
                                var i = this,
                                    r = i["_on" + e],
                                    o = 0
                                if (
                                    ("number" == typeof t &&
                                        ((n = t), (t = null)),
                                    t || n)
                                )
                                    for (o = 0; o < r.length; o++) {
                                        var s = n === r[o].id
                                        if ((t === r[o].fn && s) || (!t && s)) {
                                            r.splice(o, 1)
                                            break
                                        }
                                    }
                                else if (e) i["_on" + e] = []
                                else {
                                    var a = Object.keys(i)
                                    for (o = 0; o < a.length; o++)
                                        0 === a[o].indexOf("_on") &&
                                            Array.isArray(i[a[o]]) &&
                                            (i[a[o]] = [])
                                }
                                return i
                            },
                            once: function (e, t, n) {
                                return this.on(e, t, n, 1), this
                            },
                            _emit: function (e, t, n) {
                                for (
                                    var i = this,
                                        r = i["_on" + e],
                                        o = r.length - 1;
                                    o >= 0;
                                    o--
                                )
                                    (r[o].id &&
                                        r[o].id !== t &&
                                        "load" !== e) ||
                                        (setTimeout(
                                            function (e) {
                                                e.call(this, t, n)
                                            }.bind(i, r[o].fn),
                                            0
                                        ),
                                        r[o].once && i.off(e, r[o].fn, r[o].id))
                                return i._loadQueue(e), i
                            },
                            _loadQueue: function (e) {
                                var t = this
                                if (t._queue.length > 0) {
                                    var n = t._queue[0]
                                    n.event === e &&
                                        (t._queue.shift(), t._loadQueue()),
                                        e || n.action()
                                }
                                return t
                            },
                            _ended: function (e) {
                                var n = this,
                                    i = e._sprite
                                if (
                                    !n._webAudio &&
                                    e._node &&
                                    !e._node.paused &&
                                    !e._node.ended &&
                                    e._node.currentTime < e._stop
                                )
                                    return (
                                        setTimeout(n._ended.bind(n, e), 100), n
                                    )
                                var r = !(!e._loop && !n._sprite[i][2])
                                if (
                                    (n._emit("end", e._id),
                                    !n._webAudio &&
                                        r &&
                                        n.stop(e._id, !0).play(e._id),
                                    n._webAudio && r)
                                ) {
                                    n._emit("play", e._id),
                                        (e._seek = e._start || 0),
                                        (e._rateSeek = 0),
                                        (e._playStart = t.ctx.currentTime)
                                    var o =
                                        (1e3 * (e._stop - e._start)) /
                                        Math.abs(e._rate)
                                    n._endTimers[e._id] = setTimeout(
                                        n._ended.bind(n, e),
                                        o
                                    )
                                }
                                return (
                                    n._webAudio &&
                                        !r &&
                                        ((e._paused = !0),
                                        (e._ended = !0),
                                        (e._seek = e._start || 0),
                                        (e._rateSeek = 0),
                                        n._clearTimer(e._id),
                                        n._cleanBuffer(e._node),
                                        t._autoSuspend()),
                                    n._webAudio || r || n.stop(e._id, !0),
                                    n
                                )
                            },
                            _clearTimer: function (e) {
                                var t = this
                                if (t._endTimers[e]) {
                                    if ("function" != typeof t._endTimers[e])
                                        clearTimeout(t._endTimers[e])
                                    else {
                                        var n = t._soundById(e)
                                        n &&
                                            n._node &&
                                            n._node.removeEventListener(
                                                "ended",
                                                t._endTimers[e],
                                                !1
                                            )
                                    }
                                    delete t._endTimers[e]
                                }
                                return t
                            },
                            _soundById: function (e) {
                                for (
                                    var t = this, n = 0;
                                    n < t._sounds.length;
                                    n++
                                )
                                    if (e === t._sounds[n]._id)
                                        return t._sounds[n]
                                return null
                            },
                            _inactiveSound: function () {
                                var e = this
                                e._drain()
                                for (var t = 0; t < e._sounds.length; t++)
                                    if (e._sounds[t]._ended)
                                        return e._sounds[t].reset()
                                return new i(e)
                            },
                            _drain: function () {
                                var e = this,
                                    t = e._pool,
                                    n = 0,
                                    i = 0
                                if (!(e._sounds.length < t)) {
                                    for (i = 0; i < e._sounds.length; i++)
                                        e._sounds[i]._ended && n++
                                    for (
                                        i = e._sounds.length - 1;
                                        i >= 0;
                                        i--
                                    ) {
                                        if (n <= t) return
                                        e._sounds[i]._ended &&
                                            (e._webAudio &&
                                                e._sounds[i]._node &&
                                                e._sounds[i]._node.disconnect(
                                                    0
                                                ),
                                            e._sounds.splice(i, 1),
                                            n--)
                                    }
                                }
                            },
                            _getSoundIds: function (e) {
                                if (void 0 === e) {
                                    for (
                                        var t = [], n = 0;
                                        n < this._sounds.length;
                                        n++
                                    )
                                        t.push(this._sounds[n]._id)
                                    return t
                                }
                                return [e]
                            },
                            _refreshBuffer: function (e) {
                                return (
                                    (e._node.bufferSource =
                                        t.ctx.createBufferSource()),
                                    (e._node.bufferSource.buffer =
                                        r[this._src]),
                                    e._panner
                                        ? e._node.bufferSource.connect(
                                              e._panner
                                          )
                                        : e._node.bufferSource.connect(e._node),
                                    (e._node.bufferSource.loop = e._loop),
                                    e._loop &&
                                        ((e._node.bufferSource.loopStart =
                                            e._start || 0),
                                        (e._node.bufferSource.loopEnd =
                                            e._stop || 0)),
                                    e._node.bufferSource.playbackRate.setValueAtTime(
                                        e._rate,
                                        t.ctx.currentTime
                                    ),
                                    this
                                )
                            },
                            _cleanBuffer: function (e) {
                                var n =
                                    t._navigator &&
                                    t._navigator.vendor.indexOf("Apple") >= 0
                                if (
                                    t._scratchBuffer &&
                                    e.bufferSource &&
                                    ((e.bufferSource.onended = null),
                                    e.bufferSource.disconnect(0),
                                    n)
                                )
                                    try {
                                        e.bufferSource.buffer = t._scratchBuffer
                                    } catch (e) {}
                                return (e.bufferSource = null), this
                            },
                            _clearSound: function (e) {
                                ;/MSIE |Trident\//.test(
                                    t._navigator && t._navigator.userAgent
                                ) ||
                                    (e.src =
                                        "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA")
                            },
                        }
                        var i = function (e) {
                            ;(this._parent = e), this.init()
                        }
                        i.prototype = {
                            init: function () {
                                var e = this,
                                    n = e._parent
                                return (
                                    (e._muted = n._muted),
                                    (e._loop = n._loop),
                                    (e._volume = n._volume),
                                    (e._rate = n._rate),
                                    (e._seek = 0),
                                    (e._paused = !0),
                                    (e._ended = !0),
                                    (e._sprite = "__default"),
                                    (e._id = ++t._counter),
                                    n._sounds.push(e),
                                    e.create(),
                                    e
                                )
                            },
                            create: function () {
                                var e = this,
                                    n = e._parent,
                                    i =
                                        t._muted || e._muted || e._parent._muted
                                            ? 0
                                            : e._volume
                                return (
                                    n._webAudio
                                        ? ((e._node =
                                              void 0 === t.ctx.createGain
                                                  ? t.ctx.createGainNode()
                                                  : t.ctx.createGain()),
                                          e._node.gain.setValueAtTime(
                                              i,
                                              t.ctx.currentTime
                                          ),
                                          (e._node.paused = !0),
                                          e._node.connect(t.masterGain))
                                        : t.noAudio ||
                                          ((e._node = t._obtainHtml5Audio()),
                                          (e._errorFn =
                                              e._errorListener.bind(e)),
                                          e._node.addEventListener(
                                              "error",
                                              e._errorFn,
                                              !1
                                          ),
                                          (e._loadFn = e._loadListener.bind(e)),
                                          e._node.addEventListener(
                                              t._canPlayEvent,
                                              e._loadFn,
                                              !1
                                          ),
                                          (e._endFn = e._endListener.bind(e)),
                                          e._node.addEventListener(
                                              "ended",
                                              e._endFn,
                                              !1
                                          ),
                                          (e._node.src = n._src),
                                          (e._node.preload =
                                              !0 === n._preload
                                                  ? "auto"
                                                  : n._preload),
                                          (e._node.volume = i * t.volume()),
                                          e._node.load()),
                                    e
                                )
                            },
                            reset: function () {
                                var e = this,
                                    n = e._parent
                                return (
                                    (e._muted = n._muted),
                                    (e._loop = n._loop),
                                    (e._volume = n._volume),
                                    (e._rate = n._rate),
                                    (e._seek = 0),
                                    (e._rateSeek = 0),
                                    (e._paused = !0),
                                    (e._ended = !0),
                                    (e._sprite = "__default"),
                                    (e._id = ++t._counter),
                                    e
                                )
                            },
                            _errorListener: function () {
                                var e = this
                                e._parent._emit(
                                    "loaderror",
                                    e._id,
                                    e._node.error ? e._node.error.code : 0
                                ),
                                    e._node.removeEventListener(
                                        "error",
                                        e._errorFn,
                                        !1
                                    )
                            },
                            _loadListener: function () {
                                var e = this,
                                    n = e._parent
                                ;(n._duration =
                                    Math.ceil(10 * e._node.duration) / 10),
                                    0 === Object.keys(n._sprite).length &&
                                        (n._sprite = {
                                            __default: [0, 1e3 * n._duration],
                                        }),
                                    "loaded" !== n._state &&
                                        ((n._state = "loaded"),
                                        n._emit("load"),
                                        n._loadQueue()),
                                    e._node.removeEventListener(
                                        t._canPlayEvent,
                                        e._loadFn,
                                        !1
                                    )
                            },
                            _endListener: function () {
                                var e = this,
                                    t = e._parent
                                t._duration === 1 / 0 &&
                                    ((t._duration =
                                        Math.ceil(10 * e._node.duration) / 10),
                                    t._sprite.__default[1] === 1 / 0 &&
                                        (t._sprite.__default[1] =
                                            1e3 * t._duration),
                                    t._ended(e)),
                                    e._node.removeEventListener(
                                        "ended",
                                        e._endFn,
                                        !1
                                    )
                            },
                        }
                        var r = {},
                            o = function (e) {
                                var t = e._src
                                if (r[t])
                                    return (
                                        (e._duration = r[t].duration), void l(e)
                                    )
                                if (/^data:[^;]+;base64,/.test(t)) {
                                    for (
                                        var n = atob(t.split(",")[1]),
                                            i = new Uint8Array(n.length),
                                            o = 0;
                                        o < n.length;
                                        ++o
                                    )
                                        i[o] = n.charCodeAt(o)
                                    a(i.buffer, e)
                                } else {
                                    var u = new XMLHttpRequest()
                                    u.open(e._xhr.method, t, !0),
                                        (u.withCredentials =
                                            e._xhr.withCredentials),
                                        (u.responseType = "arraybuffer"),
                                        e._xhr.headers &&
                                            Object.keys(e._xhr.headers).forEach(
                                                function (t) {
                                                    u.setRequestHeader(
                                                        t,
                                                        e._xhr.headers[t]
                                                    )
                                                }
                                            ),
                                        (u.onload = function () {
                                            var t = (u.status + "")[0]
                                            "0" === t || "2" === t || "3" === t
                                                ? a(u.response, e)
                                                : e._emit(
                                                      "loaderror",
                                                      null,
                                                      "Failed loading audio file with status: " +
                                                          u.status +
                                                          "."
                                                  )
                                        }),
                                        (u.onerror = function () {
                                            e._webAudio &&
                                                ((e._html5 = !0),
                                                (e._webAudio = !1),
                                                (e._sounds = []),
                                                delete r[t],
                                                e.load())
                                        }),
                                        s(u)
                                }
                            },
                            s = function (e) {
                                try {
                                    e.send()
                                } catch (t) {
                                    e.onerror()
                                }
                            },
                            a = function (e, n) {
                                var i = function () {
                                        n._emit(
                                            "loaderror",
                                            null,
                                            "Decoding audio data failed."
                                        )
                                    },
                                    o = function (e) {
                                        e && n._sounds.length > 0
                                            ? ((r[n._src] = e), l(n, e))
                                            : i()
                                    }
                                "undefined" != typeof Promise &&
                                1 === t.ctx.decodeAudioData.length
                                    ? t.ctx.decodeAudioData(e).then(o).catch(i)
                                    : t.ctx.decodeAudioData(e, o, i)
                            },
                            l = function (e, t) {
                                t && !e._duration && (e._duration = t.duration),
                                    0 === Object.keys(e._sprite).length &&
                                        (e._sprite = {
                                            __default: [0, 1e3 * e._duration],
                                        }),
                                    "loaded" !== e._state &&
                                        ((e._state = "loaded"),
                                        e._emit("load"),
                                        e._loadQueue())
                            },
                            u = function () {
                                if (t.usingWebAudio) {
                                    try {
                                        "undefined" != typeof AudioContext
                                            ? (t.ctx = new AudioContext())
                                            : "undefined" !=
                                              typeof webkitAudioContext
                                            ? (t.ctx = new webkitAudioContext())
                                            : (t.usingWebAudio = !1)
                                    } catch (e) {
                                        t.usingWebAudio = !1
                                    }
                                    t.ctx || (t.usingWebAudio = !1)
                                    var e = /iP(hone|od|ad)/.test(
                                            t._navigator &&
                                                t._navigator.platform
                                        ),
                                        n =
                                            t._navigator &&
                                            t._navigator.appVersion.match(
                                                /OS (\d+)_(\d+)_?(\d+)?/
                                            ),
                                        i = n ? parseInt(n[1], 10) : null
                                    if (e && i && i < 9) {
                                        var r = /safari/.test(
                                            t._navigator &&
                                                t._navigator.userAgent.toLowerCase()
                                        )
                                        t._navigator &&
                                            !r &&
                                            (t.usingWebAudio = !1)
                                    }
                                    t.usingWebAudio &&
                                        ((t.masterGain =
                                            void 0 === t.ctx.createGain
                                                ? t.ctx.createGainNode()
                                                : t.ctx.createGain()),
                                        t.masterGain.gain.setValueAtTime(
                                            t._muted ? 0 : t._volume,
                                            t.ctx.currentTime
                                        ),
                                        t.masterGain.connect(
                                            t.ctx.destination
                                        )),
                                        t._setup()
                                }
                            }
                        ;(exports.Howler = t),
                            (exports.Howl = n),
                            void 0 !== commonjsGlobal
                                ? ((commonjsGlobal.HowlerGlobal = e),
                                  (commonjsGlobal.Howler = t),
                                  (commonjsGlobal.Howl = n),
                                  (commonjsGlobal.Sound = i))
                                : "undefined" != typeof window &&
                                  ((window.HowlerGlobal = e),
                                  (window.Howler = t),
                                  (window.Howl = n),
                                  (window.Sound = i))
                    })(),
                    (function () {
                        var e
                        ;(HowlerGlobal.prototype._pos = [0, 0, 0]),
                            (HowlerGlobal.prototype._orientation = [
                                0, 0, -1, 0, 1, 0,
                            ]),
                            (HowlerGlobal.prototype.stereo = function (e) {
                                var t = this
                                if (!t.ctx || !t.ctx.listener) return t
                                for (var n = t._howls.length - 1; n >= 0; n--)
                                    t._howls[n].stereo(e)
                                return t
                            }),
                            (HowlerGlobal.prototype.pos = function (e, t, n) {
                                var i = this
                                return i.ctx && i.ctx.listener
                                    ? ((t =
                                          "number" != typeof t ? i._pos[1] : t),
                                      (n =
                                          "number" != typeof n ? i._pos[2] : n),
                                      "number" != typeof e
                                          ? i._pos
                                          : ((i._pos = [e, t, n]),
                                            void 0 !== i.ctx.listener.positionX
                                                ? (i.ctx.listener.positionX.setTargetAtTime(
                                                      i._pos[0],
                                                      Howler.ctx.currentTime,
                                                      0.1
                                                  ),
                                                  i.ctx.listener.positionY.setTargetAtTime(
                                                      i._pos[1],
                                                      Howler.ctx.currentTime,
                                                      0.1
                                                  ),
                                                  i.ctx.listener.positionZ.setTargetAtTime(
                                                      i._pos[2],
                                                      Howler.ctx.currentTime,
                                                      0.1
                                                  ))
                                                : i.ctx.listener.setPosition(
                                                      i._pos[0],
                                                      i._pos[1],
                                                      i._pos[2]
                                                  ),
                                            i))
                                    : i
                            }),
                            (HowlerGlobal.prototype.orientation = function (
                                e,
                                t,
                                n,
                                i,
                                r,
                                o
                            ) {
                                var s = this
                                if (!s.ctx || !s.ctx.listener) return s
                                var a = s._orientation
                                return (
                                    (t = "number" != typeof t ? a[1] : t),
                                    (n = "number" != typeof n ? a[2] : n),
                                    (i = "number" != typeof i ? a[3] : i),
                                    (r = "number" != typeof r ? a[4] : r),
                                    (o = "number" != typeof o ? a[5] : o),
                                    "number" != typeof e
                                        ? a
                                        : ((s._orientation = [
                                              e,
                                              t,
                                              n,
                                              i,
                                              r,
                                              o,
                                          ]),
                                          void 0 !== s.ctx.listener.forwardX
                                              ? (s.ctx.listener.forwardX.setTargetAtTime(
                                                    e,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ),
                                                s.ctx.listener.forwardY.setTargetAtTime(
                                                    t,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ),
                                                s.ctx.listener.forwardZ.setTargetAtTime(
                                                    n,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ),
                                                s.ctx.listener.upX.setTargetAtTime(
                                                    i,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ),
                                                s.ctx.listener.upY.setTargetAtTime(
                                                    r,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ),
                                                s.ctx.listener.upZ.setTargetAtTime(
                                                    o,
                                                    Howler.ctx.currentTime,
                                                    0.1
                                                ))
                                              : s.ctx.listener.setOrientation(
                                                    e,
                                                    t,
                                                    n,
                                                    i,
                                                    r,
                                                    o
                                                ),
                                          s)
                                )
                            }),
                            (Howl.prototype.init =
                                ((e = Howl.prototype.init),
                                function (t) {
                                    var n = this
                                    return (
                                        (n._orientation = t.orientation || [
                                            1, 0, 0,
                                        ]),
                                        (n._stereo = t.stereo || null),
                                        (n._pos = t.pos || null),
                                        (n._pannerAttr = {
                                            coneInnerAngle:
                                                void 0 !== t.coneInnerAngle
                                                    ? t.coneInnerAngle
                                                    : 360,
                                            coneOuterAngle:
                                                void 0 !== t.coneOuterAngle
                                                    ? t.coneOuterAngle
                                                    : 360,
                                            coneOuterGain:
                                                void 0 !== t.coneOuterGain
                                                    ? t.coneOuterGain
                                                    : 0,
                                            distanceModel:
                                                void 0 !== t.distanceModel
                                                    ? t.distanceModel
                                                    : "inverse",
                                            maxDistance:
                                                void 0 !== t.maxDistance
                                                    ? t.maxDistance
                                                    : 1e4,
                                            panningModel:
                                                void 0 !== t.panningModel
                                                    ? t.panningModel
                                                    : "HRTF",
                                            refDistance:
                                                void 0 !== t.refDistance
                                                    ? t.refDistance
                                                    : 1,
                                            rolloffFactor:
                                                void 0 !== t.rolloffFactor
                                                    ? t.rolloffFactor
                                                    : 1,
                                        }),
                                        (n._onstereo = t.onstereo
                                            ? [{ fn: t.onstereo }]
                                            : []),
                                        (n._onpos = t.onpos
                                            ? [{ fn: t.onpos }]
                                            : []),
                                        (n._onorientation = t.onorientation
                                            ? [{ fn: t.onorientation }]
                                            : []),
                                        e.call(this, t)
                                    )
                                })),
                            (Howl.prototype.stereo = function (e, n) {
                                var i = this
                                if (!i._webAudio) return i
                                if ("loaded" !== i._state)
                                    return (
                                        i._queue.push({
                                            event: "stereo",
                                            action: function () {
                                                i.stereo(e, n)
                                            },
                                        }),
                                        i
                                    )
                                var r =
                                    void 0 === Howler.ctx.createStereoPanner
                                        ? "spatial"
                                        : "stereo"
                                if (void 0 === n) {
                                    if ("number" != typeof e) return i._stereo
                                    ;(i._stereo = e), (i._pos = [e, 0, 0])
                                }
                                for (
                                    var o = i._getSoundIds(n), s = 0;
                                    s < o.length;
                                    s++
                                ) {
                                    var a = i._soundById(o[s])
                                    if (a) {
                                        if ("number" != typeof e)
                                            return a._stereo
                                        ;(a._stereo = e),
                                            (a._pos = [e, 0, 0]),
                                            a._node &&
                                                ((a._pannerAttr.panningModel =
                                                    "equalpower"),
                                                (a._panner && a._panner.pan) ||
                                                    t(a, r),
                                                "spatial" === r
                                                    ? void 0 !==
                                                      a._panner.positionX
                                                        ? (a._panner.positionX.setValueAtTime(
                                                              e,
                                                              Howler.ctx
                                                                  .currentTime
                                                          ),
                                                          a._panner.positionY.setValueAtTime(
                                                              0,
                                                              Howler.ctx
                                                                  .currentTime
                                                          ),
                                                          a._panner.positionZ.setValueAtTime(
                                                              0,
                                                              Howler.ctx
                                                                  .currentTime
                                                          ))
                                                        : a._panner.setPosition(
                                                              e,
                                                              0,
                                                              0
                                                          )
                                                    : a._panner.pan.setValueAtTime(
                                                          e,
                                                          Howler.ctx.currentTime
                                                      )),
                                            i._emit("stereo", a._id)
                                    }
                                }
                                return i
                            }),
                            (Howl.prototype.pos = function (e, n, i, r) {
                                var o = this
                                if (!o._webAudio) return o
                                if ("loaded" !== o._state)
                                    return (
                                        o._queue.push({
                                            event: "pos",
                                            action: function () {
                                                o.pos(e, n, i, r)
                                            },
                                        }),
                                        o
                                    )
                                if (
                                    ((n = "number" != typeof n ? 0 : n),
                                    (i = "number" != typeof i ? -0.5 : i),
                                    void 0 === r)
                                ) {
                                    if ("number" != typeof e) return o._pos
                                    o._pos = [e, n, i]
                                }
                                for (
                                    var s = o._getSoundIds(r), a = 0;
                                    a < s.length;
                                    a++
                                ) {
                                    var l = o._soundById(s[a])
                                    if (l) {
                                        if ("number" != typeof e) return l._pos
                                        ;(l._pos = [e, n, i]),
                                            l._node &&
                                                ((l._panner &&
                                                    !l._panner.pan) ||
                                                    t(l, "spatial"),
                                                void 0 !== l._panner.positionX
                                                    ? (l._panner.positionX.setValueAtTime(
                                                          e,
                                                          Howler.ctx.currentTime
                                                      ),
                                                      l._panner.positionY.setValueAtTime(
                                                          n,
                                                          Howler.ctx.currentTime
                                                      ),
                                                      l._panner.positionZ.setValueAtTime(
                                                          i,
                                                          Howler.ctx.currentTime
                                                      ))
                                                    : l._panner.setPosition(
                                                          e,
                                                          n,
                                                          i
                                                      )),
                                            o._emit("pos", l._id)
                                    }
                                }
                                return o
                            }),
                            (Howl.prototype.orientation = function (
                                e,
                                n,
                                i,
                                r
                            ) {
                                var o = this
                                if (!o._webAudio) return o
                                if ("loaded" !== o._state)
                                    return (
                                        o._queue.push({
                                            event: "orientation",
                                            action: function () {
                                                o.orientation(e, n, i, r)
                                            },
                                        }),
                                        o
                                    )
                                if (
                                    ((n =
                                        "number" != typeof n
                                            ? o._orientation[1]
                                            : n),
                                    (i =
                                        "number" != typeof i
                                            ? o._orientation[2]
                                            : i),
                                    void 0 === r)
                                ) {
                                    if ("number" != typeof e)
                                        return o._orientation
                                    o._orientation = [e, n, i]
                                }
                                for (
                                    var s = o._getSoundIds(r), a = 0;
                                    a < s.length;
                                    a++
                                ) {
                                    var l = o._soundById(s[a])
                                    if (l) {
                                        if ("number" != typeof e)
                                            return l._orientation
                                        ;(l._orientation = [e, n, i]),
                                            l._node &&
                                                (l._panner ||
                                                    (l._pos ||
                                                        (l._pos = o._pos || [
                                                            0, 0, -0.5,
                                                        ]),
                                                    t(l, "spatial")),
                                                void 0 !==
                                                l._panner.orientationX
                                                    ? (l._panner.orientationX.setValueAtTime(
                                                          e,
                                                          Howler.ctx.currentTime
                                                      ),
                                                      l._panner.orientationY.setValueAtTime(
                                                          n,
                                                          Howler.ctx.currentTime
                                                      ),
                                                      l._panner.orientationZ.setValueAtTime(
                                                          i,
                                                          Howler.ctx.currentTime
                                                      ))
                                                    : l._panner.setOrientation(
                                                          e,
                                                          n,
                                                          i
                                                      )),
                                            o._emit("orientation", l._id)
                                    }
                                }
                                return o
                            }),
                            (Howl.prototype.pannerAttr = function () {
                                var e,
                                    n,
                                    i,
                                    r = this,
                                    o = arguments
                                if (!r._webAudio) return r
                                if (0 === o.length) return r._pannerAttr
                                if (1 === o.length) {
                                    if ("object" !== _typeof(o[0]))
                                        return (i = r._soundById(
                                            parseInt(o[0], 10)
                                        ))
                                            ? i._pannerAttr
                                            : r._pannerAttr
                                    ;(e = o[0]),
                                        void 0 === n &&
                                            (e.pannerAttr ||
                                                (e.pannerAttr = {
                                                    coneInnerAngle:
                                                        e.coneInnerAngle,
                                                    coneOuterAngle:
                                                        e.coneOuterAngle,
                                                    coneOuterGain:
                                                        e.coneOuterGain,
                                                    distanceModel:
                                                        e.distanceModel,
                                                    maxDistance: e.maxDistance,
                                                    refDistance: e.refDistance,
                                                    rolloffFactor:
                                                        e.rolloffFactor,
                                                    panningModel:
                                                        e.panningModel,
                                                }),
                                            (r._pannerAttr = {
                                                coneInnerAngle:
                                                    void 0 !==
                                                    e.pannerAttr.coneInnerAngle
                                                        ? e.pannerAttr
                                                              .coneInnerAngle
                                                        : r._coneInnerAngle,
                                                coneOuterAngle:
                                                    void 0 !==
                                                    e.pannerAttr.coneOuterAngle
                                                        ? e.pannerAttr
                                                              .coneOuterAngle
                                                        : r._coneOuterAngle,
                                                coneOuterGain:
                                                    void 0 !==
                                                    e.pannerAttr.coneOuterGain
                                                        ? e.pannerAttr
                                                              .coneOuterGain
                                                        : r._coneOuterGain,
                                                distanceModel:
                                                    void 0 !==
                                                    e.pannerAttr.distanceModel
                                                        ? e.pannerAttr
                                                              .distanceModel
                                                        : r._distanceModel,
                                                maxDistance:
                                                    void 0 !==
                                                    e.pannerAttr.maxDistance
                                                        ? e.pannerAttr
                                                              .maxDistance
                                                        : r._maxDistance,
                                                refDistance:
                                                    void 0 !==
                                                    e.pannerAttr.refDistance
                                                        ? e.pannerAttr
                                                              .refDistance
                                                        : r._refDistance,
                                                rolloffFactor:
                                                    void 0 !==
                                                    e.pannerAttr.rolloffFactor
                                                        ? e.pannerAttr
                                                              .rolloffFactor
                                                        : r._rolloffFactor,
                                                panningModel:
                                                    void 0 !==
                                                    e.pannerAttr.panningModel
                                                        ? e.pannerAttr
                                                              .panningModel
                                                        : r._panningModel,
                                            }))
                                } else
                                    2 === o.length &&
                                        ((e = o[0]), (n = parseInt(o[1], 10)))
                                for (
                                    var s = r._getSoundIds(n), a = 0;
                                    a < s.length;
                                    a++
                                )
                                    if ((i = r._soundById(s[a]))) {
                                        var l = i._pannerAttr
                                        l = {
                                            coneInnerAngle:
                                                void 0 !== e.coneInnerAngle
                                                    ? e.coneInnerAngle
                                                    : l.coneInnerAngle,
                                            coneOuterAngle:
                                                void 0 !== e.coneOuterAngle
                                                    ? e.coneOuterAngle
                                                    : l.coneOuterAngle,
                                            coneOuterGain:
                                                void 0 !== e.coneOuterGain
                                                    ? e.coneOuterGain
                                                    : l.coneOuterGain,
                                            distanceModel:
                                                void 0 !== e.distanceModel
                                                    ? e.distanceModel
                                                    : l.distanceModel,
                                            maxDistance:
                                                void 0 !== e.maxDistance
                                                    ? e.maxDistance
                                                    : l.maxDistance,
                                            refDistance:
                                                void 0 !== e.refDistance
                                                    ? e.refDistance
                                                    : l.refDistance,
                                            rolloffFactor:
                                                void 0 !== e.rolloffFactor
                                                    ? e.rolloffFactor
                                                    : l.rolloffFactor,
                                            panningModel:
                                                void 0 !== e.panningModel
                                                    ? e.panningModel
                                                    : l.panningModel,
                                        }
                                        var u = i._panner
                                        u
                                            ? ((u.coneInnerAngle =
                                                  l.coneInnerAngle),
                                              (u.coneOuterAngle =
                                                  l.coneOuterAngle),
                                              (u.coneOuterGain =
                                                  l.coneOuterGain),
                                              (u.distanceModel =
                                                  l.distanceModel),
                                              (u.maxDistance = l.maxDistance),
                                              (u.refDistance = l.refDistance),
                                              (u.rolloffFactor =
                                                  l.rolloffFactor),
                                              (u.panningModel = l.panningModel))
                                            : (i._pos ||
                                                  (i._pos = r._pos || [
                                                      0, 0, -0.5,
                                                  ]),
                                              t(i, "spatial"))
                                    }
                                return r
                            }),
                            (Sound.prototype.init = (function (e) {
                                return function () {
                                    var t = this,
                                        n = t._parent
                                    ;(t._orientation = n._orientation),
                                        (t._stereo = n._stereo),
                                        (t._pos = n._pos),
                                        (t._pannerAttr = n._pannerAttr),
                                        e.call(this),
                                        t._stereo
                                            ? n.stereo(t._stereo)
                                            : t._pos &&
                                              n.pos(
                                                  t._pos[0],
                                                  t._pos[1],
                                                  t._pos[2],
                                                  t._id
                                              )
                                }
                            })(Sound.prototype.init)),
                            (Sound.prototype.reset = (function (e) {
                                return function () {
                                    var t = this,
                                        n = t._parent
                                    return (
                                        (t._orientation = n._orientation),
                                        (t._stereo = n._stereo),
                                        (t._pos = n._pos),
                                        (t._pannerAttr = n._pannerAttr),
                                        t._stereo
                                            ? n.stereo(t._stereo)
                                            : t._pos
                                            ? n.pos(
                                                  t._pos[0],
                                                  t._pos[1],
                                                  t._pos[2],
                                                  t._id
                                              )
                                            : t._panner &&
                                              (t._panner.disconnect(0),
                                              (t._panner = void 0),
                                              n._refreshBuffer(t)),
                                        e.call(this)
                                    )
                                }
                            })(Sound.prototype.reset))
                        var t = function (e, t) {
                            "spatial" === (t = t || "spatial")
                                ? ((e._panner = Howler.ctx.createPanner()),
                                  (e._panner.coneInnerAngle =
                                      e._pannerAttr.coneInnerAngle),
                                  (e._panner.coneOuterAngle =
                                      e._pannerAttr.coneOuterAngle),
                                  (e._panner.coneOuterGain =
                                      e._pannerAttr.coneOuterGain),
                                  (e._panner.distanceModel =
                                      e._pannerAttr.distanceModel),
                                  (e._panner.maxDistance =
                                      e._pannerAttr.maxDistance),
                                  (e._panner.refDistance =
                                      e._pannerAttr.refDistance),
                                  (e._panner.rolloffFactor =
                                      e._pannerAttr.rolloffFactor),
                                  (e._panner.panningModel =
                                      e._pannerAttr.panningModel),
                                  void 0 !== e._panner.positionX
                                      ? (e._panner.positionX.setValueAtTime(
                                            e._pos[0],
                                            Howler.ctx.currentTime
                                        ),
                                        e._panner.positionY.setValueAtTime(
                                            e._pos[1],
                                            Howler.ctx.currentTime
                                        ),
                                        e._panner.positionZ.setValueAtTime(
                                            e._pos[2],
                                            Howler.ctx.currentTime
                                        ))
                                      : e._panner.setPosition(
                                            e._pos[0],
                                            e._pos[1],
                                            e._pos[2]
                                        ),
                                  void 0 !== e._panner.orientationX
                                      ? (e._panner.orientationX.setValueAtTime(
                                            e._orientation[0],
                                            Howler.ctx.currentTime
                                        ),
                                        e._panner.orientationY.setValueAtTime(
                                            e._orientation[1],
                                            Howler.ctx.currentTime
                                        ),
                                        e._panner.orientationZ.setValueAtTime(
                                            e._orientation[2],
                                            Howler.ctx.currentTime
                                        ))
                                      : e._panner.setOrientation(
                                            e._orientation[0],
                                            e._orientation[1],
                                            e._orientation[2]
                                        ))
                                : ((e._panner =
                                      Howler.ctx.createStereoPanner()),
                                  e._panner.pan.setValueAtTime(
                                      e._stereo,
                                      Howler.ctx.currentTime
                                  )),
                                e._panner.connect(e._node),
                                e._paused ||
                                    e._parent.pause(e._id, !0).play(e._id, !0)
                        }
                    })()
                var ObservableVector2d = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            var e,
                                i =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                        ? arguments[0]
                                        : 0,
                                r =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 0,
                                o = arguments.length > 2 ? arguments[2] : void 0
                            if (
                                (_classCallCheck(this, n),
                                (e = t.call(this, i, r)),
                                void 0 === o)
                            )
                                throw new Error("undefined `onUpdate` callback")
                            return e.setCallback(o.onUpdate, o.scope), e
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                arguments.length > 2
                                                    ? arguments[2]
                                                    : void 0
                                        return (
                                            this.setMuted(e, t),
                                            void 0 !== n &&
                                                this.setCallback(
                                                    n.onUpdate,
                                                    n.scope
                                                ),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "x",
                                    get: function () {
                                        return this._x
                                    },
                                    set: function (e) {
                                        var t = this.onUpdate.call(
                                            this.scope,
                                            e,
                                            this._y,
                                            this._x,
                                            this._y
                                        )
                                        this._x = t && "x" in t ? t.x : e
                                    },
                                },
                                {
                                    key: "y",
                                    get: function () {
                                        return this._y
                                    },
                                    set: function (e) {
                                        var t = this.onUpdate.call(
                                            this.scope,
                                            this._x,
                                            e,
                                            this._x,
                                            this._y
                                        )
                                        this._y = t && "y" in t ? t.y : e
                                    },
                                },
                                {
                                    key: "_set",
                                    value: function (e, t) {
                                        var n = this.onUpdate.call(
                                            this.scope,
                                            e,
                                            t,
                                            this._x,
                                            this._y
                                        )
                                        return (
                                            n && "x" in n && "y" in n
                                                ? ((this._x = n.x),
                                                  (this._y = n.y))
                                                : ((this._x = e),
                                                  (this._y = t)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setMuted",
                                    value: function (e, t) {
                                        return (
                                            (this._x = e), (this._y = t), this
                                        )
                                    },
                                },
                                {
                                    key: "setCallback",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : null
                                        if ("function" != typeof e)
                                            throw new Error(
                                                "invalid `onUpdate` callback"
                                            )
                                        return (
                                            (this.onUpdate = e),
                                            (this.scope = t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        return this._set(
                                            this._x + e.x,
                                            this._y + e.y
                                        )
                                    },
                                },
                                {
                                    key: "sub",
                                    value: function (e) {
                                        return this._set(
                                            this._x - e.x,
                                            this._y - e.y
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        return this._set(
                                            this._x * e,
                                            this._y * (void 0 !== t ? t : e)
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this._set(
                                            this._x * e.x,
                                            this._y * e.y
                                        )
                                    },
                                },
                                {
                                    key: "div",
                                    value: function (e) {
                                        return this._set(
                                            this._x / e,
                                            this._y / e
                                        )
                                    },
                                },
                                {
                                    key: "abs",
                                    value: function () {
                                        return this._set(
                                            this._x < 0 ? -this._x : this._x,
                                            this._y < 0 ? -this._y : this._y
                                        )
                                    },
                                },
                                {
                                    key: "clamp",
                                    value: function (e, t) {
                                        return new n(
                                            _clamp(this.x, e, t),
                                            _clamp(this.y, e, t),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "clampSelf",
                                    value: function (e, t) {
                                        return this._set(
                                            _clamp(this._x, e, t),
                                            _clamp(this._y, e, t)
                                        )
                                    },
                                },
                                {
                                    key: "minV",
                                    value: function (e) {
                                        return this._set(
                                            this._x < e.x ? this._x : e.x,
                                            this._y < e.y ? this._y : e.y
                                        )
                                    },
                                },
                                {
                                    key: "maxV",
                                    value: function (e) {
                                        return this._set(
                                            this._x > e.x ? this._x : e.x,
                                            this._y > e.y ? this._y : e.y
                                        )
                                    },
                                },
                                {
                                    key: "floor",
                                    value: function () {
                                        return new n(
                                            Math.floor(this._x),
                                            Math.floor(this._y),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "floorSelf",
                                    value: function () {
                                        return this._set(
                                            Math.floor(this._x),
                                            Math.floor(this._y)
                                        )
                                    },
                                },
                                {
                                    key: "ceil",
                                    value: function () {
                                        return new n(
                                            Math.ceil(this._x),
                                            Math.ceil(this._y),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "ceilSelf",
                                    value: function () {
                                        return this._set(
                                            Math.ceil(this._x),
                                            Math.ceil(this._y)
                                        )
                                    },
                                },
                                {
                                    key: "negate",
                                    value: function () {
                                        return new n(-this._x, -this._y, {
                                            onUpdate: this.onUpdate,
                                            scope: this.scope,
                                        })
                                    },
                                },
                                {
                                    key: "negateSelf",
                                    value: function () {
                                        return this._set(-this._x, -this._y)
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this._set(e.x, e.y)
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        return (
                                            this._x === e.x && this._y === e.y
                                        )
                                    },
                                },
                                {
                                    key: "perp",
                                    value: function () {
                                        return this._set(this._y, -this._x)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        var n = 0,
                                            i = 0
                                        "object" === _typeof(t) &&
                                            ((n = t.x), (i = t.y))
                                        var r = this._x - n,
                                            o = this._y - i,
                                            s = Math.cos(e),
                                            a = Math.sin(e)
                                        return this._set(
                                            r * s - o * a + n,
                                            r * a + o * s + i
                                        )
                                    },
                                },
                                {
                                    key: "dotProduct",
                                    value: function (e) {
                                        return this._x * e.x + this._y * e.y
                                    },
                                },
                                {
                                    key: "lerp",
                                    value: function (e, t) {
                                        return (
                                            (this._x += (e.x - this._x) * t),
                                            (this._y += (e.y - this._y) * t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "distance",
                                    value: function (e) {
                                        return Math.sqrt(
                                            (this._x - e.x) * (this._x - e.x) +
                                                (this._y - e.y) *
                                                    (this._y - e.y)
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull(
                                            "ObservableVector2d",
                                            this._x,
                                            this._y,
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "toVector2d",
                                    value: function () {
                                        return pool.pull(
                                            "Vector2d",
                                            this._x,
                                            this._y
                                        )
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        return "x:" + this._x + ",y:" + this._y
                                    },
                                },
                            ]),
                            n
                        )
                    })(Vector2d),
                    Vector3d = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 0
                                        return (
                                            (this.x = e),
                                            (this.y = t),
                                            (this.z = n),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "_set",
                                    value: function (e, t) {
                                        var n =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2]
                                                ? arguments[2]
                                                : 0
                                        return (
                                            (this.x = e),
                                            (this.y = t),
                                            (this.z = n),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "set",
                                    value: function (e, t, n) {
                                        if (
                                            e !== +e ||
                                            t !== +t ||
                                            (void 0 !== n && n !== +n)
                                        )
                                            throw new Error(
                                                "invalid x, y, z parameters (not a number)"
                                            )
                                        return this._set(e, t, n)
                                    },
                                },
                                {
                                    key: "setZero",
                                    value: function () {
                                        return this.set(0, 0, 0)
                                    },
                                },
                                {
                                    key: "setV",
                                    value: function (e) {
                                        return this._set(e.x, e.y, e.z)
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        return this._set(
                                            this.x + e.x,
                                            this.y + e.y,
                                            this.z + (e.z || 0)
                                        )
                                    },
                                },
                                {
                                    key: "sub",
                                    value: function (e) {
                                        return this._set(
                                            this.x - e.x,
                                            this.y - e.y,
                                            this.z - (e.z || 0)
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t, n) {
                                        return (
                                            (t = void 0 !== t ? t : e),
                                            this._set(
                                                this.x * e,
                                                this.y * t,
                                                this.z * (n || 1)
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this.scale(e.x, e.y, e.z)
                                    },
                                },
                                {
                                    key: "toIso",
                                    value: function () {
                                        return this._set(
                                            this.x - this.y,
                                            0.5 * (this.x + this.y),
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "to2d",
                                    value: function () {
                                        return this._set(
                                            this.y + this.x / 2,
                                            this.y - this.x / 2,
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "div",
                                    value: function (e) {
                                        return this._set(
                                            this.x / e,
                                            this.y / e,
                                            this.z / e
                                        )
                                    },
                                },
                                {
                                    key: "abs",
                                    value: function () {
                                        return this._set(
                                            this.x < 0 ? -this.x : this.x,
                                            this.y < 0 ? -this.y : this.y,
                                            this.z < 0 ? -this.z : this.z
                                        )
                                    },
                                },
                                {
                                    key: "clamp",
                                    value: function (t, n) {
                                        return new e(
                                            _clamp(this.x, t, n),
                                            _clamp(this.y, t, n),
                                            _clamp(this.z, t, n)
                                        )
                                    },
                                },
                                {
                                    key: "clampSelf",
                                    value: function (e, t) {
                                        return this._set(
                                            _clamp(this.x, e, t),
                                            _clamp(this.y, e, t),
                                            _clamp(this.z, e, t)
                                        )
                                    },
                                },
                                {
                                    key: "minV",
                                    value: function (e) {
                                        var t = e.z || 0
                                        return this._set(
                                            this.x < e.x ? this.x : e.x,
                                            this.y < e.y ? this.y : e.y,
                                            this.z < t ? this.z : t
                                        )
                                    },
                                },
                                {
                                    key: "maxV",
                                    value: function (e) {
                                        var t = e.z || 0
                                        return this._set(
                                            this.x > e.x ? this.x : e.x,
                                            this.y > e.y ? this.y : e.y,
                                            this.z > t ? this.z : t
                                        )
                                    },
                                },
                                {
                                    key: "floor",
                                    value: function () {
                                        return new e(
                                            Math.floor(this.x),
                                            Math.floor(this.y),
                                            Math.floor(this.z)
                                        )
                                    },
                                },
                                {
                                    key: "floorSelf",
                                    value: function () {
                                        return this._set(
                                            Math.floor(this.x),
                                            Math.floor(this.y),
                                            Math.floor(this.z)
                                        )
                                    },
                                },
                                {
                                    key: "ceil",
                                    value: function () {
                                        return new e(
                                            Math.ceil(this.x),
                                            Math.ceil(this.y),
                                            Math.ceil(this.z)
                                        )
                                    },
                                },
                                {
                                    key: "ceilSelf",
                                    value: function () {
                                        return this._set(
                                            Math.ceil(this.x),
                                            Math.ceil(this.y),
                                            Math.ceil(this.z)
                                        )
                                    },
                                },
                                {
                                    key: "negate",
                                    value: function () {
                                        return new e(-this.x, -this.y, -this.z)
                                    },
                                },
                                {
                                    key: "negateSelf",
                                    value: function () {
                                        return this._set(
                                            -this.x,
                                            -this.y,
                                            -this.z
                                        )
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this._set(e.x, e.y, e.z || 0)
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function () {
                                        var e, t, n
                                        return (
                                            arguments.length >= 2
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]),
                                                  (n = arguments[2]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y),
                                                  (n = arguments[0].z)),
                                            void 0 === n && (n = this.z),
                                            this.x === e &&
                                                this.y === t &&
                                                this.z === n
                                        )
                                    },
                                },
                                {
                                    key: "normalize",
                                    value: function () {
                                        return this.div(this.length() || 1)
                                    },
                                },
                                {
                                    key: "perp",
                                    value: function () {
                                        return this._set(
                                            this.y,
                                            -this.x,
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        var n = 0,
                                            i = 0
                                        "object" === _typeof(t) &&
                                            ((n = t.x), (i = t.y))
                                        var r = this.x - n,
                                            o = this.y - i,
                                            s = Math.cos(e),
                                            a = Math.sin(e)
                                        return this._set(
                                            r * s - o * a + n,
                                            r * a + o * s + i,
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "dotProduct",
                                    value: function (e) {
                                        return (
                                            this.x * e.x +
                                            this.y * e.y +
                                            this.z *
                                                (void 0 !== e.z ? e.z : this.z)
                                        )
                                    },
                                },
                                {
                                    key: "length2",
                                    value: function () {
                                        return this.dotProduct(this)
                                    },
                                },
                                {
                                    key: "length",
                                    value: function () {
                                        return Math.sqrt(this.length2())
                                    },
                                },
                                {
                                    key: "lerp",
                                    value: function (e, t) {
                                        return (
                                            (this.x += (e.x - this.x) * t),
                                            (this.y += (e.y - this.y) * t),
                                            (this.z += (e.z - this.z) * t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "distance",
                                    value: function (e) {
                                        var t = this.x - e.x,
                                            n = this.y - e.y,
                                            i = this.z - (e.z || 0)
                                        return Math.sqrt(t * t + n * n + i * i)
                                    },
                                },
                                {
                                    key: "angle",
                                    value: function (e) {
                                        return Math.acos(
                                            _clamp(
                                                this.dotProduct(e) /
                                                    (this.length() *
                                                        e.length()),
                                                -1,
                                                1
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "project",
                                    value: function (e) {
                                        var t = this.dotProduct(e) / e.length2()
                                        return this.scale(t, t, t)
                                    },
                                },
                                {
                                    key: "projectN",
                                    value: function (e) {
                                        var t = this.dotProduct(e) / e.length2()
                                        return this.scale(t, t, t)
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull(
                                            "Vector3d",
                                            this.x,
                                            this.y,
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        return (
                                            "x:" +
                                            this.x +
                                            ",y:" +
                                            this.y +
                                            ",z:" +
                                            this.z
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    ObservableVector3d = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            var e,
                                i =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                        ? arguments[0]
                                        : 0,
                                r =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 0,
                                o =
                                    arguments.length > 2 &&
                                    void 0 !== arguments[2]
                                        ? arguments[2]
                                        : 0,
                                s = arguments.length > 3 ? arguments[3] : void 0
                            if (
                                (_classCallCheck(this, n),
                                (e = t.call(this, i, r, o)),
                                void 0 === s)
                            )
                                throw new Error("undefined `onUpdate` callback")
                            return e.setCallback(s.onUpdate, s.scope), e
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 0,
                                            i =
                                                arguments.length > 3
                                                    ? arguments[3]
                                                    : void 0
                                        return (
                                            this.setMuted(e, t, n),
                                            void 0 !== i &&
                                                this.setCallback(
                                                    i.onUpdate,
                                                    i.scope
                                                ),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "x",
                                    get: function () {
                                        return this._x
                                    },
                                    set: function (e) {
                                        var t = this.onUpdate.call(
                                            this.scope,
                                            e,
                                            this._y,
                                            this._z,
                                            this._x,
                                            this._y,
                                            this._z
                                        )
                                        this._x = t && "x" in t ? t.x : e
                                    },
                                },
                                {
                                    key: "y",
                                    get: function () {
                                        return this._y
                                    },
                                    set: function (e) {
                                        var t = this.onUpdate.call(
                                            this.scope,
                                            this._x,
                                            e,
                                            this._z,
                                            this._x,
                                            this._y,
                                            this._z
                                        )
                                        this._y = t && "y" in t ? t.y : e
                                    },
                                },
                                {
                                    key: "z",
                                    get: function () {
                                        return this._z
                                    },
                                    set: function (e) {
                                        var t = this.onUpdate.call(
                                            this.scope,
                                            this._x,
                                            this._y,
                                            e,
                                            this._x,
                                            this._y,
                                            this._z
                                        )
                                        this._z = t && "z" in t ? t.z : e
                                    },
                                },
                                {
                                    key: "_set",
                                    value: function (e, t, n) {
                                        var i = this.onUpdate.call(
                                            this.scope,
                                            e,
                                            t,
                                            n,
                                            this._x,
                                            this._y,
                                            this._z
                                        )
                                        return (
                                            i &&
                                            "x" in i &&
                                            "y" in i &&
                                            "z" in i
                                                ? ((this._x = i.x),
                                                  (this._y = i.y),
                                                  (this._z = i.z))
                                                : ((this._x = e),
                                                  (this._y = t),
                                                  (this._z = n || 0)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setMuted",
                                    value: function (e, t, n) {
                                        return (
                                            (this._x = e),
                                            (this._y = t),
                                            (this._z = n || 0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setCallback",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : null
                                        if ("function" != typeof e)
                                            throw new Error(
                                                "invalid `onUpdate` callback"
                                            )
                                        return (
                                            (this.onUpdate = e),
                                            (this.scope = t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        return this._set(
                                            this._x + e.x,
                                            this._y + e.y,
                                            this._z + (e.z || 0)
                                        )
                                    },
                                },
                                {
                                    key: "sub",
                                    value: function (e) {
                                        return this._set(
                                            this._x - e.x,
                                            this._y - e.y,
                                            this._z - (e.z || 0)
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t, n) {
                                        return (
                                            (t = void 0 !== t ? t : e),
                                            this._set(
                                                this._x * e,
                                                this._y * t,
                                                this._z * (n || 1)
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this._set(
                                            this._x * e.x,
                                            this._y * e.y,
                                            this._z * (e.z || 1)
                                        )
                                    },
                                },
                                {
                                    key: "div",
                                    value: function (e) {
                                        return this._set(
                                            this._x / e,
                                            this._y / e,
                                            this._z / e
                                        )
                                    },
                                },
                                {
                                    key: "abs",
                                    value: function () {
                                        return this._set(
                                            this._x < 0 ? -this._x : this._x,
                                            this._y < 0 ? -this._y : this._y,
                                            this._Z < 0 ? -this._z : this._z
                                        )
                                    },
                                },
                                {
                                    key: "clamp",
                                    value: function (e, t) {
                                        return new n(
                                            _clamp(this._x, e, t),
                                            _clamp(this._y, e, t),
                                            _clamp(this._z, e, t),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "clampSelf",
                                    value: function (e, t) {
                                        return this._set(
                                            _clamp(this._x, e, t),
                                            _clamp(this._y, e, t),
                                            _clamp(this._z, e, t)
                                        )
                                    },
                                },
                                {
                                    key: "minV",
                                    value: function (e) {
                                        var t = e.z || 0
                                        return this._set(
                                            this._x < e.x ? this._x : e.x,
                                            this._y < e.y ? this._y : e.y,
                                            this._z < t ? this._z : t
                                        )
                                    },
                                },
                                {
                                    key: "maxV",
                                    value: function (e) {
                                        var t = e.z || 0
                                        return this._set(
                                            this._x > e.x ? this._x : e.x,
                                            this._y > e.y ? this._y : e.y,
                                            this._z > t ? this._z : t
                                        )
                                    },
                                },
                                {
                                    key: "floor",
                                    value: function () {
                                        return new n(
                                            Math.floor(this._x),
                                            Math.floor(this._y),
                                            Math.floor(this._z),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "floorSelf",
                                    value: function () {
                                        return this._set(
                                            Math.floor(this._x),
                                            Math.floor(this._y),
                                            Math.floor(this._z)
                                        )
                                    },
                                },
                                {
                                    key: "ceil",
                                    value: function () {
                                        return new n(
                                            Math.ceil(this._x),
                                            Math.ceil(this._y),
                                            Math.ceil(this._z),
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "ceilSelf",
                                    value: function () {
                                        return this._set(
                                            Math.ceil(this._x),
                                            Math.ceil(this._y),
                                            Math.ceil(this._z)
                                        )
                                    },
                                },
                                {
                                    key: "negate",
                                    value: function () {
                                        return new n(
                                            -this._x,
                                            -this._y,
                                            -this._z,
                                            {
                                                onUpdate: this.onUpdate,
                                                scope: this.scope,
                                            }
                                        )
                                    },
                                },
                                {
                                    key: "negateSelf",
                                    value: function () {
                                        return this._set(
                                            -this._x,
                                            -this._y,
                                            -this._z
                                        )
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this._set(e.x, e.y, e.z || 0)
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        return (
                                            this._x === e.x &&
                                            this._y === e.y &&
                                            this._z === (e.z || this._z)
                                        )
                                    },
                                },
                                {
                                    key: "perp",
                                    value: function () {
                                        return this._set(
                                            this._y,
                                            -this._x,
                                            this._z
                                        )
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        var n = 0,
                                            i = 0
                                        "object" === _typeof(t) &&
                                            ((n = t.x), (i = t.y))
                                        var r = this.x - n,
                                            o = this.y - i,
                                            s = Math.cos(e),
                                            a = Math.sin(e)
                                        return this._set(
                                            r * s - o * a + n,
                                            r * a + o * s + i,
                                            this.z
                                        )
                                    },
                                },
                                {
                                    key: "dotProduct",
                                    value: function (e) {
                                        return (
                                            this._x * e.x +
                                            this._y * e.y +
                                            this._z * (e.z || 1)
                                        )
                                    },
                                },
                                {
                                    key: "lerp",
                                    value: function (e, t) {
                                        return (
                                            (this._x += (e.x - this._x) * t),
                                            (this._y += (e.y - this._y) * t),
                                            (this._z += (e.z - this._z) * t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "distance",
                                    value: function (e) {
                                        var t = this._x - e.x,
                                            n = this._y - e.y,
                                            i = this._z - (e.z || 0)
                                        return Math.sqrt(t * t + n * n + i * i)
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return pool.pull(
                                            "ObservableVector3d",
                                            this._x,
                                            this._y,
                                            this._z,
                                            { onUpdate: this.onUpdate }
                                        )
                                    },
                                },
                                {
                                    key: "toVector3d",
                                    value: function () {
                                        return pool.pull(
                                            "Vector3d",
                                            this._x,
                                            this._y,
                                            this._z
                                        )
                                    },
                                },
                                {
                                    key: "toString",
                                    value: function () {
                                        return (
                                            "x:" +
                                            this._x +
                                            ",y:" +
                                            this._y +
                                            ",z:" +
                                            this._z
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Vector3d),
                    earcut$2 = { exports: {} }
                function earcut(e, t, n) {
                    n = n || 2
                    var i,
                        r,
                        o,
                        s,
                        a,
                        l,
                        u,
                        h = t && t.length,
                        c = h ? t[0] * n : e.length,
                        d = linkedList(e, 0, c, n, !0),
                        f = []
                    if (!d || d.next === d.prev) return f
                    if (
                        (h && (d = eliminateHoles(e, t, d, n)),
                        e.length > 80 * n)
                    ) {
                        ;(i = o = e[0]), (r = s = e[1])
                        for (var p = n; p < c; p += n)
                            (a = e[p]) < i && (i = a),
                                (l = e[p + 1]) < r && (r = l),
                                a > o && (o = a),
                                l > s && (s = l)
                        u = 0 !== (u = Math.max(o - i, s - r)) ? 1 / u : 0
                    }
                    return earcutLinked(d, f, n, i, r, u), f
                }
                function linkedList(e, t, n, i, r) {
                    var o, s
                    if (r === signedArea(e, t, n, i) > 0)
                        for (o = t; o < n; o += i)
                            s = insertNode(o, e[o], e[o + 1], s)
                    else
                        for (o = n - i; o >= t; o -= i)
                            s = insertNode(o, e[o], e[o + 1], s)
                    return (
                        s && equals(s, s.next) && (removeNode(s), (s = s.next)),
                        s
                    )
                }
                function filterPoints(e, t) {
                    if (!e) return e
                    t || (t = e)
                    var n,
                        i = e
                    do {
                        if (
                            ((n = !1),
                            i.steiner ||
                                (!equals(i, i.next) &&
                                    0 !== area(i.prev, i, i.next)))
                        )
                            i = i.next
                        else {
                            if ((removeNode(i), (i = t = i.prev) === i.next))
                                break
                            n = !0
                        }
                    } while (n || i !== t)
                    return t
                }
                function earcutLinked(e, t, n, i, r, o, s) {
                    if (e) {
                        !s && o && indexCurve(e, i, r, o)
                        for (var a, l, u = e; e.prev !== e.next; )
                            if (
                                ((a = e.prev),
                                (l = e.next),
                                o ? isEarHashed(e, i, r, o) : isEar(e))
                            )
                                t.push(a.i / n),
                                    t.push(e.i / n),
                                    t.push(l.i / n),
                                    removeNode(e),
                                    (e = l.next),
                                    (u = l.next)
                            else if ((e = l) === u) {
                                s
                                    ? 1 === s
                                        ? earcutLinked(
                                              (e = cureLocalIntersections(
                                                  filterPoints(e),
                                                  t,
                                                  n
                                              )),
                                              t,
                                              n,
                                              i,
                                              r,
                                              o,
                                              2
                                          )
                                        : 2 === s &&
                                          splitEarcut(e, t, n, i, r, o)
                                    : earcutLinked(
                                          filterPoints(e),
                                          t,
                                          n,
                                          i,
                                          r,
                                          o,
                                          1
                                      )
                                break
                            }
                    }
                }
                function isEar(e) {
                    var t = e.prev,
                        n = e,
                        i = e.next
                    if (area(t, n, i) >= 0) return !1
                    for (var r = e.next.next; r !== e.prev; ) {
                        if (
                            pointInTriangle(
                                t.x,
                                t.y,
                                n.x,
                                n.y,
                                i.x,
                                i.y,
                                r.x,
                                r.y
                            ) &&
                            area(r.prev, r, r.next) >= 0
                        )
                            return !1
                        r = r.next
                    }
                    return !0
                }
                function isEarHashed(e, t, n, i) {
                    var r = e.prev,
                        o = e,
                        s = e.next
                    if (area(r, o, s) >= 0) return !1
                    for (
                        var a =
                                r.x < o.x
                                    ? r.x < s.x
                                        ? r.x
                                        : s.x
                                    : o.x < s.x
                                    ? o.x
                                    : s.x,
                            l =
                                r.y < o.y
                                    ? r.y < s.y
                                        ? r.y
                                        : s.y
                                    : o.y < s.y
                                    ? o.y
                                    : s.y,
                            u =
                                r.x > o.x
                                    ? r.x > s.x
                                        ? r.x
                                        : s.x
                                    : o.x > s.x
                                    ? o.x
                                    : s.x,
                            h =
                                r.y > o.y
                                    ? r.y > s.y
                                        ? r.y
                                        : s.y
                                    : o.y > s.y
                                    ? o.y
                                    : s.y,
                            c = zOrder(a, l, t, n, i),
                            d = zOrder(u, h, t, n, i),
                            f = e.prevZ,
                            p = e.nextZ;
                        f && f.z >= c && p && p.z <= d;

                    ) {
                        if (
                            f !== e.prev &&
                            f !== e.next &&
                            pointInTriangle(
                                r.x,
                                r.y,
                                o.x,
                                o.y,
                                s.x,
                                s.y,
                                f.x,
                                f.y
                            ) &&
                            area(f.prev, f, f.next) >= 0
                        )
                            return !1
                        if (
                            ((f = f.prevZ),
                            p !== e.prev &&
                                p !== e.next &&
                                pointInTriangle(
                                    r.x,
                                    r.y,
                                    o.x,
                                    o.y,
                                    s.x,
                                    s.y,
                                    p.x,
                                    p.y
                                ) &&
                                area(p.prev, p, p.next) >= 0)
                        )
                            return !1
                        p = p.nextZ
                    }
                    for (; f && f.z >= c; ) {
                        if (
                            f !== e.prev &&
                            f !== e.next &&
                            pointInTriangle(
                                r.x,
                                r.y,
                                o.x,
                                o.y,
                                s.x,
                                s.y,
                                f.x,
                                f.y
                            ) &&
                            area(f.prev, f, f.next) >= 0
                        )
                            return !1
                        f = f.prevZ
                    }
                    for (; p && p.z <= d; ) {
                        if (
                            p !== e.prev &&
                            p !== e.next &&
                            pointInTriangle(
                                r.x,
                                r.y,
                                o.x,
                                o.y,
                                s.x,
                                s.y,
                                p.x,
                                p.y
                            ) &&
                            area(p.prev, p, p.next) >= 0
                        )
                            return !1
                        p = p.nextZ
                    }
                    return !0
                }
                function cureLocalIntersections(e, t, n) {
                    var i = e
                    do {
                        var r = i.prev,
                            o = i.next.next
                        !equals(r, o) &&
                            intersects(r, i, i.next, o) &&
                            locallyInside(r, o) &&
                            locallyInside(o, r) &&
                            (t.push(r.i / n),
                            t.push(i.i / n),
                            t.push(o.i / n),
                            removeNode(i),
                            removeNode(i.next),
                            (i = e = o)),
                            (i = i.next)
                    } while (i !== e)
                    return filterPoints(i)
                }
                function splitEarcut(e, t, n, i, r, o) {
                    var s = e
                    do {
                        for (var a = s.next.next; a !== s.prev; ) {
                            if (s.i !== a.i && isValidDiagonal(s, a)) {
                                var l = splitPolygon(s, a)
                                return (
                                    (s = filterPoints(s, s.next)),
                                    (l = filterPoints(l, l.next)),
                                    earcutLinked(s, t, n, i, r, o),
                                    void earcutLinked(l, t, n, i, r, o)
                                )
                            }
                            a = a.next
                        }
                        s = s.next
                    } while (s !== e)
                }
                function eliminateHoles(e, t, n, i) {
                    var r,
                        o,
                        s,
                        a = []
                    for (r = 0, o = t.length; r < o; r++)
                        (s = linkedList(
                            e,
                            t[r] * i,
                            r < o - 1 ? t[r + 1] * i : e.length,
                            i,
                            !1
                        )) === s.next && (s.steiner = !0),
                            a.push(getLeftmost(s))
                    for (a.sort(compareX), r = 0; r < a.length; r++)
                        n = filterPoints((n = eliminateHole(a[r], n)), n.next)
                    return n
                }
                function compareX(e, t) {
                    return e.x - t.x
                }
                function eliminateHole(e, t) {
                    var n = findHoleBridge(e, t)
                    if (!n) return t
                    var i = splitPolygon(n, e),
                        r = filterPoints(n, n.next)
                    return filterPoints(i, i.next), t === n ? r : t
                }
                function findHoleBridge(e, t) {
                    var n,
                        i = t,
                        r = e.x,
                        o = e.y,
                        s = -1 / 0
                    do {
                        if (o <= i.y && o >= i.next.y && i.next.y !== i.y) {
                            var a =
                                i.x +
                                ((o - i.y) * (i.next.x - i.x)) /
                                    (i.next.y - i.y)
                            if (a <= r && a > s) {
                                if (((s = a), a === r)) {
                                    if (o === i.y) return i
                                    if (o === i.next.y) return i.next
                                }
                                n = i.x < i.next.x ? i : i.next
                            }
                        }
                        i = i.next
                    } while (i !== t)
                    if (!n) return null
                    if (r === s) return n
                    var l,
                        u = n,
                        h = n.x,
                        c = n.y,
                        d = 1 / 0
                    i = n
                    do {
                        r >= i.x &&
                            i.x >= h &&
                            r !== i.x &&
                            pointInTriangle(
                                o < c ? r : s,
                                o,
                                h,
                                c,
                                o < c ? s : r,
                                o,
                                i.x,
                                i.y
                            ) &&
                            ((l = Math.abs(o - i.y) / (r - i.x)),
                            locallyInside(i, e) &&
                                (l < d ||
                                    (l === d &&
                                        (i.x > n.x ||
                                            (i.x === n.x &&
                                                sectorContainsSector(
                                                    n,
                                                    i
                                                ))))) &&
                                ((n = i), (d = l))),
                            (i = i.next)
                    } while (i !== u)
                    return n
                }
                function sectorContainsSector(e, t) {
                    return (
                        area(e.prev, e, t.prev) < 0 &&
                        area(t.next, e, e.next) < 0
                    )
                }
                function indexCurve(e, t, n, i) {
                    var r = e
                    do {
                        null === r.z && (r.z = zOrder(r.x, r.y, t, n, i)),
                            (r.prevZ = r.prev),
                            (r.nextZ = r.next),
                            (r = r.next)
                    } while (r !== e)
                    ;(r.prevZ.nextZ = null), (r.prevZ = null), sortLinked(r)
                }
                function sortLinked(e) {
                    var t,
                        n,
                        i,
                        r,
                        o,
                        s,
                        a,
                        l,
                        u = 1
                    do {
                        for (n = e, e = null, o = null, s = 0; n; ) {
                            for (
                                s++, i = n, a = 0, t = 0;
                                t < u && (a++, (i = i.nextZ));
                                t++
                            );
                            for (l = u; a > 0 || (l > 0 && i); )
                                0 !== a && (0 === l || !i || n.z <= i.z)
                                    ? ((r = n), (n = n.nextZ), a--)
                                    : ((r = i), (i = i.nextZ), l--),
                                    o ? (o.nextZ = r) : (e = r),
                                    (r.prevZ = o),
                                    (o = r)
                            n = i
                        }
                        ;(o.nextZ = null), (u *= 2)
                    } while (s > 1)
                    return e
                }
                function zOrder(e, t, n, i, r) {
                    return (
                        (e =
                            1431655765 &
                            ((e =
                                858993459 &
                                ((e =
                                    252645135 &
                                    ((e =
                                        16711935 &
                                        ((e = 32767 * (e - n) * r) |
                                            (e << 8))) |
                                        (e << 4))) |
                                    (e << 2))) |
                                (e << 1))) |
                        ((t =
                            1431655765 &
                            ((t =
                                858993459 &
                                ((t =
                                    252645135 &
                                    ((t =
                                        16711935 &
                                        ((t = 32767 * (t - i) * r) |
                                            (t << 8))) |
                                        (t << 4))) |
                                    (t << 2))) |
                                (t << 1))) <<
                            1)
                    )
                }
                function getLeftmost(e) {
                    var t = e,
                        n = e
                    do {
                        ;(t.x < n.x || (t.x === n.x && t.y < n.y)) && (n = t),
                            (t = t.next)
                    } while (t !== e)
                    return n
                }
                function pointInTriangle(e, t, n, i, r, o, s, a) {
                    return (
                        (r - s) * (t - a) - (e - s) * (o - a) >= 0 &&
                        (e - s) * (i - a) - (n - s) * (t - a) >= 0 &&
                        (n - s) * (o - a) - (r - s) * (i - a) >= 0
                    )
                }
                function isValidDiagonal(e, t) {
                    return (
                        e.next.i !== t.i &&
                        e.prev.i !== t.i &&
                        !intersectsPolygon(e, t) &&
                        ((locallyInside(e, t) &&
                            locallyInside(t, e) &&
                            middleInside(e, t) &&
                            (area(e.prev, e, t.prev) || area(e, t.prev, t))) ||
                            (equals(e, t) &&
                                area(e.prev, e, e.next) > 0 &&
                                area(t.prev, t, t.next) > 0))
                    )
                }
                function area(e, t, n) {
                    return (t.y - e.y) * (n.x - t.x) - (t.x - e.x) * (n.y - t.y)
                }
                function equals(e, t) {
                    return e.x === t.x && e.y === t.y
                }
                function intersects(e, t, n, i) {
                    var r = sign(area(e, t, n)),
                        o = sign(area(e, t, i)),
                        s = sign(area(n, i, e)),
                        a = sign(area(n, i, t))
                    return (
                        (r !== o && s !== a) ||
                        !(0 !== r || !onSegment(e, n, t)) ||
                        !(0 !== o || !onSegment(e, i, t)) ||
                        !(0 !== s || !onSegment(n, e, i)) ||
                        !(0 !== a || !onSegment(n, t, i))
                    )
                }
                function onSegment(e, t, n) {
                    return (
                        t.x <= Math.max(e.x, n.x) &&
                        t.x >= Math.min(e.x, n.x) &&
                        t.y <= Math.max(e.y, n.y) &&
                        t.y >= Math.min(e.y, n.y)
                    )
                }
                function sign(e) {
                    return e > 0 ? 1 : e < 0 ? -1 : 0
                }
                function intersectsPolygon(e, t) {
                    var n = e
                    do {
                        if (
                            n.i !== e.i &&
                            n.next.i !== e.i &&
                            n.i !== t.i &&
                            n.next.i !== t.i &&
                            intersects(n, n.next, e, t)
                        )
                            return !0
                        n = n.next
                    } while (n !== e)
                    return !1
                }
                function locallyInside(e, t) {
                    return area(e.prev, e, e.next) < 0
                        ? area(e, t, e.next) >= 0 && area(e, e.prev, t) >= 0
                        : area(e, t, e.prev) < 0 || area(e, e.next, t) < 0
                }
                function middleInside(e, t) {
                    var n = e,
                        i = !1,
                        r = (e.x + t.x) / 2,
                        o = (e.y + t.y) / 2
                    do {
                        n.y > o != n.next.y > o &&
                            n.next.y !== n.y &&
                            r <
                                ((n.next.x - n.x) * (o - n.y)) /
                                    (n.next.y - n.y) +
                                    n.x &&
                            (i = !i),
                            (n = n.next)
                    } while (n !== e)
                    return i
                }
                function splitPolygon(e, t) {
                    var n = new Node$1(e.i, e.x, e.y),
                        i = new Node$1(t.i, t.x, t.y),
                        r = e.next,
                        o = t.prev
                    return (
                        (e.next = t),
                        (t.prev = e),
                        (n.next = r),
                        (r.prev = n),
                        (i.next = n),
                        (n.prev = i),
                        (o.next = i),
                        (i.prev = o),
                        i
                    )
                }
                function insertNode(e, t, n, i) {
                    var r = new Node$1(e, t, n)
                    return (
                        i
                            ? ((r.next = i.next),
                              (r.prev = i),
                              (i.next.prev = r),
                              (i.next = r))
                            : ((r.prev = r), (r.next = r)),
                        r
                    )
                }
                function removeNode(e) {
                    ;(e.next.prev = e.prev),
                        (e.prev.next = e.next),
                        e.prevZ && (e.prevZ.nextZ = e.nextZ),
                        e.nextZ && (e.nextZ.prevZ = e.prevZ)
                }
                function Node$1(e, t, n) {
                    ;(this.i = e),
                        (this.x = t),
                        (this.y = n),
                        (this.prev = null),
                        (this.next = null),
                        (this.z = null),
                        (this.prevZ = null),
                        (this.nextZ = null),
                        (this.steiner = !1)
                }
                function signedArea(e, t, n, i) {
                    for (var r = 0, o = t, s = n - i; o < n; o += i)
                        (r += (e[s] - e[o]) * (e[o + 1] + e[s + 1])), (s = o)
                    return r
                }
                ;(earcut$2.exports = earcut),
                    (earcut$2.exports.default = earcut),
                    (earcut.deviation = function (e, t, n, i) {
                        var r = t && t.length,
                            o = r ? t[0] * n : e.length,
                            s = Math.abs(signedArea(e, 0, o, n))
                        if (r)
                            for (var a = 0, l = t.length; a < l; a++) {
                                var u = t[a] * n,
                                    h = a < l - 1 ? t[a + 1] * n : e.length
                                s -= Math.abs(signedArea(e, u, h, n))
                            }
                        var c = 0
                        for (a = 0; a < i.length; a += 3) {
                            var d = i[a] * n,
                                f = i[a + 1] * n,
                                p = i[a + 2] * n
                            c += Math.abs(
                                (e[d] - e[p]) * (e[f + 1] - e[d + 1]) -
                                    (e[d] - e[f]) * (e[p + 1] - e[d + 1])
                            )
                        }
                        return 0 === s && 0 === c ? 0 : Math.abs((c - s) / s)
                    }),
                    (earcut.flatten = function (e) {
                        for (
                            var t = e[0][0].length,
                                n = { vertices: [], holes: [], dimensions: t },
                                i = 0,
                                r = 0;
                            r < e.length;
                            r++
                        ) {
                            for (var o = 0; o < e[r].length; o++)
                                for (var s = 0; s < t; s++)
                                    n.vertices.push(e[r][o][s])
                            r > 0 && ((i += e[r - 1].length), n.holes.push(i))
                        }
                        return n
                    })
                var earcut$1 = earcut$2.exports,
                    Polygon = (function () {
                        function e(t, n, i) {
                            _classCallCheck(this, e),
                                (this.pos = new Vector2d()),
                                this._bounds,
                                (this.points = []),
                                (this.edges = []),
                                (this.indices = []),
                                (this.normals = []),
                                (this.shapeType = "Polygon"),
                                this.setShape(t, n, i)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function (e, t, n) {
                                        this.setShape(e, t, n)
                                    },
                                },
                                {
                                    key: "setShape",
                                    value: function (e, t, n) {
                                        return (
                                            this.pos.set(e, t),
                                            this.setVertices(n),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setVertices",
                                    value: function (e) {
                                        var t = this
                                        if (!Array.isArray(e)) return this
                                        if (e[0] instanceof Vector2d)
                                            this.points = e
                                        else if (
                                            ((this.points.length = 0),
                                            "object" === _typeof(e[0]))
                                        )
                                            e.forEach(function (e) {
                                                t.points.push(
                                                    new Vector2d(e.x, e.y)
                                                )
                                            })
                                        else
                                            for (
                                                var n = 0;
                                                n < e.length;
                                                n += 2
                                            )
                                                this.points.push(
                                                    new Vector2d(e[n], e[n + 1])
                                                )
                                        return (
                                            this.recalc(),
                                            this.updateBounds(),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "transform",
                                    value: function (e) {
                                        for (
                                            var t = this.points,
                                                n = t.length,
                                                i = 0;
                                            i < n;
                                            i++
                                        )
                                            e.apply(t[i])
                                        return (
                                            this.recalc(),
                                            this.updateBounds(),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "toIso",
                                    value: function () {
                                        return this.rotate(Math.PI / 4).scale(
                                            Math.SQRT2,
                                            Math.SQRT1_2
                                        )
                                    },
                                },
                                {
                                    key: "to2d",
                                    value: function () {
                                        return this.scale(
                                            Math.SQRT1_2,
                                            Math.SQRT2
                                        ).rotate(-Math.PI / 4)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e, t) {
                                        if (0 !== e) {
                                            for (
                                                var n = this.points,
                                                    i = n.length,
                                                    r = 0;
                                                r < i;
                                                r++
                                            )
                                                n[r].rotate(e, t)
                                            this.recalc(), this.updateBounds()
                                        }
                                        return this
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        t = void 0 !== t ? t : e
                                        for (
                                            var n = this.points,
                                                i = n.length,
                                                r = 0;
                                            r < i;
                                            r++
                                        )
                                            n[r].scale(e, t)
                                        return (
                                            this.recalc(),
                                            this.updateBounds(),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "scaleV",
                                    value: function (e) {
                                        return this.scale(e.x, e.y)
                                    },
                                },
                                {
                                    key: "recalc",
                                    value: function () {
                                        var e,
                                            t = this.edges,
                                            n = this.normals,
                                            i = this.indices,
                                            r = this.points,
                                            o = r.length
                                        if (o < 3)
                                            throw new Error(
                                                "Requires at least 3 points"
                                            )
                                        for (e = 0; e < o; e++)
                                            void 0 === t[e] &&
                                                (t[e] = new Vector2d()),
                                                t[e]
                                                    .copy(r[(e + 1) % o])
                                                    .sub(r[e]),
                                                void 0 === n[e] &&
                                                    (n[e] = new Vector2d()),
                                                n[e]
                                                    .copy(t[e])
                                                    .perp()
                                                    .normalize()
                                        return (
                                            (t.length = o),
                                            (n.length = o),
                                            (i.length = 0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "getIndices",
                                    value: function () {
                                        return (
                                            0 === this.indices.length &&
                                                (this.indices = earcut$1(
                                                    this.points.flatMap(
                                                        function (e) {
                                                            return [e.x, e.y]
                                                        }
                                                    )
                                                )),
                                            this.indices
                                        )
                                    },
                                },
                                {
                                    key: "translate",
                                    value: function () {
                                        var e, t
                                        return (
                                            2 === arguments.length
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y)),
                                            (this.pos.x += e),
                                            (this.pos.y += t),
                                            this.getBounds().translate(e, t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "shift",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y)),
                                            (this.pos.x = e),
                                            (this.pos.y = t),
                                            this.updateBounds()
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y))
                                        for (
                                            var n = !1,
                                                i = this.pos.x,
                                                r = this.pos.y,
                                                o = this.points,
                                                s = o.length,
                                                a = 0,
                                                l = s - 1;
                                            a < s;
                                            l = a++
                                        ) {
                                            var u = o[a].y + r,
                                                h = o[a].x + i,
                                                c = o[l].y + r,
                                                d = o[l].x + i
                                            u > t != c > t &&
                                                e <
                                                    ((d - h) * (t - u)) /
                                                        (c - u) +
                                                        h &&
                                                (n = !n)
                                        }
                                        return n
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function () {
                                        return (
                                            void 0 === this._bounds &&
                                                (this._bounds =
                                                    pool.pull("Bounds")),
                                            this._bounds
                                        )
                                    },
                                },
                                {
                                    key: "updateBounds",
                                    value: function () {
                                        var e = this.getBounds()
                                        return (
                                            e.update(this.points),
                                            e.translate(this.pos),
                                            e
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        var t = []
                                        return (
                                            this.points.forEach(function (e) {
                                                t.push(e.clone())
                                            }),
                                            new e(this.pos.x, this.pos.y, t)
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    Rect = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r, o) {
                            var s
                            return (
                                _classCallCheck(this, n),
                                ((s = t.call(this, e, i, [
                                    new Vector2d(0, 0),
                                    new Vector2d(r, 0),
                                    new Vector2d(r, o),
                                    new Vector2d(0, o),
                                ])).shapeType = "Rectangle"),
                                s
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function (e, t, n, i) {
                                        this.setShape(e, t, n, i)
                                    },
                                },
                                {
                                    key: "setShape",
                                    value: function (e, t, n, i) {
                                        var r = n
                                        return (
                                            this.pos.set(e, t),
                                            4 === arguments.length &&
                                                ((r = this.points)[0].set(0, 0),
                                                r[1].set(n, 0),
                                                r[2].set(n, i),
                                                r[3].set(0, i)),
                                            this.setVertices(r),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "left",
                                    get: function () {
                                        return this.pos.x
                                    },
                                },
                                {
                                    key: "right",
                                    get: function () {
                                        var e = this.width
                                        return this.pos.x + e || e
                                    },
                                },
                                {
                                    key: "top",
                                    get: function () {
                                        return this.pos.y
                                    },
                                },
                                {
                                    key: "bottom",
                                    get: function () {
                                        var e = this.height
                                        return this.pos.y + e || e
                                    },
                                },
                                {
                                    key: "width",
                                    get: function () {
                                        return this.points[2].x
                                    },
                                    set: function (e) {
                                        ;(this.points[1].x = this.points[2].x =
                                            e),
                                            this.recalc(),
                                            this.updateBounds()
                                    },
                                },
                                {
                                    key: "height",
                                    get: function () {
                                        return this.points[2].y
                                    },
                                    set: function (e) {
                                        ;(this.points[2].y = this.points[3].y =
                                            e),
                                            this.recalc(),
                                            this.updateBounds()
                                    },
                                },
                                {
                                    key: "centerX",
                                    get: function () {
                                        return isFinite(this.width)
                                            ? this.pos.x + this.width / 2
                                            : this.width
                                    },
                                    set: function (e) {
                                        this.pos.x = e - this.width / 2
                                    },
                                },
                                {
                                    key: "centerY",
                                    get: function () {
                                        return isFinite(this.height)
                                            ? this.pos.y + this.height / 2
                                            : this.height
                                    },
                                    set: function (e) {
                                        this.pos.y = e - this.height / 2
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function (e, t) {
                                        return (
                                            (this.width = e),
                                            (this.height = t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : e
                                        return (
                                            (this.width *= e),
                                            (this.height *= t),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        return new n(
                                            this.pos.x,
                                            this.pos.y,
                                            this.width,
                                            this.height
                                        )
                                    },
                                },
                                {
                                    key: "copy",
                                    value: function (e) {
                                        return this.setShape(
                                            e.pos.x,
                                            e.pos.y,
                                            e.width,
                                            e.height
                                        )
                                    },
                                },
                                {
                                    key: "union",
                                    value: function (e) {
                                        var t = Math.min(this.left, e.left),
                                            n = Math.min(this.top, e.top)
                                        return (
                                            this.resize(
                                                Math.max(this.right, e.right) -
                                                    t,
                                                Math.max(
                                                    this.bottom,
                                                    e.bottom
                                                ) - n
                                            ),
                                            this.pos.set(t, n),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "overlaps",
                                    value: function (e) {
                                        return (
                                            this.left < e.right &&
                                            e.left < this.right &&
                                            this.top < e.bottom &&
                                            e.top < this.bottom
                                        )
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function () {
                                        var e,
                                            t,
                                            i,
                                            r,
                                            o = arguments[0]
                                        return (
                                            2 === arguments.length
                                                ? ((e = t = o),
                                                  (i = r = arguments[1]))
                                                : o instanceof n
                                                ? ((e = o.left),
                                                  (t = o.right),
                                                  (i = o.top),
                                                  (r = o.bottom))
                                                : ((e = t = o.x),
                                                  (i = r = o.y)),
                                            e >= this.left &&
                                                t <= this.right &&
                                                i >= this.top &&
                                                r <= this.bottom
                                        )
                                    },
                                },
                                {
                                    key: "equals",
                                    value: function (e) {
                                        return (
                                            e.left === this.left &&
                                            e.right === this.right &&
                                            e.top === this.top &&
                                            e.bottom === this.bottom
                                        )
                                    },
                                },
                                {
                                    key: "isFinite",
                                    value: (function (e) {
                                        function t() {
                                            return e.apply(this, arguments)
                                        }
                                        return (
                                            (t.toString = function () {
                                                return e.toString()
                                            }),
                                            t
                                        )
                                    })(function () {
                                        return (
                                            isFinite(this.pos.x) &&
                                            isFinite(this.pos.y) &&
                                            isFinite(this.width) &&
                                            isFinite(this.height)
                                        )
                                    }),
                                },
                                {
                                    key: "toPolygon",
                                    value: function () {
                                        return new Polygon(
                                            this.pos.x,
                                            this.pos.y,
                                            this.points
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Polygon),
                    _keyStatus = {},
                    _keyLock = {},
                    _keyLocked = {},
                    _keyRefs = {},
                    _preventDefaultForKeys = {},
                    _keyBindings = {},
                    keyDownEvent = function (e, t, n) {
                        t = t || e.keyCode || e.button
                        var i = _keyBindings[t]
                        if ((emit(KEYDOWN, i, t, !i || !_keyLocked[i]), i)) {
                            if (!_keyLocked[i]) {
                                var r = void 0 !== n ? n : t
                                _keyRefs[i][r] ||
                                    (_keyStatus[i]++, (_keyRefs[i][r] = !0))
                            }
                            return (
                                !_preventDefaultForKeys[t] ||
                                "function" != typeof e.preventDefault ||
                                e.preventDefault()
                            )
                        }
                        return !0
                    },
                    keyUpEvent = function (e, t, n) {
                        t = t || e.keyCode || e.button
                        var i = _keyBindings[t]
                        if ((emit(KEYUP, i, t), i)) {
                            var r = void 0 !== n ? n : t
                            return (
                                (_keyRefs[i][r] = void 0),
                                _keyStatus[i] > 0 && _keyStatus[i]--,
                                (_keyLocked[i] = !1),
                                !_preventDefaultForKeys[t] ||
                                    "function" != typeof e.preventDefault ||
                                    e.preventDefault()
                            )
                        }
                        return !0
                    },
                    keyBoardEventTarget = null,
                    KEY = {
                        BACKSPACE: 8,
                        TAB: 9,
                        ENTER: 13,
                        SHIFT: 16,
                        CTRL: 17,
                        ALT: 18,
                        PAUSE: 19,
                        CAPS_LOCK: 20,
                        ESC: 27,
                        SPACE: 32,
                        PAGE_UP: 33,
                        PAGE_DOWN: 34,
                        END: 35,
                        HOME: 36,
                        LEFT: 37,
                        UP: 38,
                        RIGHT: 39,
                        DOWN: 40,
                        PRINT_SCREEN: 42,
                        INSERT: 45,
                        DELETE: 46,
                        NUM0: 48,
                        NUM1: 49,
                        NUM2: 50,
                        NUM3: 51,
                        NUM4: 52,
                        NUM5: 53,
                        NUM6: 54,
                        NUM7: 55,
                        NUM8: 56,
                        NUM9: 57,
                        A: 65,
                        B: 66,
                        C: 67,
                        D: 68,
                        E: 69,
                        F: 70,
                        G: 71,
                        H: 72,
                        I: 73,
                        J: 74,
                        K: 75,
                        L: 76,
                        M: 77,
                        N: 78,
                        O: 79,
                        P: 80,
                        Q: 81,
                        R: 82,
                        S: 83,
                        T: 84,
                        U: 85,
                        V: 86,
                        W: 87,
                        X: 88,
                        Y: 89,
                        Z: 90,
                        WINDOW_KEY: 91,
                        NUMPAD0: 96,
                        NUMPAD1: 97,
                        NUMPAD2: 98,
                        NUMPAD3: 99,
                        NUMPAD4: 100,
                        NUMPAD5: 101,
                        NUMPAD6: 102,
                        NUMPAD7: 103,
                        NUMPAD8: 104,
                        NUMPAD9: 105,
                        MULTIPLY: 106,
                        ADD: 107,
                        SUBSTRACT: 109,
                        DECIMAL: 110,
                        DIVIDE: 111,
                        F1: 112,
                        F2: 113,
                        F3: 114,
                        F4: 115,
                        F5: 116,
                        F6: 117,
                        F7: 118,
                        F8: 119,
                        F9: 120,
                        F10: 121,
                        F11: 122,
                        F12: 123,
                        TILDE: 126,
                        NUM_LOCK: 144,
                        SCROLL_LOCK: 145,
                        SEMICOLON: 186,
                        PLUS: 187,
                        COMMA: 188,
                        MINUS: 189,
                        PERIOD: 190,
                        FORWAND_SLASH: 191,
                        GRAVE_ACCENT: 192,
                        OPEN_BRACKET: 219,
                        BACK_SLASH: 220,
                        CLOSE_BRACKET: 221,
                        SINGLE_QUOTE: 222,
                    }
                function initKeyboardEvent() {
                    null === keyBoardEventTarget &&
                        !1 === device$1.isMobile &&
                        ((keyBoardEventTarget = window).addEventListener(
                            "keydown",
                            keyDownEvent,
                            !1
                        ),
                        keyBoardEventTarget.addEventListener(
                            "keyup",
                            keyUpEvent,
                            !1
                        ))
                }
                function isKeyPressed(e) {
                    return !(
                        !_keyStatus[e] ||
                        _keyLocked[e] ||
                        (_keyLock[e] && (_keyLocked[e] = !0), 0)
                    )
                }
                function keyStatus(e) {
                    return _keyStatus[e] > 0
                }
                function triggerKeyEvent(e, t, n) {
                    !0 === t ? keyDownEvent({}, e, n) : keyUpEvent({}, e, n)
                }
                function bindKey(e, t, n) {
                    var i =
                        arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : preventDefault
                    ;(_keyBindings[e] = t),
                        (_preventDefaultForKeys[e] = i),
                        (_keyStatus[t] = 0),
                        (_keyLock[t] = n || !1),
                        (_keyLocked[t] = !1),
                        (_keyRefs[t] = {})
                }
                function getBindingKey(e) {
                    return _keyBindings[e]
                }
                function unlockKey(e) {
                    _keyLocked[e] = !1
                }
                function unbindKey(e) {
                    var t = _keyBindings[e]
                    ;(_keyStatus[t] = 0),
                        (_keyLock[t] = !1),
                        (_keyRefs[t] = {}),
                        (_keyBindings[e] = null),
                        (_preventDefaultForKeys[e] = null)
                }
                var Bounds$1 = (function () {
                        function e(t) {
                            _classCallCheck(this, e), this.onResetEvent(t)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function (e) {
                                        void 0 === this.min
                                            ? ((this.min = {
                                                  x: 1 / 0,
                                                  y: 1 / 0,
                                              }),
                                              (this.max = {
                                                  x: -1 / 0,
                                                  y: -1 / 0,
                                              }))
                                            : this.clear(),
                                            void 0 !== e && this.update(e),
                                            (this._center = new Vector2d())
                                    },
                                },
                                {
                                    key: "clear",
                                    value: function () {
                                        this.setMinMax(
                                            1 / 0,
                                            1 / 0,
                                            -1 / 0,
                                            -1 / 0
                                        )
                                    },
                                },
                                {
                                    key: "setMinMax",
                                    value: function (e, t, n, i) {
                                        ;(this.min.x = e),
                                            (this.min.y = t),
                                            (this.max.x = n),
                                            (this.max.y = i)
                                    },
                                },
                                {
                                    key: "x",
                                    get: function () {
                                        return this.min.x
                                    },
                                    set: function (e) {
                                        var t = this.max.x - this.min.x
                                        ;(this.min.x = e), (this.max.x = e + t)
                                    },
                                },
                                {
                                    key: "y",
                                    get: function () {
                                        return this.min.y
                                    },
                                    set: function (e) {
                                        var t = this.max.y - this.min.y
                                        ;(this.min.y = e), (this.max.y = e + t)
                                    },
                                },
                                {
                                    key: "width",
                                    get: function () {
                                        return this.max.x - this.min.x
                                    },
                                    set: function (e) {
                                        this.max.x = this.min.x + e
                                    },
                                },
                                {
                                    key: "height",
                                    get: function () {
                                        return this.max.y - this.min.y
                                    },
                                    set: function (e) {
                                        this.max.y = this.min.y + e
                                    },
                                },
                                {
                                    key: "left",
                                    get: function () {
                                        return this.min.x
                                    },
                                },
                                {
                                    key: "right",
                                    get: function () {
                                        return this.max.x
                                    },
                                },
                                {
                                    key: "top",
                                    get: function () {
                                        return this.min.y
                                    },
                                },
                                {
                                    key: "bottom",
                                    get: function () {
                                        return this.max.y
                                    },
                                },
                                {
                                    key: "centerX",
                                    get: function () {
                                        return this.min.x + this.width / 2
                                    },
                                },
                                {
                                    key: "centerY",
                                    get: function () {
                                        return this.min.y + this.height / 2
                                    },
                                },
                                {
                                    key: "center",
                                    get: function () {
                                        return this._center.set(
                                            this.centerX,
                                            this.centerY
                                        )
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        this.add(e, !0)
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        !0 === t && this.clear()
                                        for (var n = 0; n < e.length; n++) {
                                            var i = e[n]
                                            i.x > this.max.x &&
                                                (this.max.x = i.x),
                                                i.x < this.min.x &&
                                                    (this.min.x = i.x),
                                                i.y > this.max.y &&
                                                    (this.max.y = i.y),
                                                i.y < this.min.y &&
                                                    (this.min.y = i.y)
                                        }
                                    },
                                },
                                {
                                    key: "addBounds",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        !0 === t && this.clear(),
                                            e.max.x > this.max.x &&
                                                (this.max.x = e.max.x),
                                            e.min.x < this.min.x &&
                                                (this.min.x = e.min.x),
                                            e.max.y > this.max.y &&
                                                (this.max.y = e.max.y),
                                            e.min.y < this.min.y &&
                                                (this.min.y = e.min.y)
                                    },
                                },
                                {
                                    key: "addPoint",
                                    value: function (e, t) {
                                        void 0 !== t && (e = t.apply(e)),
                                            (this.min.x = Math.min(
                                                this.min.x,
                                                e.x
                                            )),
                                            (this.max.x = Math.max(
                                                this.max.x,
                                                e.x
                                            )),
                                            (this.min.y = Math.min(
                                                this.min.y,
                                                e.y
                                            )),
                                            (this.max.y = Math.max(
                                                this.max.y,
                                                e.y
                                            ))
                                    },
                                },
                                {
                                    key: "addFrame",
                                    value: function (e, t, n, i, r) {
                                        var o = me.pool.pull("Vector2d")
                                        this.addPoint(o.set(e, t), r),
                                            this.addPoint(o.set(n, t), r),
                                            this.addPoint(o.set(e, i), r),
                                            this.addPoint(o.set(n, i), r),
                                            me.pool.push(o)
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function () {
                                        var t,
                                            n,
                                            i,
                                            r,
                                            o = arguments[0]
                                        return (
                                            2 === arguments.length
                                                ? ((t = n = o),
                                                  (i = r = arguments[1]))
                                                : o instanceof e
                                                ? ((t = o.min.x),
                                                  (n = o.max.x),
                                                  (i = o.min.y),
                                                  (r = o.max.y))
                                                : ((t = n = o.x),
                                                  (i = r = o.y)),
                                            t >= this.min.x &&
                                                n <= this.max.x &&
                                                i >= this.min.y &&
                                                r <= this.max.y
                                        )
                                    },
                                },
                                {
                                    key: "overlaps",
                                    value: function (e) {
                                        return !(
                                            this.right < e.left ||
                                            this.left > e.right ||
                                            this.bottom < e.top ||
                                            this.top > e.bottom
                                        )
                                    },
                                },
                                {
                                    key: "isFinite",
                                    value: (function (e) {
                                        function t() {
                                            return e.apply(this, arguments)
                                        }
                                        return (
                                            (t.toString = function () {
                                                return e.toString()
                                            }),
                                            t
                                        )
                                    })(function () {
                                        return (
                                            isFinite(this.min.x) &&
                                            isFinite(this.max.x) &&
                                            isFinite(this.min.y) &&
                                            isFinite(this.max.y)
                                        )
                                    }),
                                },
                                {
                                    key: "translate",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y)),
                                            (this.min.x += e),
                                            (this.max.x += e),
                                            (this.min.y += t),
                                            (this.max.y += t)
                                    },
                                },
                                {
                                    key: "shift",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y))
                                        var n = this.max.x - this.min.x,
                                            i = this.max.y - this.min.y
                                        ;(this.min.x = e),
                                            (this.max.x = e + n),
                                            (this.min.y = t),
                                            (this.max.y = t + i)
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        var t = new e()
                                        return t.addBounds(this), t
                                    },
                                },
                                {
                                    key: "toPolygon",
                                    value: function () {
                                        return new Polygon(this.x, this.y, [
                                            new Vector2d(0, 0),
                                            new Vector2d(this.width, 0),
                                            new Vector2d(
                                                this.width,
                                                this.height
                                            ),
                                            new Vector2d(0, this.height),
                                        ])
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    tmpVec = new Vector2d(),
                    Pointer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            var e,
                                i =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                        ? arguments[0]
                                        : 0,
                                r =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 0,
                                o =
                                    arguments.length > 2 &&
                                    void 0 !== arguments[2]
                                        ? arguments[2]
                                        : 1,
                                s =
                                    arguments.length > 3 &&
                                    void 0 !== arguments[3]
                                        ? arguments[3]
                                        : 1
                            return (
                                _classCallCheck(this, n),
                                (e = t.call(this)).setMinMax(
                                    i,
                                    r,
                                    i + o,
                                    r + s
                                ),
                                (e.LEFT = 0),
                                (e.MIDDLE = 1),
                                (e.RIGHT = 2),
                                (e.event = void 0),
                                (e.type = void 0),
                                (e.button = 0),
                                (e.isPrimary = !1),
                                (e.pageX = 0),
                                (e.pageY = 0),
                                (e.clientX = 0),
                                (e.clientY = 0),
                                (e.deltaMode = 0),
                                (e.deltaX = 0),
                                (e.deltaY = 0),
                                (e.deltaZ = 0),
                                (e.gameX = 0),
                                (e.gameY = 0),
                                (e.gameScreenX = 0),
                                (e.gameScreenY = 0),
                                (e.gameWorldX = 0),
                                (e.gameWorldY = 0),
                                (e.gameLocalX = 0),
                                (e.gameLocalY = 0),
                                (e.pointerId = void 0),
                                (e.isNormalized = !1),
                                (e.bind = [0, 0, 0]),
                                e
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "setEvent",
                                    value: function (e) {
                                        var t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 0,
                                            i =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : 0,
                                            r =
                                                arguments.length > 4 &&
                                                void 0 !== arguments[4]
                                                    ? arguments[4]
                                                    : 0,
                                            o =
                                                arguments.length > 5 &&
                                                void 0 !== arguments[5]
                                                    ? arguments[5]
                                                    : 1
                                        ;(this.event = e),
                                            (this.pageX = t),
                                            (this.pageY = n),
                                            (this.clientX = i),
                                            (this.clientY = r),
                                            globalToLocal(
                                                this.pageX,
                                                this.pageY,
                                                tmpVec
                                            ),
                                            (this.gameScreenX = this.x =
                                                tmpVec.x),
                                            (this.gameScreenY = this.y =
                                                tmpVec.y),
                                            (this.isNormalized =
                                                !device$1.PointerEvent ||
                                                (device$1.PointerEvent &&
                                                    !(
                                                        e instanceof
                                                        window.PointerEvent
                                                    ))),
                                            "wheel" === e.type
                                                ? ((this.deltaMode =
                                                      e.deltaMode || 0),
                                                  (this.deltaX = e.deltaX || 0),
                                                  (this.deltaY = e.deltaY || 0),
                                                  (this.deltaZ = e.deltaZ || 0))
                                                : ((this.deltaMode = 0),
                                                  (this.deltaX = 0),
                                                  (this.deltaY = 0),
                                                  (this.deltaZ = 0)),
                                            (this.pointerId = o),
                                            (this.isPrimary =
                                                void 0 === e.isPrimary ||
                                                e.isPrimary),
                                            (this.button = e.button || 0),
                                            (this.type = e.type),
                                            void 0 !== viewport &&
                                                viewport.localToWorld(
                                                    this.gameScreenX,
                                                    this.gameScreenY,
                                                    tmpVec
                                                ),
                                            (this.gameWorldX = tmpVec.x),
                                            (this.gameWorldY = tmpVec.y),
                                            !1 === this.isNormalized
                                                ? ((this.width = e.width || 1),
                                                  (this.height = e.height || 1))
                                                : "number" == typeof e.radiusX
                                                ? ((this.width =
                                                      2 * e.radiusX || 1),
                                                  (this.height =
                                                      2 * e.radiusY || 1))
                                                : (this.width = this.height = 1)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Bounds$1),
                    T_POINTERS = [],
                    eventHandlers = new Map(),
                    currentPointer,
                    pointerInitialized = !1,
                    lastTimeStamp = 0,
                    activeEventList = [],
                    WHEEL = ["wheel"],
                    POINTER_MOVE = ["pointermove", "mousemove", "touchmove"],
                    POINTER_DOWN = ["pointerdown", "mousedown", "touchstart"],
                    POINTER_UP = ["pointerup", "mouseup", "touchend"],
                    POINTER_CANCEL = [
                        "pointercancel",
                        "mousecancel",
                        "touchcancel",
                    ],
                    POINTER_ENTER = [
                        "pointerenter",
                        "mouseenter",
                        "touchenter",
                    ],
                    POINTER_OVER = ["pointerover", "mouseover", "touchover"],
                    POINTER_LEAVE = [
                        "pointerleave",
                        "mouseleave",
                        "touchleave",
                    ],
                    pointerEventList = [
                        WHEEL[0],
                        POINTER_MOVE[0],
                        POINTER_DOWN[0],
                        POINTER_UP[0],
                        POINTER_CANCEL[0],
                        POINTER_ENTER[0],
                        POINTER_OVER[0],
                        POINTER_LEAVE[0],
                    ],
                    mouseEventList = [
                        WHEEL[0],
                        POINTER_MOVE[1],
                        POINTER_DOWN[1],
                        POINTER_UP[1],
                        POINTER_CANCEL[1],
                        POINTER_ENTER[1],
                        POINTER_OVER[1],
                        POINTER_LEAVE[1],
                    ],
                    touchEventList = [
                        POINTER_MOVE[2],
                        POINTER_DOWN[2],
                        POINTER_UP[2],
                        POINTER_CANCEL[2],
                        POINTER_ENTER[2],
                        POINTER_OVER[2],
                        POINTER_LEAVE[2],
                    ],
                    pointerEventMap = {
                        wheel: WHEEL,
                        pointermove: POINTER_MOVE,
                        pointerdown: POINTER_DOWN,
                        pointerup: POINTER_UP,
                        pointercancel: POINTER_CANCEL,
                        pointerenter: POINTER_ENTER,
                        pointerover: POINTER_OVER,
                        pointerleave: POINTER_LEAVE,
                    },
                    normalizedEvents = []
                function registerEventListener(e, t) {
                    for (var n = 0; n < e.length; n++)
                        -1 === POINTER_MOVE.indexOf(e[n]) &&
                            pointerEventTarget.addEventListener(e[n], t, {
                                passive: !1 === preventDefault,
                            })
                }
                function enablePointerEvent() {
                    if (!pointerInitialized) {
                        currentPointer = new Rect(0, 0, 1, 1)
                        for (var e = 0; e < device$1.maxTouchPoints; e++)
                            T_POINTERS.push(new Pointer())
                        var t
                        null === pointerEventTarget &&
                            (pointerEventTarget = renderer.getScreenCanvas()),
                            (activeEventList = device$1.PointerEvent
                                ? pointerEventList
                                : mouseEventList),
                            device$1.touch &&
                                !device$1.PointerEvent &&
                                (activeEventList =
                                    activeEventList.concat(touchEventList)),
                            registerEventListener(
                                activeEventList,
                                onPointerEvent
                            ),
                            void 0 === throttlingInterval &&
                                (throttlingInterval = ~~(1e3 / timer$1.maxfps)),
                            !0 === device$1.autoFocus &&
                                (device$1.focus(),
                                pointerEventTarget.addEventListener(
                                    activeEventList[2],
                                    function () {
                                        device$1.focus()
                                    },
                                    { passive: !1 === preventDefault }
                                ))
                        var n = findAllActiveEvents(
                            activeEventList,
                            POINTER_MOVE
                        )
                        if (throttlingInterval < 17)
                            for (t = 0; t < n.length; t++)
                                -1 !== activeEventList.indexOf(n[t]) &&
                                    pointerEventTarget.addEventListener(
                                        n[t],
                                        onMoveEvent,
                                        { passive: !0 }
                                    )
                        else
                            for (t = 0; t < n.length; t++)
                                -1 !== activeEventList.indexOf(n[t]) &&
                                    pointerEventTarget.addEventListener(
                                        n[t],
                                        throttle(
                                            onMoveEvent,
                                            throttlingInterval,
                                            !1
                                        ),
                                        { passive: !0 }
                                    )
                        setTouchAction(pointerEventTarget),
                            (pointerInitialized = !0)
                    }
                }
                function findActiveEvent(e, t) {
                    for (var n = 0; n < t.length; n++)
                        if (-1 !== e.indexOf(t[n])) return t[n]
                }
                function findAllActiveEvents(e, t) {
                    for (var n = [], i = 0; i < t.length; i++)
                        -1 !== e.indexOf(t[i]) && n.push(t[i])
                    return n
                }
                function triggerEvent(e, t, n, i) {
                    var r
                    if (e.callbacks[t]) {
                        e.pointerId = i
                        for (
                            var o = e.callbacks[t].length - 1;
                            o >= 0 && (r = e.callbacks[t][o]);
                            o--
                        )
                            if (!1 === r(n)) return !0
                    }
                    return !1
                }
                function dispatchEvent(e) {
                    for (var t = !1; e.length > 0; ) {
                        var n = e.pop()
                        if (
                            (T_POINTERS.push(n), void 0 !== n.event.timeStamp)
                        ) {
                            if (n.event.timeStamp < lastTimeStamp) continue
                            lastTimeStamp = n.event.timeStamp
                        }
                        currentPointer.setShape(
                            n.gameWorldX,
                            n.gameWorldY,
                            n.width,
                            n.height
                        ),
                            POINTER_MOVE.includes(n.type) &&
                                ((n.gameX = n.gameLocalX = n.gameScreenX),
                                (n.gameY = n.gameLocalY = n.gameScreenY),
                                emit(POINTERMOVE, n))
                        for (
                            var i,
                                r = world.broadphase.retrieve(
                                    currentPointer,
                                    Container.prototype._sortReverseZ
                                ),
                                o = (r = r.concat([viewport])).length;
                            (i = r[--o]);

                        ) {
                            if (eventHandlers.has(i) && !0 !== i.isKinematic) {
                                var s,
                                    a = eventHandlers.get(i),
                                    l = a.region,
                                    u = l.ancestor,
                                    h = l.getBounds()
                                if (
                                    (!0 === l.isFloating
                                        ? ((n.gameX = n.gameLocalX =
                                              n.gameScreenX),
                                          (n.gameY = n.gameLocalY =
                                              n.gameScreenY))
                                        : ((n.gameX = n.gameLocalX =
                                              n.gameWorldX),
                                          (n.gameY = n.gameLocalY =
                                              n.gameWorldY)),
                                    void 0 !== u)
                                ) {
                                    var c = u.getBounds()
                                    ;(n.gameLocalX = n.gameX - c.x),
                                        (n.gameLocalY = n.gameY - c.y)
                                }
                                var d = n.gameX,
                                    f = n.gameY
                                if (
                                    void 0 !== l.currentTransform &&
                                    !l.currentTransform.isIdentity()
                                ) {
                                    var p = l.currentTransform.applyInverse(
                                        pool.pull("Vector2d", d, f)
                                    )
                                    ;(d = p.x), (f = p.y), pool.push(p)
                                }
                                switch (((s = h.contains(d, f)), n.type)) {
                                    case POINTER_MOVE[0]:
                                    case POINTER_MOVE[1]:
                                    case POINTER_MOVE[2]:
                                    case POINTER_MOVE[3]:
                                        if (a.pointerId !== n.pointerId || s) {
                                            if (
                                                null === a.pointerId &&
                                                s &&
                                                triggerEvent(
                                                    a,
                                                    findActiveEvent(
                                                        activeEventList,
                                                        POINTER_ENTER
                                                    ),
                                                    n,
                                                    n.pointerId
                                                )
                                            ) {
                                                t = !0
                                                break
                                            }
                                        } else if (
                                            triggerEvent(
                                                a,
                                                findActiveEvent(
                                                    activeEventList,
                                                    POINTER_LEAVE
                                                ),
                                                n,
                                                null
                                            )
                                        ) {
                                            t = !0
                                            break
                                        }
                                        if (
                                            s &&
                                            triggerEvent(
                                                a,
                                                n.type,
                                                n,
                                                n.pointerId
                                            )
                                        ) {
                                            t = !0
                                            break
                                        }
                                        break
                                    case POINTER_UP[0]:
                                    case POINTER_UP[1]:
                                    case POINTER_UP[2]:
                                    case POINTER_UP[3]:
                                        if (
                                            a.pointerId === n.pointerId &&
                                            s &&
                                            triggerEvent(a, n.type, n, null)
                                        ) {
                                            t = !0
                                            break
                                        }
                                        break
                                    case POINTER_CANCEL[0]:
                                    case POINTER_CANCEL[1]:
                                    case POINTER_CANCEL[2]:
                                    case POINTER_CANCEL[3]:
                                        if (
                                            a.pointerId === n.pointerId &&
                                            triggerEvent(a, n.type, n, null)
                                        ) {
                                            t = !0
                                            break
                                        }
                                        break
                                    default:
                                        if (
                                            s &&
                                            triggerEvent(
                                                a,
                                                n.type,
                                                n,
                                                n.pointerId
                                            )
                                        ) {
                                            t = !0
                                            break
                                        }
                                }
                            }
                            if (!0 === t) break
                        }
                    }
                    return t
                }
                function normalizeEvent(e) {
                    var t
                    if (device$1.TouchEvent && e.changedTouches)
                        for (
                            var n = 0, i = e.changedTouches.length;
                            n < i;
                            n++
                        ) {
                            var r = e.changedTouches[n]
                            ;(t = T_POINTERS.pop()).setEvent(
                                e,
                                r.pageX,
                                r.pageY,
                                r.clientX,
                                r.clientY,
                                r.identifier
                            ),
                                normalizedEvents.push(t)
                        }
                    else
                        (t = T_POINTERS.pop()).setEvent(
                            e,
                            e.pageX,
                            e.pageY,
                            e.clientX,
                            e.clientY,
                            e.pointerId
                        ),
                            normalizedEvents.push(t)
                    return (
                        !1 === e.isPrimary ||
                            ((normalizedEvents[0].isPrimary = !0),
                            Object.assign(pointer, normalizedEvents[0])),
                        normalizedEvents
                    )
                }
                function onMoveEvent(e) {
                    dispatchEvent(normalizeEvent(e))
                }
                function onPointerEvent(e) {
                    normalizeEvent(e)
                    var t = normalizedEvents[0].button
                    ;(dispatchEvent(normalizedEvents) || "wheel" === e.type) &&
                        e.preventDefault()
                    var n = pointer.bind[t]
                    n &&
                        triggerKeyEvent(n, POINTER_DOWN.includes(e.type), t + 1)
                }
                var pointerEventTarget = null,
                    pointer = new Pointer(0, 0, 1, 1),
                    throttlingInterval
                function globalToLocal(e, t, n) {
                    n = n || pool.pull("Vector2d")
                    var i = device$1.getElementBounds(
                            renderer.getScreenCanvas()
                        ),
                        r = device$1.devicePixelRatio
                    ;(e -= i.left + (window.pageXOffset || 0)),
                        (t -= i.top + (window.pageYOffset || 0))
                    var o = scaleRatio
                    return (
                        (1 === o.x && 1 === o.y) || ((e /= o.x), (t /= o.y)),
                        n.set(e * r, t * r)
                    )
                }
                function setTouchAction(e, t) {
                    e.style["touch-action"] = t || "none"
                }
                function bindPointer() {
                    var e = arguments.length < 2 ? pointer.LEFT : arguments[0],
                        t = arguments.length < 2 ? arguments[0] : arguments[1]
                    if ((enablePointerEvent(), !getBindingKey(t)))
                        throw new Error("no action defined for keycode " + t)
                    pointer.bind[e] = t
                }
                function unbindPointer(e) {
                    pointer.bind[void 0 === e ? pointer.LEFT : e] = null
                }
                function registerPointerEvent(e, t, n) {
                    if (
                        (enablePointerEvent(),
                        -1 === pointerEventList.indexOf(e))
                    )
                        throw new Error("invalid event type : " + e)
                    if (void 0 === t)
                        throw new Error(
                            "registerPointerEvent: region for " +
                                toString(t) +
                                " event is undefined "
                        )
                    var i = findAllActiveEvents(
                        activeEventList,
                        pointerEventMap[e]
                    )
                    eventHandlers.has(t) ||
                        eventHandlers.set(t, {
                            region: t,
                            callbacks: {},
                            pointerId: null,
                        })
                    for (var r = eventHandlers.get(t), o = 0; o < i.length; o++)
                        (e = i[o]),
                            r.callbacks[e]
                                ? r.callbacks[e].push(n)
                                : (r.callbacks[e] = [n])
                }
                function releasePointerEvent(e, t, n) {
                    if (-1 === pointerEventList.indexOf(e))
                        throw new Error("invalid event type : " + e)
                    var i = findAllActiveEvents(
                            activeEventList,
                            pointerEventMap[e]
                        ),
                        r = eventHandlers.get(t)
                    if (void 0 !== r) {
                        for (var o = 0; o < i.length; o++)
                            if (((e = i[o]), r.callbacks[e])) {
                                if (void 0 !== n) _remove(r.callbacks[e], n)
                                else
                                    for (; r.callbacks[e].length > 0; )
                                        r.callbacks[e].pop()
                                0 === r.callbacks[e].length &&
                                    delete r.callbacks[e]
                            }
                        0 === Object.keys(r.callbacks).length &&
                            eventHandlers.delete(t)
                    }
                }
                function releaseAllPointerEvents(e) {
                    if (eventHandlers.has(e))
                        for (var t = 0; t < pointerEventList.length; t++)
                            this.releasePointerEvent(pointerEventList[t], e)
                }
                var deadzone = 0.1
                function wiredXbox360NormalizeFn(e, t, n) {
                    return n === this.GAMEPAD.BUTTONS.L2 ||
                        n === this.GAMEPAD.BUTTONS.R2
                        ? (e + 1) / 2
                        : e
                }
                function ouyaNormalizeFn(e, t, n) {
                    return e > 0
                        ? n === this.GAMEPAD.BUTTONS.L2
                            ? Math.max(0, e - 2e4) / 111070
                            : (e - 1) / 131070
                        : (65536 + e) / 131070 + 0.5
                }
                var vendorProductRE = /^([0-9a-f]{1,4})-([0-9a-f]{1,4})-/i,
                    leadingZeroRE = /^0+/
                function addMapping(e, t) {
                    var n = e.replace(vendorProductRE, function (e, t, n) {
                            return (
                                "000".substr(t.length - 1) +
                                t +
                                "-" +
                                "000".substr(n.length - 1) +
                                n +
                                "-"
                            )
                        }),
                        i = e.replace(vendorProductRE, function (e, t, n) {
                            return (
                                t.replace(leadingZeroRE, "") +
                                "-" +
                                n.replace(leadingZeroRE, "") +
                                "-"
                            )
                        })
                    ;(t.analog =
                        t.analog ||
                        t.buttons.map(function () {
                            return -1
                        })),
                        (t.normalize_fn =
                            t.normalize_fn ||
                            function (e) {
                                return e
                            }),
                        remap.set(n, t),
                        remap.set(i, t)
                }
                var bindings = {},
                    remap = new Map(),
                    updateEventHandler
                ;[
                    [
                        "45e-28e-Xbox 360 Wired Controller",
                        {
                            axes: [0, 1, 3, 4],
                            buttons: [
                                11, 12, 13, 14, 8, 9, -1, -1, 5, 4, 6, 7, 0, 1,
                                2, 3, 10,
                            ],
                            analog: [
                                -1, -1, -1, -1, -1, -1, 2, 5, -1, -1, -1, -1,
                                -1, -1, -1, -1, -1,
                            ],
                            normalize_fn: wiredXbox360NormalizeFn,
                        },
                    ],
                    [
                        "54c-268-PLAYSTATION(R)3 Controller",
                        {
                            axes: [0, 1, 2, 3],
                            buttons: [
                                14, 13, 15, 12, 10, 11, 8, 9, 0, 3, 1, 2, 4, 6,
                                7, 5, 16,
                            ],
                        },
                    ],
                    [
                        "54c-5c4-Wireless Controller",
                        {
                            axes: [0, 1, 2, 3],
                            buttons: [
                                1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15,
                                16, 17, 12, 13,
                            ],
                        },
                    ],
                    [
                        "2836-1-OUYA Game Controller",
                        {
                            axes: [0, 3, 7, 9],
                            buttons: [
                                3, 6, 4, 5, 7, 8, 15, 16, -1, -1, 9, 10, 11, 12,
                                13, 14, -1,
                            ],
                            analog: [
                                -1, -1, -1, -1, -1, -1, 5, 11, -1, -1, -1, -1,
                                -1, -1, -1, -1, -1,
                            ],
                            normalize_fn: ouyaNormalizeFn,
                        },
                    ],
                    [
                        "OUYA Game Controller (Vendor: 2836 Product: 0001)",
                        {
                            axes: [0, 1, 3, 4],
                            buttons: [
                                0, 3, 1, 2, 4, 5, 12, 13, -1, -1, 6, 7, 8, 9,
                                10, 11, -1,
                            ],
                            analog: [
                                -1, -1, -1, -1, -1, -1, 2, 5, -1, -1, -1, -1,
                                -1, -1, -1, -1, -1,
                            ],
                            normalize_fn: ouyaNormalizeFn,
                        },
                    ],
                ].forEach(function (e) {
                    addMapping(e[0], e[1])
                })
                var updateGamepads = function () {
                    var e = navigator.getGamepads()
                    Object.keys(bindings).forEach(function (t) {
                        var n = e[t]
                        if (n) {
                            var i = null
                            "standard" !== n.mapping && (i = remap.get(n.id))
                            var r = bindings[t]
                            Object.keys(r.buttons).forEach(function (e) {
                                var o = r.buttons[e],
                                    s = e,
                                    a = -1
                                if (
                                    !(
                                        i &&
                                        ((s = i.buttons[e]),
                                        (a = i.analog[e]),
                                        s < 0 && a < 0)
                                    )
                                ) {
                                    var l = n.buttons[s] || {}
                                    if (i && a >= 0) {
                                        var u = i.normalize_fn(
                                            n.axes[a],
                                            -1,
                                            +e
                                        )
                                        l = {
                                            value: u,
                                            pressed:
                                                l.pressed ||
                                                Math.abs(u) >= deadzone,
                                        }
                                    }
                                    emit(GAMEPAD_UPDATE, t, "buttons", +e, l),
                                        !o.pressed && l.pressed
                                            ? triggerKeyEvent(
                                                  o.keyCode,
                                                  !0,
                                                  s + 256
                                              )
                                            : o.pressed &&
                                              !l.pressed &&
                                              triggerKeyEvent(
                                                  o.keyCode,
                                                  !1,
                                                  s + 256
                                              ),
                                        (o.value = l.value),
                                        (o.pressed = l.pressed)
                                }
                            }),
                                Object.keys(r.axes).forEach(function (e) {
                                    var o = r.axes[e],
                                        s = e
                                    if (!(i && (s = i.axes[e]) < 0)) {
                                        var a = n.axes[s]
                                        if (void 0 !== a) {
                                            i && (a = i.normalize_fn(a, +e, -1))
                                            var l = Math.sign(a) || 1
                                            if (0 !== o[l].keyCode) {
                                                var u =
                                                    Math.abs(a) >=
                                                    deadzone +
                                                        Math.abs(o[l].threshold)
                                                emit(
                                                    GAMEPAD_UPDATE,
                                                    t,
                                                    "axes",
                                                    +e,
                                                    a
                                                ),
                                                    !o[l].pressed && u
                                                        ? (o[-l].pressed &&
                                                              (triggerKeyEvent(
                                                                  o[-l].keyCode,
                                                                  !1,
                                                                  s + 256
                                                              ),
                                                              (o[-l].value = 0),
                                                              (o[-l].pressed =
                                                                  !1)),
                                                          triggerKeyEvent(
                                                              o[l].keyCode,
                                                              !0,
                                                              s + 256
                                                          ))
                                                        : (!o[l].pressed &&
                                                              !o[-l].pressed) ||
                                                          u ||
                                                          triggerKeyEvent(
                                                              o[
                                                                  (l = o[l]
                                                                      .pressed
                                                                      ? l
                                                                      : -l)
                                                              ].keyCode,
                                                              !1,
                                                              s + 256
                                                          ),
                                                    (o[l].value = a),
                                                    (o[l].pressed = u)
                                            }
                                        }
                                    }
                                })
                        }
                    })
                }
                window.addEventListener(
                    "gamepadconnected",
                    function (e) {
                        emit(GAMEPAD_CONNECTED, e.gamepad)
                    },
                    !1
                ),
                    window.addEventListener(
                        "gamepaddisconnected",
                        function (e) {
                            emit(GAMEPAD_DISCONNECTED, e.gamepad)
                        },
                        !1
                    )
                var GAMEPAD = {
                    AXES: {
                        LX: 0,
                        LY: 1,
                        RX: 2,
                        RY: 3,
                        EXTRA_1: 4,
                        EXTRA_2: 5,
                        EXTRA_3: 6,
                        EXTRA_4: 7,
                    },
                    BUTTONS: {
                        FACE_1: 0,
                        FACE_2: 1,
                        FACE_3: 2,
                        FACE_4: 3,
                        L1: 4,
                        R1: 5,
                        L2: 6,
                        R2: 7,
                        SELECT: 8,
                        BACK: 8,
                        START: 9,
                        FORWARD: 9,
                        L3: 10,
                        R3: 11,
                        UP: 12,
                        DOWN: 13,
                        LEFT: 14,
                        RIGHT: 15,
                        HOME: 16,
                        EXTRA_1: 17,
                        EXTRA_2: 18,
                        EXTRA_3: 19,
                        EXTRA_4: 20,
                    },
                }
                function bindGamepad(e, t, n) {
                    if (!getBindingKey(n))
                        throw new Error("no action defined for keycode " + n)
                    void 0 === updateEventHandler &&
                        "function" == typeof navigator.getGamepads &&
                        (updateEventHandler = on(
                            GAME_BEFORE_UPDATE,
                            updateGamepads
                        )),
                        bindings[e] || (bindings[e] = { axes: {}, buttons: {} })
                    var i = {
                            keyCode: n,
                            value: 0,
                            pressed: !1,
                            threshold: t.threshold,
                        },
                        r = bindings[e][t.type]
                    if ("buttons" === t.type) r[t.code] = i
                    else if ("axes" === t.type) {
                        var o = Math.sign(t.threshold) || 1
                        r[t.code] || (r[t.code] = {})
                        var s = r[t.code]
                        ;(s[o] = i),
                            s[-o] ||
                                (s[-o] = {
                                    keyCode: 0,
                                    value: 0,
                                    pressed: !1,
                                    threshold: -o,
                                })
                    }
                }
                function unbindGamepad(e, t) {
                    if (!bindings[e])
                        throw new Error("no bindings for gamepad " + e)
                    bindings[e].buttons[t] = {}
                }
                function setGamepadDeadzone(e) {
                    deadzone = e
                }
                for (
                    var setGamepadMapping = addMapping,
                        preventDefault = !0,
                        input = Object.freeze({
                            __proto__: null,
                            preventDefault,
                            get pointerEventTarget() {
                                return pointerEventTarget
                            },
                            pointer,
                            get throttlingInterval() {
                                return throttlingInterval
                            },
                            globalToLocal,
                            setTouchAction,
                            bindPointer,
                            unbindPointer,
                            registerPointerEvent,
                            releasePointerEvent,
                            releaseAllPointerEvents,
                            get keyBoardEventTarget() {
                                return keyBoardEventTarget
                            },
                            KEY,
                            initKeyboardEvent,
                            isKeyPressed,
                            keyStatus,
                            triggerKeyEvent,
                            bindKey,
                            getBindingKey,
                            unlockKey,
                            unbindKey,
                            GAMEPAD,
                            bindGamepad,
                            unbindGamepad,
                            setGamepadDeadzone,
                            setGamepadMapping,
                        }),
                        Renderable = (function (e) {
                            _inherits(n, e)
                            var t = _createSuper(n)
                            function n(e, i, r, o) {
                                var s
                                return (
                                    _classCallCheck(this, n),
                                    ((s = t.call(
                                        this,
                                        e,
                                        i,
                                        r,
                                        o
                                    )).isRenderable = !0),
                                    (s.isKinematic = !0),
                                    (s.body = void 0),
                                    void 0 === s.currentTransform &&
                                        (s.currentTransform =
                                            pool.pull("Matrix2d")),
                                    s.currentTransform.identity(),
                                    (s.GUID = void 0),
                                    (s.onVisibilityChange = void 0),
                                    (s.alwaysUpdate = !1),
                                    (s.updateWhenPaused = !1),
                                    (s.isPersistent = !1),
                                    (s.floating = !1),
                                    s.anchorPoint instanceof ObservableVector2d
                                        ? s.anchorPoint
                                              .setMuted(0.5, 0.5)
                                              .setCallback(
                                                  s.onAnchorUpdate,
                                                  _assertThisInitialized(s)
                                              )
                                        : (s.anchorPoint = pool.pull(
                                              "ObservableVector2d",
                                              0.5,
                                              0.5,
                                              {
                                                  onUpdate: s.onAnchorUpdate,
                                                  scope: _assertThisInitialized(
                                                      s
                                                  ),
                                              }
                                          )),
                                    (s.autoTransform = !0),
                                    (s.alpha = 1),
                                    (s.ancestor = void 0),
                                    (s.mask = void 0),
                                    (s.tint = pool.pull(
                                        "Color",
                                        255,
                                        255,
                                        255,
                                        1
                                    )),
                                    (s.name = ""),
                                    s.pos instanceof ObservableVector3d
                                        ? s.pos
                                              .setMuted(e, i, 0)
                                              .setCallback(
                                                  s.updateBoundsPos,
                                                  _assertThisInitialized(s)
                                              )
                                        : (s.pos = pool.pull(
                                              "ObservableVector3d",
                                              e,
                                              i,
                                              0,
                                              {
                                                  onUpdate: s.updateBoundsPos,
                                                  scope: _assertThisInitialized(
                                                      s
                                                  ),
                                              }
                                          )),
                                    (s.isDirty = !1),
                                    (s._flip = { x: !1, y: !1 }),
                                    (s._inViewport = !1),
                                    s.setOpacity(1),
                                    s
                                )
                            }
                            return (
                                _createClass(n, [
                                    {
                                        key: "isFloating",
                                        get: function () {
                                            return (
                                                !0 === this.floating ||
                                                (void 0 !== this.ancestor &&
                                                    !0 ===
                                                        this.ancestor.floating)
                                            )
                                        },
                                    },
                                    {
                                        key: "inViewport",
                                        get: function () {
                                            return this._inViewport
                                        },
                                        set: function (e) {
                                            this._inViewport !== e &&
                                                ((this._inViewport = e),
                                                "function" ==
                                                    typeof this
                                                        .onVisibilityChange &&
                                                    this.onVisibilityChange.call(
                                                        this,
                                                        e
                                                    ))
                                        },
                                    },
                                    {
                                        key: "isFlippedX",
                                        get: function () {
                                            return !0 === this._flip.x
                                        },
                                    },
                                    {
                                        key: "isFlippedY",
                                        get: function () {
                                            return !0 === this._flip.y
                                        },
                                    },
                                    {
                                        key: "getBounds",
                                        value: function () {
                                            return (
                                                void 0 === this._bounds &&
                                                    (_get(
                                                        _getPrototypeOf(
                                                            n.prototype
                                                        ),
                                                        "getBounds",
                                                        this
                                                    ).call(this),
                                                    this.isFinite()
                                                        ? this._bounds.setMinMax(
                                                              this.pos.x,
                                                              this.pos.y,
                                                              this.pos.x +
                                                                  this.width,
                                                              this.pos.y +
                                                                  this.height
                                                          )
                                                        : this._bounds.setMinMax(
                                                              this.pos.x,
                                                              this.pos.y,
                                                              this.width,
                                                              this.height
                                                          )),
                                                this._bounds
                                            )
                                        },
                                    },
                                    {
                                        key: "getOpacity",
                                        value: function () {
                                            return this.alpha
                                        },
                                    },
                                    {
                                        key: "setOpacity",
                                        value: function (e) {
                                            "number" == typeof e &&
                                                ((this.alpha = _clamp(e, 0, 1)),
                                                isNaN(this.alpha) &&
                                                    (this.alpha = 1),
                                                (this.isDirty = !0))
                                        },
                                    },
                                    {
                                        key: "flipX",
                                        value: function () {
                                            var e =
                                                !(
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                ) || arguments[0]
                                            return (
                                                (this._flip.x = !!e),
                                                (this.isDirty = !0),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "flipY",
                                        value: function () {
                                            var e =
                                                !(
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                ) || arguments[0]
                                            return (
                                                (this._flip.y = !!e),
                                                (this.isDirty = !0),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "transform",
                                        value: function (e) {
                                            return (
                                                this.currentTransform.multiply(
                                                    e
                                                ),
                                                this.updateBoundsPos(
                                                    this.pos.x,
                                                    this.pos.y
                                                ),
                                                (this.isDirty = !0),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "angleTo",
                                        value: function (e) {
                                            var t,
                                                i,
                                                r = this.getBounds()
                                            if (e instanceof n) {
                                                var o = e.getBounds()
                                                ;(t = o.centerX - r.centerX),
                                                    (i = o.centerY - r.centerY)
                                            } else
                                                (t = e.x - r.centerX),
                                                    (i = e.y - r.centerY)
                                            return Math.atan2(i, t)
                                        },
                                    },
                                    {
                                        key: "distanceTo",
                                        value: function (e) {
                                            var t,
                                                i,
                                                r = this.getBounds()
                                            if (e instanceof n) {
                                                var o = e.getBounds()
                                                ;(t = r.centerX - o.centerX),
                                                    (i = r.centerY - o.centerY)
                                            } else
                                                (t = r.centerX - e.x),
                                                    (i = r.centerY - e.y)
                                            return Math.sqrt(t * t + i * i)
                                        },
                                    },
                                    {
                                        key: "lookAt",
                                        value: function (e) {
                                            var t
                                            t = e instanceof n ? e.pos : e
                                            var i = this.angleTo(t)
                                            return this.rotate(i), this
                                        },
                                    },
                                    {
                                        key: "rotate",
                                        value: function (e, t) {
                                            return (
                                                isNaN(e) ||
                                                    (this.currentTransform.rotate(
                                                        e,
                                                        t
                                                    ),
                                                    (this.isDirty = !0)),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "scale",
                                        value: function (e, t) {
                                            return (
                                                this.currentTransform.scale(
                                                    e,
                                                    t
                                                ),
                                                _get(
                                                    _getPrototypeOf(
                                                        n.prototype
                                                    ),
                                                    "scale",
                                                    this
                                                ).call(this, e, t),
                                                (this.isDirty = !0),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "scaleV",
                                        value: function (e) {
                                            return this.scale(e.x, e.y), this
                                        },
                                    },
                                    {
                                        key: "update",
                                        value: function () {
                                            return this.isDirty
                                        },
                                    },
                                    {
                                        key: "updateBounds",
                                        value: function () {
                                            return (
                                                _get(
                                                    _getPrototypeOf(
                                                        n.prototype
                                                    ),
                                                    "updateBounds",
                                                    this
                                                ).call(this),
                                                this.updateBoundsPos(
                                                    this.pos.x,
                                                    this.pos.y
                                                ),
                                                this.getBounds()
                                            )
                                        },
                                    },
                                    {
                                        key: "updateBoundsPos",
                                        value: function (e, t) {
                                            var n = this.getBounds()
                                            n.shift(e, t),
                                                void 0 !== this.anchorPoint &&
                                                    n.isFinite() &&
                                                    n.translate(
                                                        -this.anchorPoint.x *
                                                            n.width,
                                                        -this.anchorPoint.y *
                                                            n.height
                                                    ),
                                                this.ancestor instanceof
                                                    Container &&
                                                    !0 !== this.floating &&
                                                    n.translate(
                                                        this.ancestor.getAbsolutePosition()
                                                    )
                                        },
                                    },
                                    {
                                        key: "getAbsolutePosition",
                                        value: function () {
                                            return (
                                                void 0 === this._absPos &&
                                                    (this._absPos =
                                                        pool.pull("Vector2d")),
                                                this._absPos.set(
                                                    this.pos.x,
                                                    this.pos.y
                                                ),
                                                this.ancestor instanceof
                                                    Container &&
                                                    !0 !== this.floating &&
                                                    this._absPos.add(
                                                        this.ancestor.getAbsolutePosition()
                                                    ),
                                                this._absPos
                                            )
                                        },
                                    },
                                    {
                                        key: "onAnchorUpdate",
                                        value: function (e, t) {
                                            this.anchorPoint.setMuted(e, t),
                                                this.updateBoundsPos(
                                                    this.pos.x,
                                                    this.pos.y
                                                )
                                        },
                                    },
                                    {
                                        key: "preDraw",
                                        value: function (e) {
                                            var t = this.getBounds(),
                                                n =
                                                    t.width *
                                                    this.anchorPoint.x,
                                                i =
                                                    t.height *
                                                    this.anchorPoint.y
                                            if (
                                                (e.save(),
                                                e.setGlobalAlpha(
                                                    e.globalAlpha() *
                                                        this.getOpacity()
                                                ),
                                                this._flip.x || this._flip.y)
                                            ) {
                                                var r = this._flip.x
                                                        ? this.centerX - n
                                                        : 0,
                                                    o = this._flip.y
                                                        ? this.centerY - i
                                                        : 0
                                                e.translate(r, o),
                                                    e.scale(
                                                        this._flip.x ? -1 : 1,
                                                        this._flip.y ? -1 : 1
                                                    ),
                                                    e.translate(-r, -o)
                                            }
                                            void 0 !== this.mask &&
                                                (e.translate(
                                                    this.pos.x,
                                                    this.pos.y
                                                ),
                                                e.setMask(this.mask),
                                                e.translate(
                                                    -this.pos.x,
                                                    -this.pos.y
                                                )),
                                                !0 !== this.autoTransform ||
                                                    this.currentTransform.isIdentity() ||
                                                    (e.translate(
                                                        this.pos.x,
                                                        this.pos.y
                                                    ),
                                                    e.transform(
                                                        this.currentTransform
                                                    ),
                                                    e.translate(
                                                        -this.pos.x,
                                                        -this.pos.y
                                                    )),
                                                e.translate(-n, -i),
                                                e.setTint(
                                                    this.tint,
                                                    this.getOpacity()
                                                )
                                        },
                                    },
                                    { key: "draw", value: function () {} },
                                    {
                                        key: "postDraw",
                                        value: function (e) {
                                            e.clearTint(),
                                                void 0 !== this.mask &&
                                                    e.clearMask(),
                                                e.restore(),
                                                (this.isDirty = !1)
                                        },
                                    },
                                    {
                                        key: "onCollision",
                                        value: function () {
                                            return !1
                                        },
                                    },
                                    {
                                        key: "destroy",
                                        value: function () {
                                            pool.push(this.currentTransform),
                                                (this.currentTransform =
                                                    void 0),
                                                pool.push(this.anchorPoint),
                                                (this.anchorPoint = void 0),
                                                pool.push(this.pos),
                                                (this.pos = void 0),
                                                void 0 !== this._absPos &&
                                                    (pool.push(this._absPos),
                                                    (this._absPos = void 0)),
                                                pool.push(this._bounds),
                                                (this._bounds = void 0),
                                                (this.onVisibilityChange =
                                                    void 0),
                                                void 0 !== this.mask &&
                                                    (pool.push(this.mask),
                                                    (this.mask = void 0)),
                                                void 0 !== this.tint &&
                                                    (pool.push(this.tint),
                                                    (this.tint = void 0)),
                                                (this.ancestor = void 0),
                                                void 0 !== this.body &&
                                                    (this.body.destroy.apply(
                                                        this.body,
                                                        arguments
                                                    ),
                                                    (this.body = void 0)),
                                                releaseAllPointerEvents(this),
                                                this.onDestroyEvent.apply(
                                                    this,
                                                    arguments
                                                )
                                        },
                                    },
                                    {
                                        key: "onDestroyEvent",
                                        value: function () {},
                                    },
                                ]),
                                n
                            )
                        })(Rect),
                        Ellipse = (function () {
                            function e(t, n, i, r) {
                                _classCallCheck(this, e),
                                    (this.pos = new Vector2d()),
                                    (this._bounds = void 0),
                                    (this.radius = NaN),
                                    (this.radiusV = new Vector2d()),
                                    (this.radiusSq = new Vector2d()),
                                    (this.ratio = new Vector2d()),
                                    (this.shapeType = "Ellipse"),
                                    this.setShape(t, n, i, r)
                            }
                            return (
                                _createClass(e, [
                                    {
                                        key: "onResetEvent",
                                        value: function (e, t, n, i) {
                                            this.setShape(e, t, n, i)
                                        },
                                    },
                                    {
                                        key: "setShape",
                                        value: function (e, t, n, i) {
                                            var r = n / 2,
                                                o = i / 2
                                            this.pos.set(e, t),
                                                (this.radius = Math.max(r, o)),
                                                this.ratio.set(
                                                    r / this.radius,
                                                    o / this.radius
                                                ),
                                                this.radiusV
                                                    .set(
                                                        this.radius,
                                                        this.radius
                                                    )
                                                    .scaleV(this.ratio)
                                            var s = this.radius * this.radius
                                            return (
                                                this.radiusSq
                                                    .set(s, s)
                                                    .scaleV(this.ratio),
                                                this.getBounds().setMinMax(
                                                    e,
                                                    t,
                                                    e + n,
                                                    e + i
                                                ),
                                                this.getBounds().translate(
                                                    -this.radiusV.x,
                                                    -this.radiusV.y
                                                ),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "rotate",
                                        value: function (e, t) {
                                            return (
                                                this.pos.rotate(e, t),
                                                this.getBounds().shift(
                                                    this.pos
                                                ),
                                                this.getBounds().translate(
                                                    -this.radiusV.x,
                                                    -this.radiusV.y
                                                ),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "scale",
                                        value: function (e, t) {
                                            return (
                                                (t = void 0 !== t ? t : e),
                                                this.setShape(
                                                    this.pos.x,
                                                    this.pos.y,
                                                    2 * this.radiusV.x * e,
                                                    2 * this.radiusV.y * t
                                                )
                                            )
                                        },
                                    },
                                    {
                                        key: "scaleV",
                                        value: function (e) {
                                            return this.scale(e.x, e.y)
                                        },
                                    },
                                    {
                                        key: "transform",
                                        value: function () {
                                            return this
                                        },
                                    },
                                    {
                                        key: "translate",
                                        value: function () {
                                            var e, t
                                            return (
                                                2 === arguments.length
                                                    ? ((e = arguments[0]),
                                                      (t = arguments[1]))
                                                    : ((e = arguments[0].x),
                                                      (t = arguments[0].y)),
                                                (this.pos.x += e),
                                                (this.pos.y += t),
                                                this.getBounds().translate(
                                                    e,
                                                    t
                                                ),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "contains",
                                        value: function () {
                                            var e, t
                                            return (
                                                2 === arguments.length
                                                    ? ((e = arguments[0]),
                                                      (t = arguments[1]))
                                                    : ((e = arguments[0].x),
                                                      (t = arguments[0].y)),
                                                (e -= this.pos.x),
                                                (t -= this.pos.y),
                                                (e * e) / this.radiusSq.x +
                                                    (t * t) / this.radiusSq.y <=
                                                    1
                                            )
                                        },
                                    },
                                    {
                                        key: "getBounds",
                                        value: function () {
                                            return (
                                                void 0 === this._bounds &&
                                                    (this._bounds =
                                                        pool.pull("Bounds")),
                                                this._bounds
                                            )
                                        },
                                    },
                                    {
                                        key: "clone",
                                        value: function () {
                                            return new e(
                                                this.pos.x,
                                                this.pos.y,
                                                2 * this.radiusV.x,
                                                2 * this.radiusV.y
                                            )
                                        },
                                    },
                                ]),
                                e
                            )
                        })(),
                        LEFT_VORNOI_REGION = -1,
                        MIDDLE_VORNOI_REGION = 0,
                        RIGHT_VORNOI_REGION = 1,
                        T_VECTORS = [],
                        v = 0;
                    v < 10;
                    v++
                )
                    T_VECTORS.push(new Vector2d())
                for (var T_ARRAYS = [], a = 0; a < 5; a++) T_ARRAYS.push([])
                function flattenPointsOn(e, t, n) {
                    for (
                        var i = Number.MAX_VALUE,
                            r = -Number.MAX_VALUE,
                            o = e.length,
                            s = 0;
                        s < o;
                        s++
                    ) {
                        var a = e[s].dotProduct(t)
                        a < i && (i = a), a > r && (r = a)
                    }
                    ;(n[0] = i), (n[1] = r)
                }
                function isSeparatingAxis(e, t, n, i, r, o) {
                    var s = T_ARRAYS.pop(),
                        a = T_ARRAYS.pop(),
                        l = T_VECTORS.pop().copy(t).sub(e),
                        u = l.dotProduct(r)
                    if (
                        (flattenPointsOn(n, r, s),
                        flattenPointsOn(i, r, a),
                        (a[0] += u),
                        (a[1] += u),
                        s[0] > a[1] || a[0] > s[1])
                    )
                        return (
                            T_VECTORS.push(l),
                            T_ARRAYS.push(s),
                            T_ARRAYS.push(a),
                            !0
                        )
                    if (o) {
                        var h = 0
                        if (s[0] < a[0])
                            if (((o.aInB = !1), s[1] < a[1]))
                                (h = s[1] - a[0]), (o.bInA = !1)
                            else {
                                var c = s[1] - a[0],
                                    d = a[1] - s[0]
                                h = c < d ? c : -d
                            }
                        else if (((o.bInA = !1), s[1] > a[1]))
                            (h = s[0] - a[1]), (o.aInB = !1)
                        else {
                            var f = s[1] - a[0],
                                p = a[1] - s[0]
                            h = f < p ? f : -p
                        }
                        var v = Math.abs(h)
                        v < o.overlap &&
                            ((o.overlap = v),
                            o.overlapN.copy(r),
                            h < 0 && o.overlapN.negateSelf())
                    }
                    return (
                        T_VECTORS.push(l),
                        T_ARRAYS.push(s),
                        T_ARRAYS.push(a),
                        !1
                    )
                }
                function vornoiRegion(e, t) {
                    var n = e.length2(),
                        i = t.dotProduct(e)
                    return i < 0
                        ? LEFT_VORNOI_REGION
                        : i > n
                        ? RIGHT_VORNOI_REGION
                        : MIDDLE_VORNOI_REGION
                }
                function testPolygonPolygon(e, t, n, i, r) {
                    var o,
                        s = t.points,
                        a = t.normals,
                        l = a.length,
                        u = i.points,
                        h = i.normals,
                        c = h.length,
                        d = T_VECTORS.pop()
                            .copy(e.pos)
                            .add(e.ancestor.getAbsolutePosition())
                            .add(t.pos),
                        f = T_VECTORS.pop()
                            .copy(n.pos)
                            .add(n.ancestor.getAbsolutePosition())
                            .add(i.pos)
                    for (o = 0; o < l; o++)
                        if (isSeparatingAxis(d, f, s, u, a[o], r))
                            return T_VECTORS.push(d), T_VECTORS.push(f), !1
                    for (o = 0; o < c; o++)
                        if (isSeparatingAxis(d, f, s, u, h[o], r))
                            return T_VECTORS.push(d), T_VECTORS.push(f), !1
                    return (
                        r &&
                            ((r.a = e),
                            (r.b = n),
                            r.overlapV.copy(r.overlapN).scale(r.overlap)),
                        T_VECTORS.push(d),
                        T_VECTORS.push(f),
                        !0
                    )
                }
                function testEllipseEllipse(e, t, n, i, r) {
                    var o = T_VECTORS.pop()
                            .copy(n.pos)
                            .add(n.ancestor.getAbsolutePosition())
                            .add(i.pos)
                            .sub(e.pos)
                            .add(e.ancestor.getAbsolutePosition())
                            .sub(t.pos),
                        s = t.radius,
                        a = i.radius,
                        l = s + a,
                        u = l * l,
                        h = o.length2()
                    if (h > u) return T_VECTORS.push(o), !1
                    if (r) {
                        var c = Math.sqrt(h)
                        ;(r.a = e),
                            (r.b = n),
                            (r.overlap = l - c),
                            r.overlapN.copy(o.normalize()),
                            r.overlapV.copy(o).scale(r.overlap),
                            (r.aInB = s <= a && c <= a - s),
                            (r.bInA = a <= s && c <= s - a)
                    }
                    return T_VECTORS.push(o), !0
                }
                function testPolygonEllipse(e, t, n, i, r) {
                    for (
                        var o = T_VECTORS.pop()
                                .copy(n.pos)
                                .add(n.ancestor.getAbsolutePosition())
                                .add(i.pos)
                                .sub(e.pos)
                                .add(e.ancestor.getAbsolutePosition())
                                .sub(t.pos),
                            s = i.radius,
                            a = s * s,
                            l = t.points,
                            u = t.edges,
                            h = u.length,
                            c = T_VECTORS.pop(),
                            d = T_VECTORS.pop(),
                            f = T_VECTORS.pop(),
                            p = 0,
                            v = 0;
                        v < h;
                        v++
                    ) {
                        var g = v === h - 1 ? 0 : v + 1,
                            y = 0 === v ? h - 1 : v - 1,
                            _ = 0,
                            m = null
                        c.copy(u[v]),
                            f.copy(o).sub(l[v]),
                            r && f.length2() > a && (r.aInB = !1)
                        var x = vornoiRegion(c, f),
                            w = !0
                        if (x === LEFT_VORNOI_REGION) {
                            var b = null
                            if (
                                (h > 1 &&
                                    (c.copy(u[y]),
                                    (x = vornoiRegion(
                                        c,
                                        (b = T_VECTORS.pop().copy(o).sub(l[y]))
                                    )) !== RIGHT_VORNOI_REGION && (w = !1)),
                                w)
                            ) {
                                if ((p = f.length()) > s)
                                    return (
                                        T_VECTORS.push(o),
                                        T_VECTORS.push(c),
                                        T_VECTORS.push(d),
                                        T_VECTORS.push(f),
                                        b && T_VECTORS.push(b),
                                        !1
                                    )
                                r &&
                                    ((r.bInA = !1),
                                    (m = f.normalize()),
                                    (_ = s - p))
                            }
                            b && T_VECTORS.push(b)
                        } else if (x === RIGHT_VORNOI_REGION) {
                            if (
                                (h > 1 &&
                                    (c.copy(u[g]),
                                    f.copy(o).sub(l[g]),
                                    (x = vornoiRegion(c, f)) !==
                                        LEFT_VORNOI_REGION && (w = !1)),
                                w)
                            ) {
                                if ((p = f.length()) > s)
                                    return (
                                        T_VECTORS.push(o),
                                        T_VECTORS.push(c),
                                        T_VECTORS.push(d),
                                        T_VECTORS.push(f),
                                        !1
                                    )
                                r &&
                                    ((r.bInA = !1),
                                    (m = f.normalize()),
                                    (_ = s - p))
                            }
                        } else {
                            d.copy(t.normals[v]), (p = f.dotProduct(d))
                            var E = Math.abs(p)
                            if ((1 === h || p > 0) && E > s)
                                return (
                                    T_VECTORS.push(o),
                                    T_VECTORS.push(c),
                                    T_VECTORS.push(d),
                                    T_VECTORS.push(f),
                                    !1
                                )
                            r &&
                                ((m = d),
                                (_ = s - p),
                                (p >= 0 || _ < 2 * s) && (r.bInA = !1))
                        }
                        m &&
                            r &&
                            Math.abs(_) < Math.abs(r.overlap) &&
                            ((r.overlap = _), r.overlapN.copy(m))
                    }
                    return (
                        r &&
                            ((r.a = e),
                            (r.b = n),
                            r.overlapV.copy(r.overlapN).scale(r.overlap)),
                        T_VECTORS.push(o),
                        T_VECTORS.push(c),
                        T_VECTORS.push(d),
                        T_VECTORS.push(f),
                        !0
                    )
                }
                function testEllipsePolygon(e, t, n, i, r) {
                    var o = this.testPolygonEllipse(n, i, e, t, r)
                    if (o && r) {
                        var s = r.a,
                            a = r.aInB
                        r.overlapN.negateSelf(),
                            r.overlapV.negateSelf(),
                            (r.a = r.b),
                            (r.b = s),
                            (r.aInB = r.bInA),
                            (r.bInA = a)
                    }
                    return o
                }
                var SAT = Object.freeze({
                        __proto__: null,
                        testPolygonPolygon,
                        testEllipseEllipse,
                        testPolygonEllipse,
                        testEllipsePolygon,
                    }),
                    dummyObj = {
                        pos: new Vector2d(0, 0),
                        ancestor: {
                            _absPos: new Vector2d(0, 0),
                            getAbsolutePosition: function () {
                                return this._absPos
                            },
                        },
                    }
                function shouldCollide(e, t) {
                    return (
                        !0 !== e.isKinematic &&
                        !0 !== t.isKinematic &&
                        e.body &&
                        t.body &&
                        0 != (e.body.collisionMask & t.body.collisionType) &&
                        0 != (e.body.collisionType & t.body.collisionMask)
                    )
                }
                var ResponseObject = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                (this.a = null),
                                (this.b = null),
                                (this.overlapN = new Vector2d()),
                                (this.overlapV = new Vector2d()),
                                (this.aInB = !0),
                                (this.bInA = !0),
                                (this.indexShapeA = -1),
                                (this.indexShapeB = -1),
                                (this.overlap = Number.MAX_VALUE)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "clear",
                                    value: function () {
                                        return (
                                            (this.aInB = !0),
                                            (this.bInA = !0),
                                            (this.overlap = Number.MAX_VALUE),
                                            (this.indexShapeA = -1),
                                            (this.indexShapeB = -1),
                                            this
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    globalResponse = new ResponseObject()
                function collisionCheck(e) {
                    for (
                        var t,
                            n =
                                arguments.length > 1 && void 0 !== arguments[1]
                                    ? arguments[1]
                                    : globalResponse,
                            i = 0,
                            r = world.broadphase.retrieve(e),
                            o = r.length;
                        (t = r[--o]);

                    )
                        if (
                            t !== e &&
                            shouldCollide(e, t) &&
                            e.body.getBounds().overlaps(t.body.getBounds())
                        ) {
                            var s = e.body.shapes.length,
                                a = t.body.shapes.length
                            if (0 === s || 0 === a) continue
                            var l = 0
                            do {
                                var u = e.body.getShape(l),
                                    h = 0
                                do {
                                    var c = t.body.getShape(h)
                                    !0 ===
                                        SAT[
                                            "test" + u.shapeType + c.shapeType
                                        ].call(this, e, u, t, c, n.clear()) &&
                                        (i++,
                                        (n.indexShapeA = l),
                                        (n.indexShapeB = h),
                                        e.onCollision &&
                                            !1 !== e.onCollision(n, t) &&
                                            e.body.respondToCollision.call(
                                                e.body,
                                                n
                                            ),
                                        t.onCollision &&
                                            !1 !== t.onCollision(n, e) &&
                                            t.body.respondToCollision.call(
                                                t.body,
                                                n
                                            )),
                                        h++
                                } while (h < a)
                                l++
                            } while (l < s)
                        }
                    return i > 0
                }
                function _rayCast(e) {
                    for (
                        var t,
                            n =
                                arguments.length > 1 && void 0 !== arguments[1]
                                    ? arguments[1]
                                    : [],
                            i = 0,
                            r = world.broadphase.retrieve(e),
                            o = r.length;
                        (t = r[--o]);

                    )
                        if (t.body && e.getBounds().overlaps(t.getBounds())) {
                            var s = t.body.shapes.length
                            if (0 === t.body.shapes.length) continue
                            var a = e,
                                l = 0
                            do {
                                var u = t.body.getShape(l)
                                SAT["test" + a.shapeType + u.shapeType].call(
                                    this,
                                    dummyObj,
                                    a,
                                    t,
                                    u
                                ) && ((n[i] = t), i++),
                                    l++
                            } while (l < s)
                        }
                    return (n.length = i), n
                }
                var collision = {
                        maxChildren: 8,
                        maxDepth: 4,
                        types: {
                            NO_OBJECT: 0,
                            PLAYER_OBJECT: 1,
                            NPC_OBJECT: 2,
                            ENEMY_OBJECT: 4,
                            COLLECTABLE_OBJECT: 8,
                            ACTION_OBJECT: 16,
                            PROJECTILE_OBJECT: 32,
                            WORLD_SHAPE: 64,
                            USER: 128,
                            ALL_OBJECT: 4294967295,
                        },
                        response: globalResponse,
                        rayCast: function (e, t) {
                            return _rayCast(e, t)
                        },
                    },
                    Body = (function () {
                        function e(t, n, i) {
                            if (
                                (_classCallCheck(this, e),
                                (this.ancestor = t),
                                void 0 === this.bounds &&
                                    (this.bounds = new Bounds$1()),
                                void 0 === this.shapes && (this.shapes = []),
                                (this.collisionMask =
                                    collision.types.ALL_OBJECT),
                                (this.collisionType =
                                    collision.types.ENEMY_OBJECT),
                                void 0 === this.vel &&
                                    (this.vel = new Vector2d()),
                                this.vel.set(0, 0),
                                void 0 === this.force &&
                                    (this.force = new Vector2d()),
                                this.force.set(0, 0),
                                void 0 === this.friction &&
                                    (this.friction = new Vector2d()),
                                this.friction.set(0, 0),
                                (this.bounce = 0),
                                (this.mass = 1),
                                void 0 === this.maxVel &&
                                    (this.maxVel = new Vector2d()),
                                this.maxVel.set(490, 490),
                                (this.isStatic = !1),
                                (this.gravityScale = 1),
                                (this.ignoreGravity = !1),
                                (this.falling = !1),
                                (this.jumping = !1),
                                "function" == typeof i &&
                                    (this.onBodyUpdate = i),
                                this.bounds.clear(),
                                void 0 !== n)
                            )
                                if (Array.isArray(n))
                                    for (var r = 0; r < n.length; r++)
                                        this.addShape(n[r])
                                else this.addShape(n)
                            this.ancestor.isKinematic = !1
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "setStatic",
                                    value: function () {
                                        var e =
                                            !(
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                            ) || arguments[0]
                                        this.isStatic = !0 === e
                                    },
                                },
                                {
                                    key: "addShape",
                                    value: function (e) {
                                        if (
                                            e instanceof Rect ||
                                            e instanceof Bounds$1
                                        ) {
                                            var t = e.toPolygon()
                                            this.shapes.push(t),
                                                this.bounds.add(t.points),
                                                this.bounds.translate(t.pos)
                                        } else
                                            e instanceof Ellipse
                                                ? (this.shapes.includes(e) ||
                                                      this.shapes.push(e),
                                                  this.bounds.addBounds(
                                                      e.getBounds()
                                                  ),
                                                  this.bounds.translate(
                                                      e.getBounds().x,
                                                      e.getBounds().y
                                                  ))
                                                : e instanceof Polygon
                                                ? (this.shapes.includes(e) ||
                                                      this.shapes.push(e),
                                                  this.bounds.add(e.points),
                                                  this.bounds.translate(e.pos))
                                                : this.fromJSON(e)
                                        return (
                                            "function" ==
                                                typeof this.onBodyUpdate &&
                                                this.onBodyUpdate(this),
                                            this.shapes.length
                                        )
                                    },
                                },
                                {
                                    key: "setVertices",
                                    value: function (e) {
                                        var t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0,
                                            n =
                                                !(
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                ) || arguments[2],
                                            i = this.getShape(t)
                                        i instanceof Polygon
                                            ? i.setShape(0, 0, e)
                                            : (this.shapes[t] = new Polygon(
                                                  0,
                                                  0,
                                                  e
                                              )),
                                            this.bounds.add(
                                                this.shapes[t].points,
                                                n
                                            ),
                                            "function" ==
                                                typeof this.onBodyUpdate &&
                                                this.onBodyUpdate(this)
                                    },
                                },
                                {
                                    key: "addVertices",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : 0
                                        this.setVertices(e, t, !1)
                                    },
                                },
                                {
                                    key: "fromJSON",
                                    value: function (e, t) {
                                        var n = e
                                        if (
                                            (void 0 !== t && (n = e[t]),
                                            void 0 === n)
                                        )
                                            throw new Error(
                                                "Identifier (" +
                                                    t +
                                                    ") undefined for the given JSON object)"
                                            )
                                        if (n.length) {
                                            for (var i = 0; i < n.length; i++)
                                                this.addVertices(n[i].shape, i)
                                            ;(this.mass = n[0].density || 0),
                                                this.friction.set(
                                                    n[0].friction || 0,
                                                    n[0].friction || 0
                                                ),
                                                (this.bounce = n[0].bounce || 0)
                                        }
                                        return n.length
                                    },
                                },
                                {
                                    key: "getShape",
                                    value: function (e) {
                                        return this.shapes[e || 0]
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function () {
                                        return this.bounds
                                    },
                                },
                                {
                                    key: "removeShape",
                                    value: function (e) {
                                        this.bounds.clear(),
                                            _remove(this.shapes, e)
                                        for (
                                            var t = 0;
                                            t < this.shapes.length;
                                            t++
                                        )
                                            this.addShape(this.shapes[t])
                                        return this.shapes.length
                                    },
                                },
                                {
                                    key: "removeShapeAt",
                                    value: function (e) {
                                        return this.removeShape(
                                            this.getShape(e)
                                        )
                                    },
                                },
                                {
                                    key: "setCollisionMask",
                                    value: function () {
                                        var e =
                                            arguments.length > 0 &&
                                            void 0 !== arguments[0]
                                                ? arguments[0]
                                                : collision.types.ALL_OBJECT
                                        this.collisionMask = e
                                    },
                                },
                                {
                                    key: "setCollisionType",
                                    value: function (e) {
                                        if (void 0 !== e) {
                                            if (void 0 === collision.types[e])
                                                throw new Error(
                                                    "Invalid value for the collisionType property"
                                                )
                                            this.collisionType =
                                                collision.types[e]
                                        }
                                    },
                                },
                                {
                                    key: "respondToCollision",
                                    value: function (e) {
                                        var t = e.overlapV
                                        if (
                                            (this.ancestor.pos.sub(t),
                                            0 !== t.x &&
                                                ((this.vel.x =
                                                    ~~(
                                                        0.5 +
                                                        this.vel.x -
                                                        t.x
                                                    ) || 0),
                                                this.bounce > 0 &&
                                                    (this.vel.x *=
                                                        -this.bounce)),
                                            0 !== t.y)
                                        ) {
                                            ;(this.vel.y =
                                                ~~(0.5 + this.vel.y - t.y) ||
                                                0),
                                                this.bounce > 0 &&
                                                    (this.vel.y *= -this.bounce)
                                            var n =
                                                Math.sign(
                                                    world.gravity.y *
                                                        this.gravityScale
                                                ) || 1
                                            ;(this.falling = t.y >= n),
                                                (this.jumping = t.y <= -n)
                                        }
                                    },
                                },
                                {
                                    key: "forEach",
                                    value: function (e, t) {
                                        var n = this,
                                            i = 0,
                                            r = this.shapes,
                                            o = r.length
                                        if ("function" != typeof e)
                                            throw new Error(
                                                e + " is not a function"
                                            )
                                        for (
                                            arguments.length > 1 && (n = t);
                                            i < o;

                                        )
                                            e.call(n, r[i], i, r), i++
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function () {
                                        var e, t
                                        if (
                                            (2 === arguments.length
                                                ? ((e = arguments[0]),
                                                  (t = arguments[1]))
                                                : ((e = arguments[0].x),
                                                  (t = arguments[0].y)),
                                            this.getBounds().contains(e, t))
                                        )
                                            for (
                                                var n, i = this.shapes.length;
                                                i--, (n = this.shapes[i]);

                                            )
                                                if (n.contains(e, t)) return !0
                                        return !1
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e) {
                                        var t = this,
                                            n =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : this.getBounds().center
                                        return (
                                            this.bounds.clear(),
                                            this.forEach(function (i) {
                                                i.rotate(e, n),
                                                    t.bounds.addBounds(
                                                        i.getBounds()
                                                    ),
                                                    i instanceof Ellipse
                                                        ? t.bounds.translate(
                                                              i.getBounds().x,
                                                              i.getBounds().y
                                                          )
                                                        : t.bounds.translate(
                                                              i.pos
                                                          )
                                            }),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setMaxVelocity",
                                    value: function (e, t) {
                                        ;(this.maxVel.x = e),
                                            (this.maxVel.y = t)
                                    },
                                },
                                {
                                    key: "setFriction",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0
                                        ;(this.friction.x = e),
                                            (this.friction.y = t)
                                    },
                                },
                                {
                                    key: "computeVelocity",
                                    value: function () {
                                        var e = timer$1.tick
                                        if (!this.ignoreGravity) {
                                            var t = world.gravity
                                            ;(this.vel.x +=
                                                t.x * this.gravityScale * e),
                                                (this.vel.y +=
                                                    t.y *
                                                    this.gravityScale *
                                                    e),
                                                (this.falling =
                                                    this.vel.y *
                                                        Math.sign(
                                                            t.y *
                                                                this
                                                                    .gravityScale
                                                        ) >
                                                    0),
                                                (this.jumping =
                                                    !this.falling &&
                                                    this.jumping)
                                        }
                                        if (
                                            (0 !== this.force.x &&
                                                (this.vel.x +=
                                                    this.force.x * e),
                                            0 !== this.force.y &&
                                                (this.vel.y +=
                                                    this.force.y * e),
                                            this.friction.x > 0)
                                        ) {
                                            var n = this.friction.x * e,
                                                i = this.vel.x + n,
                                                r = this.vel.x - n
                                            this.vel.x =
                                                i < 0 ? i : r > 0 ? r : 0
                                        }
                                        if (this.friction.y > 0) {
                                            var o = this.friction.y * e,
                                                s = this.vel.y + o,
                                                a = this.vel.y - o
                                            this.vel.y =
                                                s < 0 ? s : a > 0 ? a : 0
                                        }
                                        0 !== this.vel.y &&
                                            (this.vel.y = _clamp(
                                                this.vel.y,
                                                -this.maxVel.y,
                                                this.maxVel.y
                                            )),
                                            0 !== this.vel.x &&
                                                (this.vel.x = _clamp(
                                                    this.vel.x,
                                                    -this.maxVel.x,
                                                    this.maxVel.x
                                                ))
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        return (
                                            this.computeVelocity(e),
                                            this.ancestor.pos.add(this.vel),
                                            0 !== this.vel.x || 0 !== this.vel.y
                                        )
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        ;(this.onBodyUpdate = void 0),
                                            (this.ancestor = void 0),
                                            (this.bounds = void 0),
                                            this.setStatic(!1),
                                            (this.shapes.length = 0)
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    deferredRemove = function (e, t) {
                        this.removeChildNow(e, t)
                    },
                    globalFloatingCounter = 0,
                    Container = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            var e,
                                i =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                        ? arguments[0]
                                        : 0,
                                r =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 0,
                                o =
                                    arguments.length > 2 &&
                                    void 0 !== arguments[2]
                                        ? arguments[2]
                                        : viewport.width,
                                s =
                                    arguments.length > 3 &&
                                    void 0 !== arguments[3]
                                        ? arguments[3]
                                        : viewport.height,
                                a =
                                    arguments.length > 4 &&
                                    void 0 !== arguments[4] &&
                                    arguments[4]
                            return (
                                _classCallCheck(this, n),
                                ((e = t.call(this, i, r, o, s)).pendingSort =
                                    null),
                                (e.root = a),
                                (e.children = void 0),
                                (e.sortOn = sortOn),
                                (e.autoSort = !0),
                                (e.autoDepth = !0),
                                (e.clipping = !1),
                                (e.onChildChange = function () {}),
                                (e.enableChildBoundsUpdate = !1),
                                (e.drawCount = 0),
                                (e.autoTransform = !0),
                                (e.isKinematic = !1),
                                e.anchorPoint.set(0, 0),
                                !0 === e.root &&
                                    on(
                                        CANVAS_ONRESIZE,
                                        e.updateBounds.bind(
                                            _assertThisInitialized(e),
                                            !0
                                        )
                                    ),
                                e
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "reset",
                                    value: function () {
                                        this.pendingSort &&
                                            (clearTimeout(this.pendingSort),
                                            (this.pendingSort = null))
                                        for (
                                            var e,
                                                t = this.getChildren(),
                                                n = t.length;
                                            n >= 0;
                                            e = t[--n]
                                        )
                                            e &&
                                                !0 !== e.isPersistent &&
                                                this.removeChildNow(e)
                                        void 0 !== this.currentTransform &&
                                            this.currentTransform.identity()
                                    },
                                },
                                {
                                    key: "addChild",
                                    value: function (e, t) {
                                        return (
                                            e.ancestor instanceof n
                                                ? e.ancestor.removeChildNow(e)
                                                : e.isRenderable &&
                                                  (e.GUID = utils.createGUID(
                                                      e.id
                                                  )),
                                            (e.ancestor = this),
                                            this.getChildren().push(e),
                                            void 0 !== e.pos &&
                                                ("number" == typeof t
                                                    ? (e.pos.z = t)
                                                    : !0 === this.autoDepth &&
                                                      (e.pos.z =
                                                          this.getChildren().length)),
                                            !0 === this.autoSort && this.sort(),
                                            "function" ==
                                                typeof e.onActivateEvent &&
                                                this.isAttachedToRoot() &&
                                                e.onActivateEvent(),
                                            !0 === this.isAttachedToRoot() &&
                                                repaint(),
                                            this.enableChildBoundsUpdate &&
                                                this.updateBounds(!0),
                                            e.body instanceof Body &&
                                                world.addBody(e.body),
                                            this.onChildChange.call(
                                                this,
                                                this.getChildren().length - 1
                                            ),
                                            e
                                        )
                                    },
                                },
                                {
                                    key: "addChildAt",
                                    value: function (e, t) {
                                        if (
                                            t >= 0 &&
                                            t < this.getChildren().length
                                        )
                                            return (
                                                e.ancestor instanceof n
                                                    ? e.ancestor.removeChildNow(
                                                          e
                                                      )
                                                    : e.isRenderable &&
                                                      (e.GUID =
                                                          utils.createGUID()),
                                                (e.ancestor = this),
                                                this.getChildren().splice(
                                                    t,
                                                    0,
                                                    e
                                                ),
                                                "function" ==
                                                    typeof e.onActivateEvent &&
                                                    this.isAttachedToRoot() &&
                                                    e.onActivateEvent(),
                                                !0 ===
                                                    this.isAttachedToRoot() &&
                                                    repaint(),
                                                this.enableChildBoundsUpdate &&
                                                    this.updateBounds(!0),
                                                e.body instanceof Body &&
                                                    world.addBody(e.body),
                                                this.onChildChange.call(
                                                    this,
                                                    t
                                                ),
                                                e
                                            )
                                        throw new Error(
                                            "Index (" +
                                                t +
                                                ") Out Of Bounds for addChildAt()"
                                        )
                                    },
                                },
                                {
                                    key: "forEach",
                                    value: function (e, t) {
                                        var n = this,
                                            i = 0,
                                            r = this.getChildren(),
                                            o = r.length
                                        if ("function" != typeof e)
                                            throw new Error(
                                                e + " is not a function"
                                            )
                                        for (
                                            arguments.length > 1 && (n = t);
                                            i < o;

                                        )
                                            e.call(n, r[i], i, r), i++
                                    },
                                },
                                {
                                    key: "swapChildren",
                                    value: function (e, t) {
                                        var n = this.getChildIndex(e),
                                            i = this.getChildIndex(t)
                                        if (-1 === n || -1 === i)
                                            throw new Error(
                                                e +
                                                    " Both the supplied childs must be a child of the caller " +
                                                    this
                                            )
                                        var r = e.pos.z
                                        ;(e.pos.z = t.pos.z),
                                            (t.pos.z = r),
                                            (this.getChildren()[n] = t),
                                            (this.getChildren()[i] = e)
                                    },
                                },
                                {
                                    key: "getChildAt",
                                    value: function (e) {
                                        if (
                                            e >= 0 &&
                                            e < this.getChildren().length
                                        )
                                            return this.getChildren()[e]
                                        throw new Error(
                                            "Index (" +
                                                e +
                                                ") Out Of Bounds for getChildAt()"
                                        )
                                    },
                                },
                                {
                                    key: "getChildIndex",
                                    value: function (e) {
                                        return this.getChildren().indexOf(e)
                                    },
                                },
                                {
                                    key: "getNextChild",
                                    value: function (e) {
                                        var t =
                                            this.getChildren().indexOf(e) - 1
                                        if (
                                            t >= 0 &&
                                            t < this.getChildren().length
                                        )
                                            return this.getChildAt(t)
                                    },
                                },
                                {
                                    key: "hasChild",
                                    value: function (e) {
                                        return this === e.ancestor
                                    },
                                },
                                {
                                    key: "getChildByProp",
                                    value: function (e, t) {
                                        var i = []
                                        return (
                                            this.forEach(function (r) {
                                                !(function (e, n) {
                                                    var r = e[n]
                                                    t instanceof RegExp &&
                                                    "string" == typeof r
                                                        ? t.test(r) && i.push(e)
                                                        : r === t && i.push(e)
                                                })(r, e),
                                                    r instanceof n &&
                                                        (i = i.concat(
                                                            r.getChildByProp(
                                                                e,
                                                                t
                                                            )
                                                        ))
                                            }),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "getChildByType",
                                    value: function (e) {
                                        var t = []
                                        return (
                                            this.forEach(function (i) {
                                                i instanceof e && t.push(i),
                                                    i instanceof n &&
                                                        (t = t.concat(
                                                            i.getChildByType(e)
                                                        ))
                                            }),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "getChildByName",
                                    value: function (e) {
                                        return this.getChildByProp("name", e)
                                    },
                                },
                                {
                                    key: "getChildByGUID",
                                    value: function (e) {
                                        var t = this.getChildByProp("GUID", e)
                                        return t.length > 0 ? t[0] : null
                                    },
                                },
                                {
                                    key: "getChildren",
                                    value: function () {
                                        return (
                                            void 0 === this.children &&
                                                (this.children = []),
                                            this.children
                                        )
                                    },
                                },
                                {
                                    key: "updateBounds",
                                    value: function () {
                                        var e =
                                            arguments.length > 0 &&
                                            void 0 !== arguments[0] &&
                                            arguments[0]
                                        _get(
                                            _getPrototypeOf(n.prototype),
                                            "updateBounds",
                                            this
                                        ).call(this)
                                        var t = this.getBounds()
                                        return (
                                            (!0 !== e &&
                                                !0 !==
                                                    this
                                                        .enableChildBoundsUpdate) ||
                                                this.forEach(function (e) {
                                                    e.isRenderable &&
                                                        e
                                                            .getBounds()
                                                            .isFinite() &&
                                                        t.addBounds(
                                                            e.getBounds()
                                                        )
                                                }),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "isAttachedToRoot",
                                    value: function () {
                                        if (!0 === this.root) return !0
                                        for (var e = this.ancestor; e; ) {
                                            if (!0 === e.root) return !0
                                            e = e.ancestor
                                        }
                                        return !1
                                    },
                                },
                                {
                                    key: "updateBoundsPos",
                                    value: function (e, t) {
                                        var i = this
                                        return (
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "updateBoundsPos",
                                                this
                                            ).call(this, e, t),
                                            this.forEach(function (n) {
                                                n.isRenderable &&
                                                    n.updateBoundsPos(
                                                        n.pos.x + e - i.pos.x,
                                                        n.pos.y + t - i.pos.y
                                                    )
                                            }),
                                            this.getBounds()
                                        )
                                    },
                                },
                                {
                                    key: "onActivateEvent",
                                    value: function () {
                                        this.forEach(function (e) {
                                            "function" ==
                                                typeof e.onActivateEvent &&
                                                e.onActivateEvent()
                                        })
                                    },
                                },
                                {
                                    key: "removeChild",
                                    value: function (e, t) {
                                        if (!this.hasChild(e))
                                            throw new Error(
                                                "Child is not mine."
                                            )
                                        utils.function.defer(
                                            deferredRemove,
                                            this,
                                            e,
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "removeChildNow",
                                    value: function (e, t) {
                                        if (
                                            this.hasChild(e) &&
                                            this.getChildIndex(e) >= 0
                                        ) {
                                            "function" ==
                                                typeof e.onDeactivateEvent &&
                                                e.onDeactivateEvent(),
                                                e.body instanceof Body &&
                                                    world.removeBody(e.body),
                                                t ||
                                                    (!1 === pool.push(e, !1) &&
                                                        "function" ==
                                                            typeof e.destroy &&
                                                        e.destroy())
                                            var n = this.getChildIndex(e)
                                            n >= 0 &&
                                                (this.getChildren().splice(
                                                    n,
                                                    1
                                                ),
                                                (e.ancestor = void 0)),
                                                !0 ===
                                                    this.isAttachedToRoot() &&
                                                    repaint(),
                                                this.enableChildBoundsUpdate &&
                                                    this.updateBounds(!0),
                                                this.onChildChange.call(this, n)
                                        }
                                    },
                                },
                                {
                                    key: "setChildsProperty",
                                    value: function (e, t, i) {
                                        this.forEach(function (r) {
                                            !0 === i &&
                                                r instanceof n &&
                                                r.setChildsProperty(e, t, i),
                                                (r[e] = t)
                                        })
                                    },
                                },
                                {
                                    key: "moveUp",
                                    value: function (e) {
                                        var t = this.getChildIndex(e)
                                        t - 1 >= 0 &&
                                            this.swapChildren(
                                                e,
                                                this.getChildAt(t - 1)
                                            )
                                    },
                                },
                                {
                                    key: "moveDown",
                                    value: function (e) {
                                        var t = this.getChildIndex(e)
                                        t >= 0 &&
                                            t + 1 < this.getChildren().length &&
                                            this.swapChildren(
                                                e,
                                                this.getChildAt(t + 1)
                                            )
                                    },
                                },
                                {
                                    key: "moveToTop",
                                    value: function (e) {
                                        var t = this.getChildIndex(e)
                                        if (t > 0) {
                                            var n = this.getChildren()
                                            n.splice(0, 0, n.splice(t, 1)[0]),
                                                (e.pos.z = n[1].pos.z + 1)
                                        }
                                    },
                                },
                                {
                                    key: "moveToBottom",
                                    value: function (e) {
                                        var t = this.getChildIndex(e),
                                            n = this.getChildren()
                                        t >= 0 &&
                                            t < n.length - 1 &&
                                            (n.splice(
                                                n.length - 1,
                                                0,
                                                n.splice(t, 1)[0]
                                            ),
                                            (e.pos.z =
                                                n[n.length - 2].pos.z - 1))
                                    },
                                },
                                {
                                    key: "sort",
                                    value: function (e) {
                                        this.pendingSort ||
                                            (!0 === e &&
                                                this.forEach(function (t) {
                                                    t instanceof n && t.sort(e)
                                                }),
                                            (this.pendingSort =
                                                utils.function.defer(
                                                    function () {
                                                        this.getChildren().sort(
                                                            this[
                                                                "_sort" +
                                                                    this.sortOn.toUpperCase()
                                                            ]
                                                        ),
                                                            (this.pendingSort =
                                                                null),
                                                            repaint()
                                                    },
                                                    this
                                                )))
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        this.forEach(function (e) {
                                            "function" ==
                                                typeof e.onDeactivateEvent &&
                                                e.onDeactivateEvent()
                                        })
                                    },
                                },
                                {
                                    key: "_sortZ",
                                    value: function (e, t) {
                                        return t.pos && e.pos
                                            ? t.pos.z - e.pos.z
                                            : e.pos
                                            ? -1 / 0
                                            : 1 / 0
                                    },
                                },
                                {
                                    key: "_sortReverseZ",
                                    value: function (e, t) {
                                        return e.pos && t.pos
                                            ? e.pos.z - t.pos.z
                                            : e.pos
                                            ? 1 / 0
                                            : -1 / 0
                                    },
                                },
                                {
                                    key: "_sortX",
                                    value: function (e, t) {
                                        return t.pos && e.pos
                                            ? t.pos.z - e.pos.z ||
                                                  t.pos.x - e.pos.x
                                            : e.pos
                                            ? -1 / 0
                                            : 1 / 0
                                    },
                                },
                                {
                                    key: "_sortY",
                                    value: function (e, t) {
                                        return t.pos && e.pos
                                            ? t.pos.z - e.pos.z ||
                                                  t.pos.y - e.pos.y
                                            : e.pos
                                            ? -1 / 0
                                            : 1 / 0
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.reset(),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this, arguments)
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        for (
                                            var t,
                                                i = !1,
                                                r = state.isPaused(),
                                                o = this.getChildren(),
                                                s = o.length;
                                            s--, (t = o[s]);

                                        )
                                            (r && !t.updateWhenPaused) ||
                                                (t.isRenderable
                                                    ? ((i =
                                                          globalFloatingCounter >
                                                              0 ||
                                                          t.floating) &&
                                                          globalFloatingCounter++,
                                                      (t.inViewport = !1),
                                                      state
                                                          .current()
                                                          .cameras.forEach(
                                                              function (e) {
                                                                  e.isVisible(
                                                                      t,
                                                                      i
                                                                  ) &&
                                                                      (t.inViewport =
                                                                          !0)
                                                              }
                                                          ),
                                                      (this.isDirty |=
                                                          (t.inViewport ||
                                                              t.alwaysUpdate) &&
                                                          t.update(e)),
                                                      globalFloatingCounter >
                                                          0 &&
                                                          globalFloatingCounter--)
                                                    : (this.isDirty |=
                                                          t.update(e)))
                                        return _get(
                                            _getPrototypeOf(n.prototype),
                                            "update",
                                            this
                                        ).call(this, e)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        var n = !1,
                                            i = this.getBounds()
                                        ;(this.drawCount = 0),
                                            !1 === this.root &&
                                                !0 === this.clipping &&
                                                !0 === i.isFinite() &&
                                                e.clipRect(
                                                    i.left,
                                                    i.top,
                                                    i.width,
                                                    i.height
                                                ),
                                            e.translate(this.pos.x, this.pos.y)
                                        for (
                                            var r,
                                                o = this.getChildren(),
                                                s = o.length;
                                            (r = o[--s]);

                                        )
                                            r.isRenderable &&
                                                ((n = !0 === r.floating),
                                                (r.inViewport || n) &&
                                                    (n &&
                                                        (e.save(),
                                                        e.resetTransform()),
                                                    r.preDraw(e),
                                                    r.draw(e, t),
                                                    r.postDraw(e),
                                                    n && e.restore(),
                                                    this.drawCount++))
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    QT_ARRAY = []
                function QT_ARRAY_POP(e) {
                    var t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : 4,
                        n =
                            arguments.length > 2 && void 0 !== arguments[2]
                                ? arguments[2]
                                : 4,
                        i =
                            arguments.length > 3 && void 0 !== arguments[3]
                                ? arguments[3]
                                : 0
                    if (QT_ARRAY.length > 0) {
                        var r = QT_ARRAY.pop()
                        return (
                            (r.bounds = e),
                            (r.max_objects = t),
                            (r.max_levels = n),
                            (r.level = i),
                            r
                        )
                    }
                    return new QuadTree(e, t, n, i)
                }
                function QT_ARRAY_PUSH(e) {
                    QT_ARRAY.push(e)
                }
                var QT_VECTOR = new Vector2d(),
                    QuadTree = (function () {
                        function e(t) {
                            var n =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 4,
                                i =
                                    arguments.length > 2 &&
                                    void 0 !== arguments[2]
                                        ? arguments[2]
                                        : 4,
                                r =
                                    arguments.length > 3 &&
                                    void 0 !== arguments[3]
                                        ? arguments[3]
                                        : 0
                            _classCallCheck(this, e),
                                (this.max_objects = n),
                                (this.max_levels = i),
                                (this.level = r),
                                (this.bounds = t),
                                (this.objects = []),
                                (this.nodes = [])
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "split",
                                    value: function () {
                                        var e = this.level + 1,
                                            t = this.bounds.width / 2,
                                            n = this.bounds.height / 2,
                                            i = this.bounds.left,
                                            r = this.bounds.top
                                        ;(this.nodes[0] = QT_ARRAY_POP(
                                            {
                                                left: i + t,
                                                top: r,
                                                width: t,
                                                height: n,
                                            },
                                            this.max_objects,
                                            this.max_levels,
                                            e
                                        )),
                                            (this.nodes[1] = QT_ARRAY_POP(
                                                {
                                                    left: i,
                                                    top: r,
                                                    width: t,
                                                    height: n,
                                                },
                                                this.max_objects,
                                                this.max_levels,
                                                e
                                            )),
                                            (this.nodes[2] = QT_ARRAY_POP(
                                                {
                                                    left: i,
                                                    top: r + n,
                                                    width: t,
                                                    height: n,
                                                },
                                                this.max_objects,
                                                this.max_levels,
                                                e
                                            )),
                                            (this.nodes[3] = QT_ARRAY_POP(
                                                {
                                                    left: i + t,
                                                    top: r + n,
                                                    width: t,
                                                    height: n,
                                                },
                                                this.max_objects,
                                                this.max_levels,
                                                e
                                            ))
                                    },
                                },
                                {
                                    key: "getIndex",
                                    value: function (e) {
                                        var t,
                                            n = e.getBounds(),
                                            i = -1,
                                            r = (t =
                                                !0 === e.isFloating
                                                    ? viewport.localToWorld(
                                                          n.left,
                                                          n.top,
                                                          QT_VECTOR
                                                      )
                                                    : QT_VECTOR.set(
                                                          e.left,
                                                          e.top
                                                      )).x,
                                            o = t.y,
                                            s = n.width,
                                            a = n.height,
                                            l =
                                                this.bounds.left +
                                                this.bounds.width / 2,
                                            u =
                                                this.bounds.top +
                                                this.bounds.height / 2,
                                            h = o < u && o + a < u,
                                            c = o > u
                                        return (
                                            r < l && r + s < l
                                                ? h
                                                    ? (i = 1)
                                                    : c && (i = 2)
                                                : r > l &&
                                                  (h ? (i = 0) : c && (i = 3)),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "insertContainer",
                                    value: function (e) {
                                        for (
                                            var t, n = e.children.length;
                                            n--, (t = e.children[n]);

                                        )
                                            !0 !== t.isKinematic &&
                                                (t instanceof Container
                                                    ? ("rootContainer" !==
                                                          t.name &&
                                                          this.insert(t),
                                                      this.insertContainer(t))
                                                    : "function" ==
                                                          typeof t.getBounds &&
                                                      this.insert(t))
                                    },
                                },
                                {
                                    key: "insert",
                                    value: function (e) {
                                        var t = -1
                                        if (
                                            this.nodes.length > 0 &&
                                            -1 !== (t = this.getIndex(e))
                                        )
                                            this.nodes[t].insert(e)
                                        else if (
                                            (this.objects.push(e),
                                            this.objects.length >
                                                this.max_objects &&
                                                this.level < this.max_levels)
                                        ) {
                                            0 === this.nodes.length &&
                                                this.split()
                                            for (
                                                var n = 0;
                                                n < this.objects.length;

                                            )
                                                -1 !==
                                                (t = this.getIndex(
                                                    this.objects[n]
                                                ))
                                                    ? this.nodes[t].insert(
                                                          this.objects.splice(
                                                              n,
                                                              1
                                                          )[0]
                                                      )
                                                    : (n += 1)
                                        }
                                    },
                                },
                                {
                                    key: "retrieve",
                                    value: function (e, t) {
                                        var n = this.objects
                                        if (this.nodes.length > 0) {
                                            var i = this.getIndex(e)
                                            if (-1 !== i)
                                                n = n.concat(
                                                    this.nodes[i].retrieve(e)
                                                )
                                            else
                                                for (
                                                    var r = 0;
                                                    r < this.nodes.length;
                                                    r += 1
                                                )
                                                    n = n.concat(
                                                        this.nodes[r].retrieve(
                                                            e
                                                        )
                                                    )
                                        }
                                        return (
                                            "function" == typeof t && n.sort(t),
                                            n
                                        )
                                    },
                                },
                                {
                                    key: "remove",
                                    value: function (e) {
                                        var t = !1
                                        if (void 0 === e.getBounds) return !1
                                        if (this.nodes.length > 0) {
                                            var n = this.getIndex(e)
                                            ;-1 !== n &&
                                                (t = _remove(
                                                    this.nodes[n],
                                                    e
                                                )) &&
                                                this.nodes[n].isPrunable() &&
                                                this.nodes.splice(n, 1)
                                        }
                                        return (
                                            !1 === t &&
                                                -1 !==
                                                    this.objects.indexOf(e) &&
                                                (_remove(this.objects, e),
                                                (t = !0)),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "isPrunable",
                                    value: function () {
                                        return !(
                                            this.hasChildren() ||
                                            this.objects.length > 0
                                        )
                                    },
                                },
                                {
                                    key: "hasChildren",
                                    value: function () {
                                        for (
                                            var e = 0;
                                            e < this.nodes.length;
                                            e += 1
                                        ) {
                                            var t = this.nodes[e]
                                            if (
                                                t.length > 0 ||
                                                t.objects.length > 0
                                            )
                                                return !0
                                        }
                                        return !1
                                    },
                                },
                                {
                                    key: "clear",
                                    value: function (e) {
                                        this.objects.length = 0
                                        for (
                                            var t = 0;
                                            t < this.nodes.length;
                                            t++
                                        )
                                            this.nodes[t].clear(),
                                                QT_ARRAY_PUSH(this.nodes[t])
                                        ;(this.nodes.length = 0),
                                            void 0 !== e &&
                                                this.bounds.setMinMax(
                                                    e.min.x,
                                                    e.min.y,
                                                    e.max.x,
                                                    e.max.y
                                                )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    World = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            var e,
                                i =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                        ? arguments[0]
                                        : 0,
                                r =
                                    arguments.length > 1 &&
                                    void 0 !== arguments[1]
                                        ? arguments[1]
                                        : 0,
                                o =
                                    arguments.length > 2 &&
                                    void 0 !== arguments[2]
                                        ? arguments[2]
                                        : 1 / 0,
                                s =
                                    arguments.length > 3 &&
                                    void 0 !== arguments[3]
                                        ? arguments[3]
                                        : 1 / 0
                            return (
                                _classCallCheck(this, n),
                                ((e = t.call(this, i, r, o, s, !0)).name =
                                    "rootContainer"),
                                e.anchorPoint.set(0, 0),
                                (e.fps = 60),
                                (e.gravity = new Vector2d(0, 0.98)),
                                (e.preRender = !1),
                                (e.bodies = new Set()),
                                (e.broadphase = new QuadTree(
                                    e.getBounds().clone(),
                                    collision.maxChildren,
                                    collision.maxDepth
                                )),
                                on(
                                    GAME_RESET,
                                    e.reset,
                                    _assertThisInitialized(e)
                                ),
                                on(LEVEL_LOADED, function () {
                                    e.broadphase.clear(e.getBounds())
                                }),
                                e
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "reset",
                                    value: function () {
                                        this.broadphase.clear(),
                                            this.anchorPoint.set(0, 0),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "reset",
                                                this
                                            ).call(this),
                                            this.bodies.clear()
                                    },
                                },
                                {
                                    key: "addBody",
                                    value: function (e) {
                                        return this.bodies.add(e), this
                                    },
                                },
                                {
                                    key: "removeBody",
                                    value: function (e) {
                                        return this.bodies.delete(e), this
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        var t = state.isPaused()
                                        return (
                                            this.broadphase.clear(),
                                            this.broadphase.insertContainer(
                                                this
                                            ),
                                            this.bodies.forEach(function (n) {
                                                if (!n.isStatic) {
                                                    var i = n.ancestor
                                                    ;(t &&
                                                        !i.updateWhenPaused) ||
                                                        (!i.inViewport &&
                                                            !i.alwaysUpdate) ||
                                                        (!0 === n.update(e) &&
                                                            (i.isDirty = !0),
                                                        collisionCheck(i))
                                                }
                                            }),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "update",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Container),
                    isDirty = !0,
                    isAlwaysDirty = !1,
                    frameCounter = 0,
                    frameRate = 1,
                    accumulator = 0,
                    accumulatorMax = 0,
                    accumulatorUpdateDelta = 0,
                    stepSize = 1e3 / 60,
                    updateDelta = 0,
                    lastUpdateStart = null,
                    updateAverageDelta = 0,
                    viewport,
                    world
                on(BOOT, function () {
                    ;(world = new World()), emit(GAME_INIT)
                })
                var mergeGroup = !0,
                    sortOn = "z",
                    lastUpdate = window.performance.now()
                function onLevelLoaded() {}
                function _reset() {
                    var e = state.current()
                    void 0 !== e && (viewport = e.cameras.get("default")),
                        emit(GAME_RESET),
                        updateFrameRate()
                }
                function updateFrameRate() {
                    ;(frameCounter = 0),
                        (frameRate = ~~(0.5 + 60 / timer$1.maxfps)),
                        (stepSize = 1e3 / world.fps),
                        (accumulator = 0),
                        (accumulatorMax = 10 * stepSize),
                        (isAlwaysDirty = timer$1.maxfps > world.fps)
                }
                function getParentContainer(e) {
                    return e.ancestor
                }
                function repaint() {
                    isDirty = !0
                }
                function update$1(e, t) {
                    if (++frameCounter % frameRate == 0) {
                        for (
                            frameCounter = 0,
                                emit(GAME_BEFORE_UPDATE, e),
                                accumulator += timer$1.getDelta(),
                                accumulator = Math.min(
                                    accumulator,
                                    accumulatorMax
                                ),
                                updateDelta = timer$1.interpolation
                                    ? timer$1.getDelta()
                                    : stepSize,
                                accumulatorUpdateDelta = timer$1.interpolation
                                    ? updateDelta
                                    : Math.max(updateDelta, updateAverageDelta);
                            accumulator >= accumulatorUpdateDelta ||
                            timer$1.interpolation;

                        )
                            if (
                                ((lastUpdateStart = window.performance.now()),
                                !0 !== state.isPaused() && emit(GAME_UPDATE, e),
                                (isDirty = t.update(updateDelta) || isDirty),
                                (lastUpdate = window.performance.now()),
                                (updateAverageDelta =
                                    lastUpdate - lastUpdateStart),
                                (accumulator -= accumulatorUpdateDelta),
                                timer$1.interpolation)
                            ) {
                                accumulator = 0
                                break
                            }
                        emit(GAME_AFTER_UPDATE, lastUpdate)
                    }
                }
                function draw(e) {
                    !0 === renderer.isContextValid &&
                        (isDirty || isAlwaysDirty) &&
                        (emit(GAME_BEFORE_DRAW, window.performance.now()),
                        renderer.clear(),
                        e.draw(renderer),
                        (isDirty = !1),
                        renderer.flush(),
                        emit(GAME_AFTER_DRAW, window.performance.now()))
                }
                var game = Object.freeze({
                        __proto__: null,
                        get viewport() {
                            return viewport
                        },
                        get world() {
                            return world
                        },
                        mergeGroup,
                        sortOn,
                        get lastUpdate() {
                            return lastUpdate
                        },
                        onLevelLoaded,
                        reset: _reset,
                        updateFrameRate,
                        getParentContainer,
                        repaint,
                        update: update$1,
                        draw,
                    }),
                    MIN = Math.min,
                    MAX = Math.max,
                    targetV = new Vector2d(),
                    Camera2d = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r, o) {
                            var s
                            return (
                                _classCallCheck(this, n),
                                ((s = t.call(this, e, i, r - e, o - i)).AXIS = {
                                    NONE: 0,
                                    HORIZONTAL: 1,
                                    VERTICAL: 2,
                                    BOTH: 3,
                                }),
                                (s.bounds = pool.pull("Bounds")),
                                (s.smoothFollow = !0),
                                (s.damping = 1),
                                (s.near = -1e3),
                                (s.far = 1e3),
                                (s.projectionMatrix = new Matrix3d()),
                                (s.invCurrentTransform = new Matrix2d()),
                                (s.offset = new Vector2d()),
                                (s.target = null),
                                (s.follow_axis = s.AXIS.NONE),
                                (s._shake = {
                                    intensity: 0,
                                    duration: 0,
                                    axis: s.AXIS.BOTH,
                                    onComplete: null,
                                }),
                                (s._fadeOut = { color: null, tween: null }),
                                (s._fadeIn = { color: null, tween: null }),
                                (s.name = "default"),
                                s.setDeadzone(s.width / 6, s.height / 6),
                                s.anchorPoint.set(0, 0),
                                (s.isKinematic = !1),
                                s.bounds.setMinMax(e, i, r, o),
                                s._updateProjectionMatrix(),
                                on(
                                    GAME_RESET,
                                    s.reset,
                                    _assertThisInitialized(s)
                                ),
                                on(
                                    CANVAS_ONRESIZE,
                                    s.resize,
                                    _assertThisInitialized(s)
                                ),
                                s
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "_updateProjectionMatrix",
                                    value: function () {
                                        this.projectionMatrix.ortho(
                                            0,
                                            this.width,
                                            this.height,
                                            0,
                                            this.near,
                                            this.far
                                        )
                                    },
                                },
                                {
                                    key: "_followH",
                                    value: function (e) {
                                        var t = this.pos.x
                                        return (
                                            e.x - this.pos.x >
                                            this.deadzone.right
                                                ? (t = MIN(
                                                      e.x - this.deadzone.right,
                                                      this.bounds.width -
                                                          this.width
                                                  ))
                                                : e.x - this.pos.x <
                                                      this.deadzone.pos.x &&
                                                  (t = MAX(
                                                      e.x - this.deadzone.pos.x,
                                                      this.bounds.left
                                                  )),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "_followV",
                                    value: function (e) {
                                        var t = this.pos.y
                                        return (
                                            e.y - this.pos.y >
                                            this.deadzone.bottom
                                                ? (t = MIN(
                                                      e.y -
                                                          this.deadzone.bottom,
                                                      this.bounds.height -
                                                          this.height
                                                  ))
                                                : e.y - this.pos.y <
                                                      this.deadzone.pos.y &&
                                                  (t = MAX(
                                                      e.y - this.deadzone.pos.y,
                                                      this.bounds.top
                                                  )),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "reset",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0,
                                            t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 0
                                        ;(this.pos.x = e),
                                            (this.pos.y = t),
                                            this.unfollow(),
                                            (this.smoothFollow = !0),
                                            (this.damping = 1),
                                            this.currentTransform.identity(),
                                            this.invCurrentTransform
                                                .identity()
                                                .invert(),
                                            this._updateProjectionMatrix()
                                    },
                                },
                                {
                                    key: "setDeadzone",
                                    value: function (e, t) {
                                        void 0 === this.deadzone &&
                                            (this.deadzone = new Rect(
                                                0,
                                                0,
                                                0,
                                                0
                                            )),
                                            this.deadzone.pos.set(
                                                ~~((this.width - e) / 2),
                                                ~~(
                                                    (this.height - t) / 2 -
                                                    0.25 * t
                                                )
                                            ),
                                            this.deadzone.resize(e, t),
                                            (this.smoothFollow = !1),
                                            this.updateTarget(),
                                            (this.smoothFollow = !0)
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function (e, t) {
                                        return (
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "resize",
                                                this
                                            ).call(this, e, t),
                                            (this.smoothFollow = !1),
                                            this.setBounds(0, 0, e, t),
                                            this.setDeadzone(e / 6, t / 6),
                                            this.update(),
                                            (this.smoothFollow = !0),
                                            this._updateProjectionMatrix(),
                                            emit(
                                                VIEWPORT_ONRESIZE,
                                                this.width,
                                                this.height
                                            ),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setBounds",
                                    value: function (e, t, n, i) {
                                        ;(this.smoothFollow = !1),
                                            this.bounds.setMinMax(
                                                e,
                                                t,
                                                n + e,
                                                i + t
                                            ),
                                            this.moveTo(this.pos.x, this.pos.y),
                                            this.update(),
                                            (this.smoothFollow = !0)
                                    },
                                },
                                {
                                    key: "follow",
                                    value: function (e, t, n) {
                                        if (e instanceof Renderable)
                                            this.target = e.pos
                                        else {
                                            if (
                                                !(
                                                    e instanceof Vector2d ||
                                                    e instanceof Vector3d ||
                                                    e instanceof
                                                        ObservableVector2d ||
                                                    e instanceof
                                                        ObservableVector3d
                                                )
                                            )
                                                throw new Error(
                                                    "invalid target for me.Camera2d.follow"
                                                )
                                            this.target = e
                                        }
                                        ;(this.follow_axis =
                                            void 0 === t ? this.AXIS.BOTH : t),
                                            (this.smoothFollow = !1),
                                            (this.damping =
                                                "number" != typeof n
                                                    ? 1
                                                    : _clamp(n, 0, 1)),
                                            this.updateTarget(),
                                            (this.smoothFollow = !0)
                                    },
                                },
                                {
                                    key: "unfollow",
                                    value: function () {
                                        ;(this.target = null),
                                            (this.follow_axis = this.AXIS.NONE)
                                    },
                                },
                                {
                                    key: "move",
                                    value: function (e, t) {
                                        this.moveTo(
                                            this.pos.x + e,
                                            this.pos.y + t
                                        )
                                    },
                                },
                                {
                                    key: "moveTo",
                                    value: function (e, t) {
                                        var n = this.pos.x,
                                            i = this.pos.y
                                        ;(this.pos.x = _clamp(
                                            e,
                                            this.bounds.left,
                                            this.bounds.width
                                        )),
                                            (this.pos.y = _clamp(
                                                t,
                                                this.bounds.top,
                                                this.bounds.height
                                            )),
                                            (n === this.pos.x &&
                                                i === this.pos.y) ||
                                                emit(
                                                    VIEWPORT_ONCHANGE,
                                                    this.pos
                                                )
                                    },
                                },
                                {
                                    key: "updateTarget",
                                    value: function () {
                                        if (this.target) {
                                            switch (
                                                (targetV.setV(this.pos),
                                                this.follow_axis)
                                            ) {
                                                case this.AXIS.NONE:
                                                    break
                                                case this.AXIS.HORIZONTAL:
                                                    targetV.x = this._followH(
                                                        this.target
                                                    )
                                                    break
                                                case this.AXIS.VERTICAL:
                                                    targetV.y = this._followV(
                                                        this.target
                                                    )
                                                    break
                                                case this.AXIS.BOTH:
                                                    ;(targetV.x = this._followH(
                                                        this.target
                                                    )),
                                                        (targetV.y =
                                                            this._followV(
                                                                this.target
                                                            ))
                                            }
                                            if (!this.pos.equals(targetV)) {
                                                if (
                                                    !0 === this.smoothFollow &&
                                                    this.damping < 1
                                                ) {
                                                    if (
                                                        toBeCloseTo(
                                                            targetV.x,
                                                            this.pos.x,
                                                            2
                                                        ) &&
                                                        toBeCloseTo(
                                                            targetV.y,
                                                            this.pos.y,
                                                            2
                                                        )
                                                    )
                                                        return (
                                                            this.pos.setV(
                                                                targetV
                                                            ),
                                                            !1
                                                        )
                                                    this.pos.lerp(
                                                        targetV,
                                                        this.damping
                                                    )
                                                } else this.pos.setV(targetV)
                                                return !0
                                            }
                                        }
                                        return !1
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        var t = this.updateTarget(e)
                                        return (
                                            this._shake.duration > 0 &&
                                                ((this._shake.duration -= e),
                                                this._shake.duration <= 0
                                                    ? ((this._shake.duration = 0),
                                                      this.offset.setZero(),
                                                      "function" ==
                                                          typeof this._shake
                                                              .onComplete &&
                                                          this._shake.onComplete())
                                                    : ((this._shake.axis !==
                                                          this.AXIS.BOTH &&
                                                          this._shake.axis !==
                                                              this.AXIS
                                                                  .HORIZONTAL) ||
                                                          (this.offset.x =
                                                              (Math.random() -
                                                                  0.5) *
                                                              this._shake
                                                                  .intensity),
                                                      (this._shake.axis !==
                                                          this.AXIS.BOTH &&
                                                          this._shake.axis !==
                                                              this.AXIS
                                                                  .VERTICAL) ||
                                                          (this.offset.y =
                                                              (Math.random() -
                                                                  0.5) *
                                                              this._shake
                                                                  .intensity)),
                                                (t = !0)),
                                            !0 === t &&
                                                emit(
                                                    VIEWPORT_ONCHANGE,
                                                    this.pos
                                                ),
                                            (null == this._fadeIn.tween &&
                                                null == this._fadeOut.tween) ||
                                                (t = !0),
                                            this.currentTransform.isIdentity()
                                                ? this.invCurrentTransform.identity()
                                                : this.invCurrentTransform
                                                      .copy(
                                                          this.currentTransform
                                                      )
                                                      .invert(),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "shake",
                                    value: function (e, t, n, i, r) {
                                        ;(0 !== this._shake.duration &&
                                            !0 !== r) ||
                                            ((this._shake.intensity = e),
                                            (this._shake.duration = t),
                                            (this._shake.axis =
                                                n || this.AXIS.BOTH),
                                            (this._shake.onComplete =
                                                "function" == typeof i
                                                    ? i
                                                    : void 0))
                                    },
                                },
                                {
                                    key: "fadeOut",
                                    value: function (e) {
                                        var t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 1e3,
                                            n =
                                                arguments.length > 2
                                                    ? arguments[2]
                                                    : void 0
                                        ;(this._fadeOut.color = pool
                                            .pull("Color")
                                            .copy(e)),
                                            (this._fadeOut.tween = pool
                                                .pull(
                                                    "Tween",
                                                    this._fadeOut.color
                                                )
                                                .to({ alpha: 0 }, t)
                                                .onComplete(n || null)),
                                            (this._fadeOut.tween.isPersistent =
                                                !0),
                                            this._fadeOut.tween.start()
                                    },
                                },
                                {
                                    key: "fadeIn",
                                    value: function (e) {
                                        var t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : 1e3,
                                            n =
                                                arguments.length > 2
                                                    ? arguments[2]
                                                    : void 0
                                        this._fadeIn.color = pool
                                            .pull("Color")
                                            .copy(e)
                                        var i = this._fadeIn.color.alpha
                                        ;(this._fadeIn.color.alpha = 0),
                                            (this._fadeIn.tween = pool
                                                .pull(
                                                    "Tween",
                                                    this._fadeIn.color
                                                )
                                                .to({ alpha: i }, t)
                                                .onComplete(n || null)),
                                            (this._fadeIn.tween.isPersistent =
                                                !0),
                                            this._fadeIn.tween.start()
                                    },
                                },
                                {
                                    key: "focusOn",
                                    value: function (e) {
                                        var t = e.getBounds()
                                        this.moveTo(
                                            e.pos.x + t.left + t.width / 2,
                                            e.pos.y + t.top + t.height / 2
                                        )
                                    },
                                },
                                {
                                    key: "isVisible",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : e.floating
                                        return !0 === t || !0 === e.floating
                                            ? renderer.overlaps(e.getBounds())
                                            : e.getBounds().overlaps(this)
                                    },
                                },
                                {
                                    key: "localToWorld",
                                    value: function (e, t, n) {
                                        return (
                                            (n = n || pool.pull("Vector2d"))
                                                .set(e, t)
                                                .add(this.pos)
                                                .sub(world.pos),
                                            this.currentTransform.isIdentity() ||
                                                this.invCurrentTransform.apply(
                                                    n
                                                ),
                                            n
                                        )
                                    },
                                },
                                {
                                    key: "worldToLocal",
                                    value: function (e, t, n) {
                                        return (
                                            (n =
                                                n || pool.pull("Vector2d")).set(
                                                e,
                                                t
                                            ),
                                            this.currentTransform.isIdentity() ||
                                                this.currentTransform.apply(n),
                                            n.sub(this.pos).add(world.pos)
                                        )
                                    },
                                },
                                {
                                    key: "drawFX",
                                    value: function (e) {
                                        this._fadeIn.tween &&
                                            (e.save(),
                                            e.resetTransform(),
                                            e.setColor(this._fadeIn.color),
                                            e.fillRect(
                                                0,
                                                0,
                                                this.width,
                                                this.height
                                            ),
                                            e.restore(),
                                            1 === this._fadeIn.color.alpha &&
                                                ((this._fadeIn.tween = null),
                                                pool.push(this._fadeIn.color),
                                                (this._fadeIn.color = null))),
                                            this._fadeOut.tween &&
                                                (e.save(),
                                                e.resetTransform(),
                                                e.setColor(this._fadeOut.color),
                                                e.fillRect(
                                                    0,
                                                    0,
                                                    this.width,
                                                    this.height
                                                ),
                                                e.restore(),
                                                0 ===
                                                    this._fadeOut.color.alpha &&
                                                    ((this._fadeOut.tween =
                                                        null),
                                                    pool.push(
                                                        this._fadeOut.color
                                                    ),
                                                    (this._fadeOut.color =
                                                        null)))
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        var n = this.pos.x + this.offset.x,
                                            i = this.pos.y + this.offset.y
                                        t.currentTransform.translate(-n, -i),
                                            e.setProjection(
                                                this.projectionMatrix
                                            ),
                                            e.clipRect(
                                                0,
                                                0,
                                                this.width,
                                                this.height
                                            ),
                                            this.preDraw(e),
                                            t.preDraw(e),
                                            t.draw(e, this),
                                            this.drawFX(e),
                                            t.postDraw(e),
                                            this.postDraw(e),
                                            t.currentTransform.translate(n, i)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    default_camera,
                    default_settings = { cameras: [] },
                    Stage = (function () {
                        function e(t) {
                            _classCallCheck(this, e),
                                (this.cameras = new Map()),
                                (this.settings = Object.assign(
                                    default_settings,
                                    t || {}
                                ))
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "reset",
                                    value: function () {
                                        var e = this
                                        if (
                                            (this.settings.cameras.forEach(
                                                function (t) {
                                                    e.cameras.set(t.name, t)
                                                }
                                            ),
                                            !1 === this.cameras.has("default"))
                                        ) {
                                            if (void 0 === default_camera) {
                                                var t = renderer.getWidth(),
                                                    n = renderer.getHeight()
                                                default_camera = new Camera2d(
                                                    0,
                                                    0,
                                                    t,
                                                    n
                                                )
                                            }
                                            this.cameras.set(
                                                "default",
                                                default_camera
                                            )
                                        }
                                        _reset(),
                                            this.onResetEvent.apply(
                                                this,
                                                arguments
                                            )
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        var t = world.update(e)
                                        return (
                                            this.cameras.forEach(function (n) {
                                                n.update(e) && (t = !0)
                                            }),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e) {
                                        this.cameras.forEach(function (t) {
                                            t.draw(e, world)
                                        })
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.cameras.clear(),
                                            this.onDestroyEvent.apply(
                                                this,
                                                arguments
                                            )
                                    },
                                },
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        "function" ==
                                            typeof this.settings.onResetEvent &&
                                            this.settings.onResetEvent.apply(
                                                this,
                                                arguments
                                            )
                                    },
                                },
                                {
                                    key: "onDestroyEvent",
                                    value: function () {
                                        "function" ==
                                            typeof this.settings
                                                .onDestroyEvent &&
                                            this.settings.onDestroyEvent.apply(
                                                this,
                                                arguments
                                            )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    ColorLayer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(this, 0, 0, 1 / 0, 1 / 0)).color =
                                    pool.pull("Color").parseCSS(i)),
                                o.onResetEvent(e, i, r),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function (e, t) {
                                        var n =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2]
                                                ? arguments[2]
                                                : 0
                                        ;(this.name = e),
                                            (this.pos.z = n),
                                            (this.floating = !0),
                                            this.color.parseCSS(t)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        var n = e.getColor(),
                                            i = viewport.pos
                                        e.setColor(this.color),
                                            e.fillRect(
                                                t.left - i.x,
                                                t.top - i.y,
                                                t.width,
                                                t.height
                                            ),
                                            e.setColor(n)
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        pool.push(this.color),
                                            (this.color = void 0),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    ProgressBar = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r, o) {
                            var s
                            return (
                                _classCallCheck(this, n),
                                ((s = t.call(this, e, i, r, o)).barHeight = o),
                                s.anchorPoint.set(0, 0),
                                on(
                                    LOADER_PROGRESS,
                                    s.onProgressUpdate,
                                    _assertThisInitialized(s)
                                ),
                                on(
                                    VIEWPORT_ONRESIZE,
                                    s.resize,
                                    _assertThisInitialized(s)
                                ),
                                s.anchorPoint.set(0, 0),
                                (s.progress = 0),
                                s
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onProgressUpdate",
                                    value: function (e) {
                                        ;(this.progress = ~~(e * this.width)),
                                            (this.isDirty = !0)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e) {
                                        e.setColor("black"),
                                            e.fillRect(
                                                this.pos.x,
                                                viewport.centerY,
                                                e.getWidth(),
                                                this.barHeight / 2
                                            ),
                                            e.setColor("#55aa00"),
                                            e.fillRect(
                                                this.pos.x,
                                                viewport.centerY,
                                                this.progress,
                                                this.barHeight / 2
                                            )
                                    },
                                },
                                {
                                    key: "onDestroyEvent",
                                    value: function () {
                                        off(
                                            LOADER_PROGRESS,
                                            this.onProgressUpdate
                                        ),
                                            off(VIEWPORT_ONRESIZE, this.resize)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    IconLogo = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i) {
                            var r
                            _classCallCheck(this, n),
                                ((r = t.call(this, e, i, 100, 85)).iconCanvas =
                                    createCanvas(
                                        renderer.WebGLVersion > 1
                                            ? r.width
                                            : nextPowerOfTwo(r.width),
                                        renderer.WebGLVersion > 1
                                            ? r.height
                                            : nextPowerOfTwo(r.height),
                                        !1
                                    ))
                            var o = renderer.getContext2d(r.iconCanvas)
                            return (
                                o.beginPath(),
                                o.moveTo(0.7, 48.9),
                                o.bezierCurveTo(
                                    10.8,
                                    68.9,
                                    38.4,
                                    75.8,
                                    62.2,
                                    64.5
                                ),
                                o.bezierCurveTo(
                                    86.1,
                                    53.1,
                                    97.2,
                                    27.7,
                                    87,
                                    7.7
                                ),
                                o.lineTo(87, 7.7),
                                o.bezierCurveTo(
                                    89.9,
                                    15.4,
                                    73.9,
                                    30.2,
                                    50.5,
                                    41.4
                                ),
                                o.bezierCurveTo(
                                    27.1,
                                    52.5,
                                    5.2,
                                    55.8,
                                    0.7,
                                    48.9
                                ),
                                o.lineTo(0.7, 48.9),
                                o.closePath(),
                                (o.fillStyle = "rgb(255, 255, 255)"),
                                o.fill(),
                                o.beginPath(),
                                o.moveTo(84, 7),
                                o.bezierCurveTo(
                                    87.6,
                                    14.7,
                                    72.5,
                                    30.2,
                                    50.2,
                                    41.6
                                ),
                                o.bezierCurveTo(27.9, 53, 6.9, 55.9, 3.2, 48.2),
                                o.bezierCurveTo(
                                    -0.5,
                                    40.4,
                                    14.6,
                                    24.9,
                                    36.9,
                                    13.5
                                ),
                                o.bezierCurveTo(59.2, 2.2, 80.3, -0.8, 84, 7),
                                o.lineTo(84, 7),
                                o.closePath(),
                                (o.lineWidth = 5.3),
                                (o.strokeStyle = "rgb(255, 255, 255)"),
                                (o.lineJoin = "miter"),
                                (o.miterLimit = 4),
                                o.stroke(),
                                r.anchorPoint.set(0.5, 0.5),
                                r
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "draw",
                                    value: function (e) {
                                        e.drawImage(
                                            this.iconCanvas,
                                            e.getWidth() / 2,
                                            this.pos.y
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    DefaultLoadingScreen = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            return (
                                _classCallCheck(this, n),
                                t.apply(this, arguments)
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function () {
                                        world.addChild(
                                            new ColorLayer(
                                                "background",
                                                "#202020"
                                            ),
                                            0
                                        ),
                                            world.addChild(
                                                new ProgressBar(
                                                    0,
                                                    renderer.getHeight() / 2,
                                                    renderer.getWidth(),
                                                    8
                                                ),
                                                1
                                            ),
                                            world.addChild(
                                                new IconLogo(
                                                    renderer.getWidth() / 2,
                                                    renderer.getHeight() / 2 -
                                                        16 -
                                                        35
                                                ),
                                                2
                                            )
                                        var e = pool.pull(
                                            "Text",
                                            renderer.getWidth() / 2,
                                            renderer.getHeight() / 2 + 16,
                                            {
                                                font: "century gothic",
                                                size: 32,
                                                fillStyle: "white",
                                                textAlign: "left",
                                                textBaseline: "top",
                                                text: "melon",
                                                offScreenCanvas:
                                                    renderer.WebGLVersion >= 1,
                                            }
                                        )
                                        e.anchorPoint.set(0, 0)
                                        var t = pool.pull(
                                            "Text",
                                            renderer.getWidth() / 2,
                                            renderer.getHeight() / 2 + 16,
                                            {
                                                font: "century gothic",
                                                size: 32,
                                                fillStyle: "#55aa00",
                                                textAlign: "left",
                                                textBaseline: "top",
                                                bold: !0,
                                                text: "JS",
                                                offScreenCanvas:
                                                    renderer.WebGLVersion >= 1,
                                            }
                                        )
                                        t.anchorPoint.set(0, 0)
                                        var n =
                                            e.getBounds().width +
                                            t.getBounds().width
                                        ;(e.pos.x =
                                            renderer.getWidth() / 2 - n / 2),
                                            (t.pos.x =
                                                e.pos.x + e.getBounds().width),
                                            world.addChild(e, 2),
                                            world.addChild(t, 2)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Stage),
                    _state = -1,
                    _animFrameId = -1,
                    _isPaused = !1,
                    _stages = {},
                    _fade = { color: "", duration: 0 },
                    _onSwitchComplete = null,
                    _extraArgs = null,
                    _pauseTime = 0
                function _startRunLoop() {
                    ;-1 === _animFrameId &&
                        -1 !== _state &&
                        (timer$1.reset(),
                        (_animFrameId =
                            window.requestAnimationFrame(_renderFrame)))
                }
                function _resumeRunLoop() {
                    _isPaused &&
                        -1 !== _state &&
                        (timer$1.reset(), (_isPaused = !1))
                }
                function _pauseRunLoop() {
                    _isPaused = !0
                }
                function _renderFrame(e) {
                    var t = _stages[_state].stage
                    update$1(e, t),
                        draw(t),
                        -1 !== _animFrameId &&
                            (_animFrameId =
                                window.requestAnimationFrame(_renderFrame))
                }
                function _stopRunLoop() {
                    window.cancelAnimationFrame(_animFrameId),
                        (_animFrameId = -1)
                }
                function _switchState(e) {
                    _stopRunLoop(),
                        _stages[_state] && _stages[_state].stage.destroy(),
                        _stages[e] &&
                            (_stages[(_state = e)].stage.reset.apply(
                                _stages[_state].stage,
                                _extraArgs
                            ),
                            _startRunLoop(),
                            _onSwitchComplete && _onSwitchComplete(),
                            repaint())
                }
                on(BOOT, function () {
                    state.set(state.LOADING, new DefaultLoadingScreen()),
                        state.set(state.DEFAULT, new Stage()),
                        on(VIDEO_INIT, function () {
                            state.change(state.DEFAULT, !0)
                        })
                })
                var state = {
                    LOADING: 0,
                    MENU: 1,
                    READY: 2,
                    PLAY: 3,
                    GAMEOVER: 4,
                    GAME_END: 5,
                    SCORE: 6,
                    CREDITS: 7,
                    SETTINGS: 8,
                    DEFAULT: 9,
                    USER: 100,
                    stop: function () {
                        var e =
                            arguments.length > 0 &&
                            void 0 !== arguments[0] &&
                            arguments[0]
                        _state !== this.LOADING &&
                            this.isRunning() &&
                            (_stopRunLoop(),
                            !0 === e && e(),
                            (_pauseTime = window.performance.now()),
                            emit(STATE_STOP))
                    },
                    pause: function () {
                        var e =
                            arguments.length > 0 &&
                            void 0 !== arguments[0] &&
                            arguments[0]
                        _state === this.LOADING ||
                            this.isPaused() ||
                            (_pauseRunLoop(),
                            !0 === e && pauseTrack(),
                            (_pauseTime = window.performance.now()),
                            emit(STATE_PAUSE))
                    },
                    restart: function () {
                        var e =
                            arguments.length > 0 &&
                            void 0 !== arguments[0] &&
                            arguments[0]
                        this.isRunning() ||
                            (_startRunLoop(),
                            !0 === e && resumeTrack(),
                            (_pauseTime =
                                window.performance.now() - _pauseTime),
                            repaint(),
                            emit(STATE_RESTART, _pauseTime))
                    },
                    resume: function () {
                        var e =
                            arguments.length > 0 &&
                            void 0 !== arguments[0] &&
                            arguments[0]
                        this.isPaused() &&
                            (_resumeRunLoop(),
                            !0 === e && resumeTrack(),
                            (_pauseTime =
                                window.performance.now() - _pauseTime),
                            emit(STATE_RESUME, _pauseTime))
                    },
                    isRunning: function () {
                        return -1 !== _animFrameId
                    },
                    isPaused: function () {
                        return _isPaused
                    },
                    set: function (e, t) {
                        var n =
                            arguments.length > 2 &&
                            void 0 !== arguments[2] &&
                            arguments[2]
                        if (!(t instanceof Stage))
                            throw new Error(
                                t + " is not an instance of me.Stage"
                            )
                        ;(_stages[e] = {}),
                            (_stages[e].stage = t),
                            (_stages[e].transition = !0),
                            !0 === n && this.change(e)
                    },
                    current: function () {
                        if (void 0 !== _stages[_state])
                            return _stages[_state].stage
                    },
                    transition: function (e, t, n) {
                        "fade" === e &&
                            ((_fade.color = t), (_fade.duration = n))
                    },
                    setTransition: function (e, t) {
                        _stages[e].transition = t
                    },
                    change: function (e, t) {
                        if (void 0 === _stages[e])
                            throw new Error(
                                "Undefined Stage for state '" + e + "'"
                            )
                        this.isCurrent(e) ||
                            ((_extraArgs = null),
                            arguments.length > 1 &&
                                (_extraArgs = Array.prototype.slice.call(
                                    arguments,
                                    1
                                )),
                            _fade.duration && _stages[e].transition
                                ? ((_onSwitchComplete = function () {
                                      viewport.fadeOut(
                                          _fade.color,
                                          _fade.duration
                                      )
                                  }),
                                  viewport.fadeIn(
                                      _fade.color,
                                      _fade.duration,
                                      function () {
                                          defer(_switchState, this, e)
                                      }
                                  ))
                                : !0 === t
                                ? _switchState(e)
                                : defer(_switchState, this, e))
                    },
                    isCurrent: function (e) {
                        return _state === e
                    },
                }
                function setTMXValue(name, type, value) {
                    var match
                    if ("string" != typeof value) return value
                    switch (type) {
                        case "int":
                        case "float":
                            value = Number(value)
                            break
                        case "bool":
                            value = "true" === value
                            break
                        default:
                            if (!value || isBoolean(value))
                                value = !value || "true" === value
                            else if (isNumeric(value)) value = Number(value)
                            else if (0 === value.search(/^json:/i)) {
                                match = value.split(/^json:/i)[1]
                                try {
                                    value = JSON.parse(match)
                                } catch (e) {
                                    throw new Error(
                                        "Unable to parse JSON: " + match
                                    )
                                }
                            } else if (0 === value.search(/^eval:/i)) {
                                match = value.split(/^eval:/i)[1]
                                try {
                                    value = eval(match)
                                } catch (e) {
                                    throw new Error(
                                        "Unable to evaluate: " + match
                                    )
                                }
                            } else
                                ((match = value.match(
                                    /^#([\da-fA-F])([\da-fA-F]{3})$/
                                )) ||
                                    (match = value.match(
                                        /^#([\da-fA-F]{2})([\da-fA-F]{6})$/
                                    ))) &&
                                    (value = "#" + match[2] + match[1])
                            0 === name.search(/^(ratio|anchorPoint)$/) &&
                                "number" == typeof value &&
                                (value = { x: value, y: value })
                    }
                    return value
                }
                function parseAttributes(e, t) {
                    if (t.attributes && t.attributes.length > 0)
                        for (var n = 0; n < t.attributes.length; n++) {
                            var i = t.attributes.item(n)
                            void 0 !== i.name
                                ? (e[i.name] = i.value)
                                : (e[i.nodeName] = i.nodeValue)
                        }
                }
                function decompress() {
                    throw new Error(
                        "GZIP/ZLIB compressed TMX Tile Map not supported!"
                    )
                }
                function decodeCSV(e) {
                    for (
                        var t = e.replace("\n", "").trim().split(","),
                            n = [],
                            i = 0;
                        i < t.length;
                        i++
                    )
                        n.push(+t[i])
                    return n
                }
                function decodeBase64AsArray(e, t) {
                    var n, i, r
                    t = t || 1
                    var o = window.atob(e.replace(/[^A-Za-z0-9\+\/\=]/g, "")),
                        s = new Uint32Array(o.length / t)
                    for (n = 0, r = o.length / t; n < r; n++)
                        for (s[n] = 0, i = t - 1; i >= 0; --i)
                            s[n] += o.charCodeAt(n * t + i) << (i << 3)
                    return s
                }
                function decode(e, t, n) {
                    switch (((n = n || "none"), (t = t || "none"))) {
                        case "csv":
                            return decodeCSV(e)
                        case "base64":
                            var i = decodeBase64AsArray(e, 4)
                            return "none" === n ? i : decompress()
                        case "none":
                            return e
                        case "xml":
                            throw new Error(
                                "XML encoding is deprecated, use base64 instead"
                            )
                        default:
                            throw new Error("Unknown layer encoding: " + t)
                    }
                }
                function normalize(e, t) {
                    var n = t.nodeName
                    switch (n) {
                        case "data":
                            var i = parse(t)
                            ;(i.text = i.text || i.chunk.text),
                                (i.encoding = i.encoding || "xml"),
                                (e.data = decode(
                                    i.text,
                                    i.encoding,
                                    i.compression
                                )),
                                (e.encoding = "none")
                            break
                        case "imagelayer":
                        case "layer":
                        case "objectgroup":
                        case "group":
                            var r = parse(t)
                            ;(r.type = "layer" === n ? "tilelayer" : n),
                                r.image && (r.image = r.image.source),
                                (e.layers = e.layers || []),
                                e.layers.push(r)
                            break
                        case "animation":
                            e.animation = parse(t).frames
                            break
                        case "frame":
                        case "object":
                            var o = n + "s"
                            ;(e[o] = e[o] || []), e[o].push(parse(t))
                            break
                        case "tile":
                            var s = parse(t)
                            s.image &&
                                ((s.imagewidth = s.image.width),
                                (s.imageheight = s.image.height),
                                (s.image = s.image.source)),
                                (e.tiles = e.tiles || {}),
                                (e.tiles[s.id] = s)
                            break
                        case "tileset":
                            var a = parse(t)
                            a.image &&
                                ((a.imagewidth = a.image.width),
                                (a.imageheight = a.image.height),
                                (a.image = a.image.source)),
                                (e.tilesets = e.tilesets || []),
                                e.tilesets.push(a)
                            break
                        case "polygon":
                        case "polyline":
                            e[n] = []
                            for (
                                var l, u = parse(t).points.split(" "), h = 0;
                                h < u.length;
                                h++
                            )
                                (l = u[h].split(",")),
                                    e[n].push({ x: +l[0], y: +l[1] })
                            break
                        case "properties":
                            e.properties = parse(t)
                            break
                        case "property":
                            var c = parse(t),
                                d = void 0 !== c.value ? c.value : c.text
                            e[c.name] = setTMXValue(
                                c.name,
                                c.type || "string",
                                d
                            )
                            break
                        default:
                            e[n] = parse(t)
                    }
                }
                function parse(e) {
                    var t = {},
                        n = ""
                    if (
                        (1 === e.nodeType && parseAttributes(t, e),
                        e.hasChildNodes())
                    )
                        for (var i = 0; i < e.childNodes.length; i++) {
                            var r = e.childNodes.item(i)
                            switch (r.nodeType) {
                                case 1:
                                    normalize(t, r)
                                    break
                                case 3:
                                    n += r.nodeValue.trim()
                            }
                        }
                    return n && (t.text = n), t
                }
                function applyTMXProperties(e, t) {
                    var n = t.properties,
                        i = t.propertytypes
                    if (void 0 !== n)
                        for (var r in n)
                            if (n.hasOwnProperty(r)) {
                                var o = "string",
                                    s = r,
                                    a = n[r]
                                void 0 !== n[r].name && (s = n[r].name),
                                    void 0 !== i
                                        ? (o = i[r])
                                        : void 0 !== n[r].type &&
                                          (o = n[r].type),
                                    void 0 !== n[r].value && (a = n[r].value),
                                    (e[s] = setTMXValue(s, o, a))
                            }
                }
                var TextureCache = (function () {
                    function e(t) {
                        _classCallCheck(this, e),
                            (this.cache = new Map()),
                            (this.tinted = new Map()),
                            (this.units = new Map()),
                            (this.max_size = t || 1 / 0),
                            this.clear()
                    }
                    return (
                        _createClass(e, [
                            {
                                key: "clear",
                                value: function () {
                                    this.cache.clear(),
                                        this.tinted.clear(),
                                        this.units.clear(),
                                        (this.length = 0)
                                },
                            },
                            {
                                key: "validate",
                                value: function () {
                                    if (this.length >= this.max_size)
                                        throw new Error(
                                            "Texture cache overflow: " +
                                                this.max_size +
                                                " texture units available for this GPU."
                                        )
                                },
                            },
                            {
                                key: "get",
                                value: function (e, t) {
                                    return (
                                        this.cache.has(e) ||
                                            (t ||
                                                (t = createAtlas(
                                                    e.width,
                                                    e.height,
                                                    e.src
                                                        ? getBasename(e.src)
                                                        : void 0
                                                )),
                                            this.set(e, new Texture(t, e, !1))),
                                        this.cache.get(e)
                                    )
                                },
                            },
                            {
                                key: "remove",
                                value: function (e) {
                                    this.cache.has(e) ||
                                        (!0 === this.cache.remove(e) &&
                                            this.length--)
                                },
                            },
                            {
                                key: "tint",
                                value: function (e, t) {
                                    var n = this.tinted.get(e)
                                    return (
                                        void 0 === n &&
                                            (n = this.tinted.set(e, new Map())),
                                        n.has(t) ||
                                            n.set(
                                                t,
                                                renderer.tint(e, t, "multiply")
                                            ),
                                        n.get(t)
                                    )
                                },
                            },
                            {
                                key: "set",
                                value: function (e, t) {
                                    var n = e.width,
                                        i = e.height
                                    if (
                                        !(
                                            1 !== renderer.WebGLVersion ||
                                            (isPowerOfTwo(n) && isPowerOfTwo(i))
                                        )
                                    ) {
                                        var r = void 0 !== e.src ? e.src : e
                                        console.warn(
                                            "[Texture] " +
                                                r +
                                                " is not a POT texture (" +
                                                n +
                                                "x" +
                                                i +
                                                ")"
                                        )
                                    }
                                    this.cache.set(e, t)
                                },
                            },
                            {
                                key: "getUnit",
                                value: function (e) {
                                    return (
                                        this.units.has(e) ||
                                            (this.validate(),
                                            this.units.set(e, this.length++)),
                                        this.units.get(e)
                                    )
                                },
                            },
                        ]),
                        e
                    )
                })()
                function createAtlas(e, t) {
                    var n =
                            arguments.length > 2 && void 0 !== arguments[2]
                                ? arguments[2]
                                : "default",
                        i =
                            arguments.length > 3 && void 0 !== arguments[3]
                                ? arguments[3]
                                : "no-repeat"
                    return {
                        meta: {
                            app: "melonJS",
                            size: { w: e, h: t },
                            repeat: i,
                            image: "default",
                        },
                        frames: [
                            { filename: n, frame: { x: 0, y: 0, w: e, h: t } },
                        ],
                    }
                }
                var Texture = (function () {
                        function e(t, n, i) {
                            var r = this
                            if (
                                (_classCallCheck(this, e),
                                (this.format = null),
                                (this.sources = new Map()),
                                (this.atlases = new Map()),
                                void 0 !== t)
                            )
                                for (var o in (t = Array.isArray(t)
                                    ? t
                                    : [t])) {
                                    var s = t[o]
                                    if (void 0 !== s.meta) {
                                        if (
                                            s.meta.app.includes(
                                                "texturepacker"
                                            ) ||
                                            s.meta.app.includes(
                                                "free-tex-packer"
                                            )
                                        ) {
                                            if (
                                                ((this.format =
                                                    "texturepacker"),
                                                void 0 === n)
                                            ) {
                                                var a = loader.getImage(
                                                    s.meta.image
                                                )
                                                if (!a)
                                                    throw new Error(
                                                        "Atlas texture '" +
                                                            a +
                                                            "' not found"
                                                    )
                                                this.sources.set(
                                                    s.meta.image,
                                                    a
                                                )
                                            } else
                                                this.sources.set(
                                                    s.meta.image || "default",
                                                    "string" == typeof n
                                                        ? loader.getImage(n)
                                                        : n
                                                )
                                            this.repeat = "no-repeat"
                                        } else if (
                                            s.meta.app.includes("ShoeBox")
                                        ) {
                                            if (
                                                !s.meta.exporter ||
                                                !s.meta.exporter.includes(
                                                    "melonJS"
                                                )
                                            )
                                                throw new Error(
                                                    "ShoeBox requires the JSON exporter : https://github.com/melonjs/melonJS/tree/master/media/shoebox_JSON_export.sbx"
                                                )
                                            ;(this.format = "ShoeBox"),
                                                (this.repeat = "no-repeat"),
                                                this.sources.set(
                                                    "default",
                                                    "string" == typeof n
                                                        ? loader.getImage(n)
                                                        : n
                                                )
                                        } else
                                            s.meta.app.includes("melonJS") &&
                                                ((this.format = "melonJS"),
                                                (this.repeat =
                                                    s.meta.repeat ||
                                                    "no-repeat"),
                                                this.sources.set(
                                                    "default",
                                                    "string" == typeof n
                                                        ? loader.getImage(n)
                                                        : n
                                                ))
                                        this.atlases.set(
                                            s.meta.image || "default",
                                            this.parse(s)
                                        )
                                    } else
                                        void 0 !== s.framewidth &&
                                            void 0 !== s.frameheight &&
                                            ((this.format =
                                                "Spritesheet (fixed cell size)"),
                                            (this.repeat = "no-repeat"),
                                            void 0 !== n &&
                                                (s.image =
                                                    "string" == typeof n
                                                        ? loader.getImage(n)
                                                        : n),
                                            this.atlases.set(
                                                "default",
                                                this.parseFromSpriteSheet(s)
                                            ),
                                            this.sources.set(
                                                "default",
                                                s.image
                                            ))
                                }
                            if (0 === this.atlases.length)
                                throw new Error(
                                    "texture atlas format not supported"
                                )
                            !1 !== i &&
                                this.sources.forEach(function (e) {
                                    i instanceof TextureCache
                                        ? i.set(e, r)
                                        : renderer.cache.set(e, r)
                                })
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "parse",
                                    value: function (e) {
                                        var t = this,
                                            n = {}
                                        return (
                                            e.frames.forEach(function (i) {
                                                if (
                                                    i.hasOwnProperty("filename")
                                                ) {
                                                    var r,
                                                        o,
                                                        s = i.frame,
                                                        a =
                                                            i.spriteSourceSize &&
                                                            i.sourceSize &&
                                                            i.pivot
                                                    a &&
                                                        ((r =
                                                            i.sourceSize.w *
                                                                i.pivot.x -
                                                            (i.trimmed
                                                                ? i
                                                                      .spriteSourceSize
                                                                      .x
                                                                : 0)),
                                                        (o =
                                                            i.sourceSize.h *
                                                                i.pivot.y -
                                                            (i.trimmed
                                                                ? i
                                                                      .spriteSourceSize
                                                                      .y
                                                                : 0))),
                                                        (n[i.filename] = {
                                                            name: i.filename,
                                                            texture:
                                                                e.meta.image ||
                                                                "default",
                                                            offset: new Vector2d(
                                                                s.x,
                                                                s.y
                                                            ),
                                                            anchorPoint: a
                                                                ? new Vector2d(
                                                                      r / s.w,
                                                                      o / s.h
                                                                  )
                                                                : null,
                                                            trimmed:
                                                                !!i.trimmed,
                                                            width: s.w,
                                                            height: s.h,
                                                            angle:
                                                                !0 === i.rotated
                                                                    ? -ETA
                                                                    : 0,
                                                        }),
                                                        t.addUvsMap(
                                                            n,
                                                            i.filename,
                                                            e.meta.size.w,
                                                            e.meta.size.h
                                                        )
                                                }
                                            }),
                                            n
                                        )
                                    },
                                },
                                {
                                    key: "parseFromSpriteSheet",
                                    value: function (e) {
                                        var t = {},
                                            n = e.image,
                                            i = e.spacing || 0,
                                            r = e.margin || 0,
                                            o = n.width,
                                            s = n.height,
                                            a = pool.pull(
                                                "Vector2d",
                                                ~~(
                                                    (o - r + i) /
                                                    (e.framewidth + i)
                                                ),
                                                ~~(
                                                    (s - r + i) /
                                                    (e.frameheight + i)
                                                )
                                            )
                                        if (
                                            o % (e.framewidth + i) != 0 ||
                                            s % (e.frameheight + i) != 0
                                        ) {
                                            var l = a.x * (e.framewidth + i),
                                                u = a.y * (e.frameheight + i)
                                            l - o !== i &&
                                                u - s !== i &&
                                                ((o = l),
                                                (s = u),
                                                console.warn(
                                                    "Spritesheet Texture for image: " +
                                                        n.src +
                                                        " is not divisible by " +
                                                        (e.framewidth + i) +
                                                        "x" +
                                                        (e.frameheight + i) +
                                                        ", truncating effective size to " +
                                                        o +
                                                        "x" +
                                                        s
                                                ))
                                        }
                                        for (
                                            var h = 0, c = a.x * a.y;
                                            h < c;
                                            h++
                                        ) {
                                            var d = "" + h
                                            ;(t[d] = {
                                                name: d,
                                                texture: "default",
                                                offset: new Vector2d(
                                                    r +
                                                        (i + e.framewidth) *
                                                            (h % a.x),
                                                    r +
                                                        (i + e.frameheight) *
                                                            ~~(h / a.x)
                                                ),
                                                anchorPoint:
                                                    e.anchorPoint || null,
                                                trimmed: !1,
                                                width: e.framewidth,
                                                height: e.frameheight,
                                                angle: 0,
                                            }),
                                                this.addUvsMap(t, d, o, s)
                                        }
                                        return pool.push(a), t
                                    },
                                },
                                {
                                    key: "addUvsMap",
                                    value: function (e, t, n, i) {
                                        if (renderer instanceof WebGLRenderer) {
                                            var r = e[t].offset,
                                                o = e[t].width,
                                                s = e[t].height
                                            ;(e[t].uvs = new Float32Array([
                                                r.x / n,
                                                r.y / i,
                                                (r.x + o) / n,
                                                (r.y + s) / i,
                                            ])),
                                                (e[
                                                    r.x +
                                                        "," +
                                                        r.y +
                                                        "," +
                                                        n +
                                                        "," +
                                                        i
                                                ] = e[t])
                                        }
                                        return e[t]
                                    },
                                },
                                {
                                    key: "addQuadRegion",
                                    value: function (e, t, n, i, r) {
                                        !0 === renderer.settings.verbose &&
                                            console.warn(
                                                "Adding texture region",
                                                e,
                                                "for texture",
                                                this
                                            )
                                        var o = this.getTexture(),
                                            s = this.getAtlas(),
                                            a = o.width,
                                            l = o.height
                                        return (
                                            (s[e] = {
                                                name: e,
                                                offset: new Vector2d(t, n),
                                                width: i,
                                                height: r,
                                                angle: 0,
                                            }),
                                            this.addUvsMap(s, e, a, l),
                                            s[e]
                                        )
                                    },
                                },
                                {
                                    key: "getAtlas",
                                    value: function (e) {
                                        return "string" == typeof e
                                            ? this.atlases.get(e)
                                            : this.atlases.values().next().value
                                    },
                                },
                                {
                                    key: "getFormat",
                                    value: function () {
                                        return this.format
                                    },
                                },
                                {
                                    key: "getTexture",
                                    value: function (e) {
                                        return "object" === _typeof(e) &&
                                            "string" == typeof e.texture
                                            ? this.sources.get(e.texture)
                                            : this.sources.values().next().value
                                    },
                                },
                                {
                                    key: "getRegion",
                                    value: function (e, t) {
                                        var n
                                        return (
                                            "string" == typeof t
                                                ? (n = this.getAtlas(t)[e])
                                                : this.atlases.forEach(
                                                      function (t) {
                                                          void 0 !== t[e] &&
                                                              (n = t[e])
                                                      }
                                                  ),
                                            n
                                        )
                                    },
                                },
                                {
                                    key: "getUVs",
                                    value: function (e) {
                                        var t = this.getRegion(e)
                                        if (void 0 === t) {
                                            var n = e.split(","),
                                                i = +n[0],
                                                r = +n[1],
                                                o = +n[2],
                                                s = +n[3]
                                            t = this.addQuadRegion(
                                                e,
                                                i,
                                                r,
                                                o,
                                                s
                                            )
                                        }
                                        return t.uvs
                                    },
                                },
                                {
                                    key: "createSpriteFromName",
                                    value: function (e, t) {
                                        var n =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2] &&
                                            arguments[2]
                                        return pool.pull(
                                            !0 === n
                                                ? "me.NineSliceSprite"
                                                : "me.Sprite",
                                            0,
                                            0,
                                            Object.assign(
                                                { image: this, region: e },
                                                t || {}
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "createAnimationFromName",
                                    value: function (e, t) {
                                        for (
                                            var n,
                                                i = [],
                                                r = {},
                                                o = 0,
                                                s = 0,
                                                a = 0;
                                            a < e.length;
                                            ++a
                                        ) {
                                            if (
                                                null ==
                                                (n = this.getRegion(e[a]))
                                            )
                                                throw new Error(
                                                    "Texture - region for " +
                                                        e[a] +
                                                        " not found"
                                                )
                                            ;(i[a] = n),
                                                (r[e[a]] = a),
                                                (o = Math.max(n.width, o)),
                                                (s = Math.max(n.height, s))
                                        }
                                        return new Sprite(
                                            0,
                                            0,
                                            Object.assign(
                                                {
                                                    image: this,
                                                    framewidth: o,
                                                    frameheight: s,
                                                    margin: 0,
                                                    spacing: 0,
                                                    atlas: i,
                                                    atlasIndices: r,
                                                },
                                                t || {}
                                            )
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    Sprite = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            if (
                                (_classCallCheck(this, n),
                                ((o = t.call(this, e, i, 0, 0)).animationpause =
                                    !1),
                                (o.animationspeed = 100),
                                (o.offset = pool.pull("Vector2d", 0, 0)),
                                (o.source = null),
                                (o.anim = {}),
                                (o.resetAnim = void 0),
                                (o.current = {
                                    name: "default",
                                    length: 0,
                                    offset: new Vector2d(),
                                    width: 0,
                                    height: 0,
                                    angle: 0,
                                    idx: 0,
                                }),
                                (o.dt = 0),
                                (o._flicker = {
                                    isFlickering: !1,
                                    duration: 0,
                                    callback: null,
                                    state: !1,
                                }),
                                r.image instanceof Texture)
                            ) {
                                if (
                                    ((o.source = r.image),
                                    (o.image = o.source.getTexture()),
                                    (o.textureAtlas = r.image),
                                    void 0 !== r.region)
                                ) {
                                    var s = o.source.getRegion(r.region)
                                    if (!s)
                                        throw new Error(
                                            "Texture - region for " +
                                                r.region +
                                                " not found"
                                        )
                                    o.setRegion(s),
                                        (o.current.width =
                                            r.framewidth || s.width),
                                        (o.current.height =
                                            r.frameheight || s.height)
                                }
                            } else {
                                if (
                                    ((o.image =
                                        "object" === _typeof(r.image)
                                            ? r.image
                                            : loader.getImage(r.image)),
                                    !o.image)
                                )
                                    throw new Error(
                                        "me.Sprite: '" +
                                            r.image +
                                            "' image/texture not found!"
                                    )
                                ;(o.current.width = r.framewidth =
                                    r.framewidth || o.image.width),
                                    (o.current.height = r.frameheight =
                                        r.frameheight || o.image.height),
                                    (o.source = renderer.cache.get(o.image, r)),
                                    (o.textureAtlas = o.source.getAtlas())
                            }
                            return (
                                void 0 !== r.atlas &&
                                    ((o.textureAtlas = r.atlas),
                                    (o.atlasIndices = r.atlasIndices)),
                                (o.width = o.current.width),
                                (o.height = o.current.height),
                                void 0 !== r.flipX && o.flipX(!!r.flipX),
                                void 0 !== r.flipY && o.flipY(!!r.flipY),
                                void 0 !== r.rotation && o.rotate(r.rotation),
                                r.anchorPoint &&
                                    o.anchorPoint.set(
                                        r.anchorPoint.x,
                                        r.anchorPoint.y
                                    ),
                                void 0 !== r.tint && o.tint.setColor(r.tint),
                                "string" == typeof r.name && (o.name = r.name),
                                void 0 !== r.z && (o.pos.z = r.z),
                                0 !== o.addAnimation("default", null) &&
                                    o.setCurrentAnimation("default"),
                                (o.autoTransform = !0),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "isFlickering",
                                    value: function () {
                                        return this._flicker.isFlickering
                                    },
                                },
                                {
                                    key: "flicker",
                                    value: function (e, t) {
                                        return (
                                            (this._flicker.duration = e),
                                            this._flicker.duration <= 0
                                                ? ((this._flicker.isFlickering =
                                                      !1),
                                                  (this._flicker.callback =
                                                      null))
                                                : this._flicker.isFlickering ||
                                                  ((this._flicker.callback = t),
                                                  (this._flicker.isFlickering =
                                                      !0)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "addAnimation",
                                    value: function (e, t, n) {
                                        this.anim[e] = {
                                            name: e,
                                            frames: [],
                                            idx: 0,
                                            length: 0,
                                        }
                                        var i = 0
                                        if (
                                            "object" !==
                                            _typeof(this.textureAtlas)
                                        )
                                            return 0
                                        null == t &&
                                            ((t = []),
                                            Object.keys(
                                                this.textureAtlas
                                            ).forEach(function (e, n) {
                                                t[n] = n
                                            }))
                                        for (
                                            var r = 0, o = t.length;
                                            r < o;
                                            r++
                                        ) {
                                            var s,
                                                a = t[r],
                                                l = (s =
                                                    "number" == typeof a ||
                                                    "string" == typeof a
                                                        ? {
                                                              name: a,
                                                              delay:
                                                                  n ||
                                                                  this
                                                                      .animationspeed,
                                                          }
                                                        : a).name
                                            if ("number" == typeof l)
                                                void 0 !==
                                                    this.textureAtlas[l] &&
                                                    ((this.anim[e].frames[r] =
                                                        Object.assign(
                                                            {},
                                                            this.textureAtlas[
                                                                l
                                                            ],
                                                            s
                                                        )),
                                                    i++)
                                            else {
                                                if (
                                                    this.source
                                                        .getFormat()
                                                        .includes("Spritesheet")
                                                )
                                                    throw new Error(
                                                        "string parameters for addAnimation are not allowed for standard spritesheet based Texture"
                                                    )
                                                ;(this.anim[e].frames[r] =
                                                    Object.assign(
                                                        {},
                                                        this.textureAtlas[
                                                            this.atlasIndices[l]
                                                        ],
                                                        s
                                                    )),
                                                    i++
                                            }
                                        }
                                        return (this.anim[e].length = i), i
                                    },
                                },
                                {
                                    key: "setCurrentAnimation",
                                    value: function (e, t, n) {
                                        if (!this.anim[e])
                                            throw new Error(
                                                "animation id '" +
                                                    e +
                                                    "' not defined"
                                            )
                                        return (
                                            (this.current.name = e),
                                            (this.current.length =
                                                this.anim[
                                                    this.current.name
                                                ].length),
                                            (this.resetAnim =
                                                "string" == typeof t
                                                    ? this.setCurrentAnimation.bind(
                                                          this,
                                                          t,
                                                          null,
                                                          !0
                                                      )
                                                    : "function" == typeof t
                                                    ? t
                                                    : void 0),
                                            this.setAnimationFrame(
                                                this.current.idx
                                            ),
                                            n || (this.dt = 0),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "reverseAnimation",
                                    value: function (e) {
                                        return (
                                            void 0 !== e &&
                                            void 0 !== this.anim[e]
                                                ? this.anim[e].frames.reverse()
                                                : this.anim[
                                                      this.current.name
                                                  ].frames.reverse(),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "isCurrentAnimation",
                                    value: function (e) {
                                        return this.current.name === e
                                    },
                                },
                                {
                                    key: "setRegion",
                                    value: function (e) {
                                        return (
                                            (this.image =
                                                this.source.getTexture(e)),
                                            this.current.offset.setV(e.offset),
                                            (this.current.angle = e.angle),
                                            (this.width = this.current.width =
                                                e.width),
                                            (this.height = this.current.height =
                                                e.height),
                                            e.anchorPoint &&
                                                this.anchorPoint.set(
                                                    this._flip.x &&
                                                        !0 === e.trimmed
                                                        ? 1 - e.anchorPoint.x
                                                        : e.anchorPoint.x,
                                                    this._flip.y &&
                                                        !0 === e.trimmed
                                                        ? 1 - e.anchorPoint.y
                                                        : e.anchorPoint.y
                                                ),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setAnimationFrame",
                                    value: function (e) {
                                        return (
                                            (this.current.idx =
                                                (e || 0) % this.current.length),
                                            this.setRegion(
                                                this.getAnimationFrameObjectByIndex(
                                                    this.current.idx
                                                )
                                            )
                                        )
                                    },
                                },
                                {
                                    key: "getCurrentAnimationFrame",
                                    value: function () {
                                        return this.current.idx
                                    },
                                },
                                {
                                    key: "getAnimationFrameObjectByIndex",
                                    value: function (e) {
                                        return this.anim[this.current.name]
                                            .frames[e]
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        if (
                                            !this.animationpause &&
                                            this.current &&
                                            this.current.length > 0
                                        ) {
                                            var t =
                                                this.getAnimationFrameObjectByIndex(
                                                    this.current.idx
                                                ).delay
                                            for (this.dt += e; this.dt >= t; ) {
                                                ;(this.isDirty = !0),
                                                    (this.dt -= t)
                                                var n =
                                                    this.current.length > 1
                                                        ? this.current.idx + 1
                                                        : this.current.idx
                                                if (
                                                    (this.setAnimationFrame(n),
                                                    0 === this.current.idx &&
                                                        "function" ==
                                                            typeof this
                                                                .resetAnim &&
                                                        !1 === this.resetAnim())
                                                ) {
                                                    this.setAnimationFrame(
                                                        this.current.length - 1
                                                    ),
                                                        (this.dt %= t)
                                                    break
                                                }
                                                t =
                                                    this.getAnimationFrameObjectByIndex(
                                                        this.current.idx
                                                    ).delay
                                            }
                                        }
                                        return (
                                            this._flicker.isFlickering &&
                                                ((this._flicker.duration -= e),
                                                this._flicker.duration < 0 &&
                                                    ("function" ==
                                                        typeof this._flicker
                                                            .callback &&
                                                        this._flicker.callback(),
                                                    this.flicker(-1)),
                                                (this.isDirty = !0)),
                                            this.isDirty
                                        )
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        pool.push(this.offset),
                                            (this.offset = void 0),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e) {
                                        if (
                                            !this._flicker.isFlickering ||
                                            ((this._flicker.state =
                                                !this._flicker.state),
                                            this._flicker.state)
                                        ) {
                                            var t = this.current,
                                                n = this.pos.x,
                                                i = this.pos.y,
                                                r = t.width,
                                                o = t.height,
                                                s = t.offset,
                                                a = this.offset
                                            0 !== t.angle &&
                                                (e.translate(-n, -i),
                                                e.rotate(t.angle),
                                                (n -= o),
                                                (r = t.height),
                                                (o = t.width)),
                                                e.drawImage(
                                                    this.image,
                                                    a.x + s.x,
                                                    a.y + s.y,
                                                    r,
                                                    o,
                                                    n,
                                                    i,
                                                    r,
                                                    o
                                                )
                                        }
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    TMX_FLIP_H = 2147483648,
                    TMX_FLIP_V = 1073741824,
                    TMX_FLIP_AD = 536870912,
                    TMX_CLEAR_BIT_MASK$1 = 536870911,
                    Tile = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r, o) {
                            var s, a, l
                            if (
                                (_classCallCheck(this, n),
                                (s = t.call(this)),
                                o.isCollection)
                            ) {
                                var u = o.getTileImage(r & TMX_CLEAR_BIT_MASK$1)
                                ;(a = u.width), (l = u.height)
                            } else (a = o.tilewidth), (l = o.tileheight)
                            return (
                                s.setMinMax(0, 0, a, l),
                                (s.tileset = o),
                                (s.currentTransform = null),
                                (s.col = e),
                                (s.row = i),
                                (s.tileId = r),
                                (s.flippedX = 0 != (s.tileId & TMX_FLIP_H)),
                                (s.flippedY = 0 != (s.tileId & TMX_FLIP_V)),
                                (s.flippedAD = 0 != (s.tileId & TMX_FLIP_AD)),
                                (s.flipped =
                                    s.flippedX || s.flippedY || s.flippedAD),
                                !0 === s.flipped &&
                                    (null === s.currentTransform &&
                                        (s.currentTransform = new Matrix2d()),
                                    s.setTileTransform(
                                        s.currentTransform.identity()
                                    )),
                                (s.tileId &= TMX_CLEAR_BIT_MASK$1),
                                s
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "setTileTransform",
                                    value: function (e) {
                                        e.translate(
                                            this.width / 2,
                                            this.height / 2
                                        ),
                                            this.flippedAD &&
                                                (e.rotate(
                                                    (-90 * Math.PI) / 180
                                                ),
                                                e.scale(-1, 1)),
                                            this.flippedX &&
                                                e.scale(
                                                    this.flippedAD ? 1 : -1,
                                                    this.flippedAD ? -1 : 1
                                                ),
                                            this.flippedY &&
                                                e.scale(
                                                    this.flippedAD ? -1 : 1,
                                                    this.flippedAD ? 1 : -1
                                                ),
                                            e.translate(
                                                -this.width / 2,
                                                -this.height / 2
                                            )
                                    },
                                },
                                {
                                    key: "getRenderable",
                                    value: function (e) {
                                        var t,
                                            n = this.tileset
                                        if (n.animations.has(this.tileId)) {
                                            var i = [],
                                                r = []
                                            n.animations
                                                .get(this.tileId)
                                                .frames.forEach(function (e) {
                                                    r.push(e.tileid),
                                                        i.push({
                                                            name: "" + e.tileid,
                                                            delay: e.duration,
                                                        })
                                                }),
                                                (t =
                                                    n.texture.createAnimationFromName(
                                                        r,
                                                        e
                                                    )).addAnimation(
                                                    this.tileId - n.firstgid,
                                                    i
                                                ),
                                                t.setCurrentAnimation(
                                                    this.tileId - n.firstgid
                                                )
                                        } else if (!0 === n.isCollection) {
                                            var o = n.getTileImage(this.tileId)
                                            ;(t = new Sprite(
                                                0,
                                                0,
                                                Object.assign({ image: o })
                                            )).anchorPoint.set(0, 0),
                                                t.scale(
                                                    e.width / this.width,
                                                    e.height / this.height
                                                ),
                                                void 0 !== e.rotation &&
                                                    (t.anchorPoint.set(
                                                        0.5,
                                                        0.5
                                                    ),
                                                    t.currentTransform.rotate(
                                                        e.rotation
                                                    ),
                                                    t.currentTransform.translate(
                                                        e.width / 2,
                                                        e.height / 2
                                                    ),
                                                    (e.rotation = void 0))
                                        } else
                                            (t = n.texture.createSpriteFromName(
                                                this.tileId - n.firstgid,
                                                e
                                            )).anchorPoint.set(0, 0)
                                        return (
                                            this.setTileTransform(
                                                t.currentTransform
                                            ),
                                            t
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Bounds$1),
                    Line = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            return (
                                _classCallCheck(this, n),
                                t.apply(this, arguments)
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "contains",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y)),
                                            (e -= this.pos.x),
                                            (t -= this.pos.y)
                                        var n = this.points[0],
                                            i = this.points[1]
                                        return (
                                            (t - n.y) * (i.x - n.x) ==
                                            (i.y - n.y) * (e - n.x)
                                        )
                                    },
                                },
                                {
                                    key: "recalc",
                                    value: function () {
                                        var e = this.edges,
                                            t = this.normals,
                                            n = this.indices,
                                            i = this.points
                                        if (2 !== i.length)
                                            throw new Error(
                                                "Requires exactly 2 points"
                                            )
                                        return (
                                            void 0 === e[0] &&
                                                (e[0] = new Vector2d()),
                                            e[0].copy(i[1]).sub(i[0]),
                                            void 0 === t[0] &&
                                                (t[0] = new Vector2d()),
                                            t[0].copy(e[0]).perp().normalize(),
                                            (n.length = 0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        var e = []
                                        return (
                                            this.points.forEach(function (t) {
                                                e.push(t.clone())
                                            }),
                                            new n(this.pos.x, this.pos.y, e)
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Polygon),
                    Renderer = (function () {
                        function e(t) {
                            return (
                                _classCallCheck(this, e),
                                (this.settings = t),
                                (this.isContextValid = !0),
                                (this.currentScissor = new Int32Array([
                                    0,
                                    0,
                                    this.settings.width,
                                    this.settings.height,
                                ])),
                                (this.currentBlendMode = "normal"),
                                !0 === device$1.ejecta
                                    ? (this.canvas =
                                          document.getElementById("canvas"))
                                    : void 0 !== window.canvas
                                    ? (this.canvas = window.canvas)
                                    : void 0 !== this.settings.canvas
                                    ? (this.canvas = this.settings.canvas)
                                    : (this.canvas = createCanvas(
                                          this.settings.zoomX,
                                          this.settings.zoomY
                                      )),
                                (this.backBufferCanvas = this.canvas),
                                (this.context = null),
                                (this.currentColor = new Color(0, 0, 0, 1)),
                                (this.currentTint = new Color(
                                    255,
                                    255,
                                    255,
                                    1
                                )),
                                (this.projectionMatrix = new Matrix3d()),
                                (this.uvOffset = 0),
                                (this.Texture = Texture),
                                on(GAME_RESET, function () {
                                    renderer.reset()
                                }),
                                this
                            )
                        }
                        return (
                            _createClass(e, [
                                { key: "clear", value: function () {} },
                                {
                                    key: "reset",
                                    value: function () {
                                        this.resetTransform(),
                                            this.setBlendMode(
                                                this.settings.blendMode
                                            ),
                                            this.setColor("#000000"),
                                            this.clearTint(),
                                            this.cache.clear(),
                                            (this.currentScissor[0] = 0),
                                            (this.currentScissor[1] = 0),
                                            (this.currentScissor[2] =
                                                this.backBufferCanvas.width),
                                            (this.currentScissor[3] =
                                                this.backBufferCanvas.height)
                                    },
                                },
                                {
                                    key: "getCanvas",
                                    value: function () {
                                        return this.backBufferCanvas
                                    },
                                },
                                {
                                    key: "getScreenCanvas",
                                    value: function () {
                                        return this.canvas
                                    },
                                },
                                {
                                    key: "getScreenContext",
                                    value: function () {
                                        return this.context
                                    },
                                },
                                {
                                    key: "getBlendMode",
                                    value: function () {
                                        return this.currentBlendMode
                                    },
                                },
                                {
                                    key: "getContext2d",
                                    value: function (e, t) {
                                        if (null == e)
                                            throw new Error(
                                                "You must pass a canvas element in order to create a 2d context"
                                            )
                                        if (void 0 === e.getContext)
                                            throw new Error(
                                                "Your browser does not support HTML5 canvas."
                                            )
                                        "boolean" != typeof t && (t = !0)
                                        var n = e.getContext("2d", { alpha: t })
                                        return (
                                            n.canvas || (n.canvas = e),
                                            this.setAntiAlias(
                                                n,
                                                this.settings.antiAlias
                                            ),
                                            n
                                        )
                                    },
                                },
                                {
                                    key: "getWidth",
                                    value: function () {
                                        return this.backBufferCanvas.width
                                    },
                                },
                                {
                                    key: "getHeight",
                                    value: function () {
                                        return this.backBufferCanvas.height
                                    },
                                },
                                {
                                    key: "getColor",
                                    value: function () {
                                        return this.currentColor
                                    },
                                },
                                {
                                    key: "globalAlpha",
                                    value: function () {
                                        return this.currentColor.glArray[3]
                                    },
                                },
                                {
                                    key: "overlaps",
                                    value: function (e) {
                                        return (
                                            e.left <= this.getWidth() &&
                                            e.right >= 0 &&
                                            e.top <= this.getHeight() &&
                                            e.bottom >= 0
                                        )
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function (e, t) {
                                        ;(e === this.backBufferCanvas.width &&
                                            t ===
                                                this.backBufferCanvas.height) ||
                                            ((this.canvas.width =
                                                this.backBufferCanvas.width =
                                                    e),
                                            (this.canvas.height =
                                                this.backBufferCanvas.height =
                                                    t),
                                            (this.currentScissor[0] = 0),
                                            (this.currentScissor[1] = 0),
                                            (this.currentScissor[2] = e),
                                            (this.currentScissor[3] = t),
                                            emit(CANVAS_ONRESIZE, e, t))
                                    },
                                },
                                {
                                    key: "setAntiAlias",
                                    value: function (e, t) {
                                        var n = e.canvas
                                        setPrefixed(
                                            "imageSmoothingEnabled",
                                            !0 === t,
                                            e
                                        ),
                                            !0 !== t
                                                ? ((n.style["image-rendering"] =
                                                      "optimizeSpeed"),
                                                  (n.style["image-rendering"] =
                                                      "-moz-crisp-edges"),
                                                  (n.style["image-rendering"] =
                                                      "-o-crisp-edges"),
                                                  (n.style["image-rendering"] =
                                                      "-webkit-optimize-contrast"),
                                                  (n.style["image-rendering"] =
                                                      "optimize-contrast"),
                                                  (n.style["image-rendering"] =
                                                      "crisp-edges"),
                                                  (n.style["image-rendering"] =
                                                      "pixelated"),
                                                  (n.style.msInterpolationMode =
                                                      "nearest-neighbor"))
                                                : (n.style["image-rendering"] =
                                                      "auto")
                                    },
                                },
                                {
                                    key: "setProjection",
                                    value: function (e) {
                                        this.projectionMatrix.copy(e)
                                    },
                                },
                                {
                                    key: "stroke",
                                    value: function (e, t) {
                                        e instanceof Rect ||
                                        e instanceof Bounds$1
                                            ? this.strokeRect(
                                                  e.left,
                                                  e.top,
                                                  e.width,
                                                  e.height,
                                                  t
                                              )
                                            : e instanceof Line ||
                                              e instanceof Polygon
                                            ? this.strokePolygon(e, t)
                                            : e instanceof Ellipse &&
                                              this.strokeEllipse(
                                                  e.pos.x,
                                                  e.pos.y,
                                                  e.radiusV.x,
                                                  e.radiusV.y,
                                                  t
                                              )
                                    },
                                },
                                {
                                    key: "tint",
                                    value: function (e, t, n) {
                                        var i = createCanvas(
                                                e.width,
                                                e.height,
                                                !0
                                            ),
                                            r = this.getContext2d(i)
                                        return (
                                            r.save(),
                                            (r.fillStyle =
                                                t instanceof Color
                                                    ? t.toRGB()
                                                    : t),
                                            r.fillRect(0, 0, e.width, e.height),
                                            (r.globalCompositeOperation =
                                                n || "multiply"),
                                            r.drawImage(e, 0, 0),
                                            (r.globalCompositeOperation =
                                                "destination-atop"),
                                            r.drawImage(e, 0, 0),
                                            r.restore(),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "fill",
                                    value: function (e) {
                                        this.stroke(e, !0)
                                    },
                                },
                                { key: "setMask", value: function (e) {} },
                                { key: "clearMask", value: function () {} },
                                {
                                    key: "setTint",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1]
                                                ? arguments[1]
                                                : e.alpha
                                        this.currentTint.copy(e),
                                            (this.currentTint.alpha *= t)
                                    },
                                },
                                {
                                    key: "clearTint",
                                    value: function () {
                                        this.currentTint.setColor(
                                            255,
                                            255,
                                            255,
                                            1
                                        )
                                    },
                                },
                                { key: "drawFont", value: function () {} },
                            ]),
                            e
                        )
                    })(),
                    CanvasRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            return (
                                _classCallCheck(this, n),
                                ((i = t.call(this, e)).context = i.getContext2d(
                                    i.getScreenCanvas(),
                                    i.settings.transparent
                                )),
                                i.settings.doubleBuffering
                                    ? ((i.backBufferCanvas = createCanvas(
                                          i.settings.width,
                                          i.settings.height,
                                          !0
                                      )),
                                      (i.backBufferContext2D = i.getContext2d(
                                          i.backBufferCanvas
                                      )))
                                    : ((i.backBufferCanvas =
                                          i.getScreenCanvas()),
                                      (i.backBufferContext2D = i.context)),
                                i.setBlendMode(i.settings.blendMode),
                                i.setColor(i.currentColor),
                                (i.cache = new TextureCache()),
                                !1 === i.settings.textureSeamFix ||
                                    i.settings.antiAlias ||
                                    (i.uvOffset = 1),
                                _possibleConstructorReturn(
                                    i,
                                    _assertThisInitialized(i)
                                )
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "reset",
                                    value: function () {
                                        _get(
                                            _getPrototypeOf(n.prototype),
                                            "reset",
                                            this
                                        ).call(this),
                                            this.clearColor(
                                                this.currentColor,
                                                !0 !== this.settings.transparent
                                            )
                                    },
                                },
                                {
                                    key: "resetTransform",
                                    value: function () {
                                        this.backBufferContext2D.setTransform(
                                            1,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0
                                        )
                                    },
                                },
                                {
                                    key: "setBlendMode",
                                    value: function (e, t) {
                                        ;(t = t || this.getContext()),
                                            (this.currentBlendMode = e),
                                            "multiply" === e
                                                ? (t.globalCompositeOperation =
                                                      "multiply")
                                                : ((t.globalCompositeOperation =
                                                      "source-over"),
                                                  (this.currentBlendMode =
                                                      "normal")),
                                            this.settings.doubleBuffering &&
                                                this.settings.transparent &&
                                                (this.context.globalCompositeOperation =
                                                    "copy")
                                    },
                                },
                                {
                                    key: "clear",
                                    value: function () {
                                        this.settings.transparent &&
                                            this.clearColor("rgba(0,0,0,0)", !0)
                                    },
                                },
                                {
                                    key: "flush",
                                    value: function () {
                                        this.settings.doubleBuffering &&
                                            this.context.drawImage(
                                                this.backBufferCanvas,
                                                0,
                                                0
                                            )
                                    },
                                },
                                {
                                    key: "clearColor",
                                    value: function (e, t) {
                                        this.save(),
                                            this.resetTransform(),
                                            (this.backBufferContext2D.globalCompositeOperation =
                                                t ? "copy" : "source-over"),
                                            (this.backBufferContext2D.fillStyle =
                                                e instanceof Color
                                                    ? e.toRGBA()
                                                    : e),
                                            this.fillRect(
                                                0,
                                                0,
                                                this.backBufferCanvas.width,
                                                this.backBufferCanvas.height
                                            ),
                                            this.restore()
                                    },
                                },
                                {
                                    key: "clearRect",
                                    value: function (e, t, n, i) {
                                        this.backBufferContext2D.clearRect(
                                            e,
                                            t,
                                            n,
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "createPattern",
                                    value: function (e, t) {
                                        return this.backBufferContext2D.createPattern(
                                            e,
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "drawImage",
                                    value: function (
                                        e,
                                        t,
                                        n,
                                        i,
                                        r,
                                        o,
                                        s,
                                        a,
                                        l
                                    ) {
                                        if (
                                            !(
                                                this.backBufferContext2D
                                                    .globalAlpha <
                                                1 / 255
                                            )
                                        ) {
                                            void 0 === i
                                                ? ((i = a = e.width),
                                                  (r = l = e.height),
                                                  (o = t),
                                                  (s = n),
                                                  (t = 0),
                                                  (n = 0))
                                                : void 0 === o &&
                                                  ((o = t),
                                                  (s = n),
                                                  (a = i),
                                                  (l = r),
                                                  (i = e.width),
                                                  (r = e.height),
                                                  (t = 0),
                                                  (n = 0)),
                                                !1 === this.settings.subPixel &&
                                                    ((o = ~~o), (s = ~~s))
                                            var u = e,
                                                h = this.currentTint.toArray()
                                            ;(1 === h[0] &&
                                                1 === h[1] &&
                                                1 === h[2]) ||
                                                (u = this.cache.tint(
                                                    e,
                                                    this.currentTint.toRGB()
                                                )),
                                                this.backBufferContext2D.drawImage(
                                                    u,
                                                    t,
                                                    n,
                                                    i,
                                                    r,
                                                    o,
                                                    s,
                                                    a,
                                                    l
                                                )
                                        }
                                    },
                                },
                                {
                                    key: "drawPattern",
                                    value: function (e, t, n, i, r) {
                                        if (
                                            !(
                                                this.backBufferContext2D
                                                    .globalAlpha <
                                                1 / 255
                                            )
                                        ) {
                                            var o =
                                                this.backBufferContext2D
                                                    .fillStyle
                                            ;(this.backBufferContext2D.fillStyle =
                                                e),
                                                this.backBufferContext2D.fillRect(
                                                    t,
                                                    n,
                                                    i,
                                                    r
                                                ),
                                                (this.backBufferContext2D.fillStyle =
                                                    o)
                                        }
                                    },
                                },
                                {
                                    key: "strokeArc",
                                    value: function (e, t, n, i, r, o) {
                                        var s =
                                                arguments.length > 6 &&
                                                void 0 !== arguments[6] &&
                                                arguments[6],
                                            a = this.backBufferContext2D
                                        a.globalAlpha < 1 / 255 ||
                                            (a.translate(e, t),
                                            a.beginPath(),
                                            a.arc(0, 0, n, i, r, o || !1),
                                            a[!0 === s ? "fill" : "stroke"](),
                                            a.translate(-e, -t))
                                    },
                                },
                                {
                                    key: "fillArc",
                                    value: function (e, t, n, i, r, o) {
                                        this.strokeArc(
                                            e,
                                            t,
                                            n,
                                            i,
                                            r,
                                            o || !1,
                                            !0
                                        )
                                    },
                                },
                                {
                                    key: "strokeEllipse",
                                    value: function (e, t, n, i) {
                                        var r =
                                                arguments.length > 4 &&
                                                void 0 !== arguments[4] &&
                                                arguments[4],
                                            o = this.backBufferContext2D
                                        if (!(o.globalAlpha < 1 / 255)) {
                                            var s = n,
                                                a = i,
                                                l = e - s,
                                                u = e + s,
                                                h = t - a,
                                                c = t + a,
                                                d = 0.551784 * s,
                                                f = 0.551784 * a,
                                                p = e - d,
                                                v = e + d,
                                                g = t - f,
                                                y = t + f
                                            o.beginPath(),
                                                o.moveTo(e, h),
                                                o.bezierCurveTo(
                                                    v,
                                                    h,
                                                    u,
                                                    g,
                                                    u,
                                                    t
                                                ),
                                                o.bezierCurveTo(
                                                    u,
                                                    y,
                                                    v,
                                                    c,
                                                    e,
                                                    c
                                                ),
                                                o.bezierCurveTo(
                                                    p,
                                                    c,
                                                    l,
                                                    y,
                                                    l,
                                                    t
                                                ),
                                                o.bezierCurveTo(
                                                    l,
                                                    g,
                                                    p,
                                                    h,
                                                    e,
                                                    h
                                                ),
                                                o[
                                                    !0 === r ? "fill" : "stroke"
                                                ](),
                                                o.closePath()
                                        }
                                    },
                                },
                                {
                                    key: "fillEllipse",
                                    value: function (e, t, n, i) {
                                        this.strokeEllipse(e, t, n, i, !0)
                                    },
                                },
                                {
                                    key: "strokeLine",
                                    value: function (e, t, n, i) {
                                        var r = this.backBufferContext2D
                                        r < 1 / 255 ||
                                            (r.beginPath(),
                                            r.moveTo(e, t),
                                            r.lineTo(n, i),
                                            r.stroke())
                                    },
                                },
                                {
                                    key: "fillLine",
                                    value: function (e, t, n, i) {
                                        this.strokeLine(e, t, n, i)
                                    },
                                },
                                {
                                    key: "strokePolygon",
                                    value: function (e) {
                                        var t =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1] &&
                                                arguments[1],
                                            n = this.backBufferContext2D
                                        if (!(n.globalAlpha < 1 / 255)) {
                                            var i
                                            this.translate(e.pos.x, e.pos.y),
                                                n.beginPath(),
                                                n.moveTo(
                                                    e.points[0].x,
                                                    e.points[0].y
                                                )
                                            for (
                                                var r = 1;
                                                r < e.points.length;
                                                r++
                                            )
                                                (i = e.points[r]),
                                                    n.lineTo(i.x, i.y)
                                            n.lineTo(
                                                e.points[0].x,
                                                e.points[0].y
                                            ),
                                                n[
                                                    !0 === t ? "fill" : "stroke"
                                                ](),
                                                n.closePath(),
                                                this.translate(
                                                    -e.pos.x,
                                                    -e.pos.y
                                                )
                                        }
                                    },
                                },
                                {
                                    key: "fillPolygon",
                                    value: function (e) {
                                        this.strokePolygon(e, !0)
                                    },
                                },
                                {
                                    key: "strokeRect",
                                    value: function (e, t, n, i) {
                                        var r =
                                            arguments.length > 4 &&
                                            void 0 !== arguments[4] &&
                                            arguments[4]
                                        if (!0 === r) this.fillRect(e, t, n, i)
                                        else {
                                            if (
                                                this.backBufferContext2D
                                                    .globalAlpha <
                                                1 / 255
                                            )
                                                return
                                            this.backBufferContext2D.strokeRect(
                                                e,
                                                t,
                                                n,
                                                i
                                            )
                                        }
                                    },
                                },
                                {
                                    key: "fillRect",
                                    value: function (e, t, n, i) {
                                        this.backBufferContext2D.globalAlpha <
                                            1 / 255 ||
                                            this.backBufferContext2D.fillRect(
                                                e,
                                                t,
                                                n,
                                                i
                                            )
                                    },
                                },
                                {
                                    key: "getContext",
                                    value: function () {
                                        return this.backBufferContext2D
                                    },
                                },
                                {
                                    key: "getFontContext",
                                    value: function () {
                                        return this.getContext()
                                    },
                                },
                                {
                                    key: "save",
                                    value: function () {
                                        this.backBufferContext2D.save()
                                    },
                                },
                                {
                                    key: "restore",
                                    value: function () {
                                        this.backBufferContext2D.restore(),
                                            (this.currentColor.glArray[3] =
                                                this.backBufferContext2D.globalAlpha),
                                            (this.currentScissor[0] = 0),
                                            (this.currentScissor[1] = 0),
                                            (this.currentScissor[2] =
                                                this.backBufferCanvas.width),
                                            (this.currentScissor[3] =
                                                this.backBufferCanvas.height)
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e) {
                                        this.backBufferContext2D.rotate(e)
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        this.backBufferContext2D.scale(e, t)
                                    },
                                },
                                {
                                    key: "setColor",
                                    value: function (e) {
                                        this.backBufferContext2D.strokeStyle =
                                            this.backBufferContext2D.fillStyle =
                                                e instanceof Color
                                                    ? e.toRGBA()
                                                    : e
                                    },
                                },
                                {
                                    key: "setGlobalAlpha",
                                    value: function (e) {
                                        this.backBufferContext2D.globalAlpha =
                                            this.currentColor.glArray[3] = e
                                    },
                                },
                                {
                                    key: "setLineWidth",
                                    value: function (e) {
                                        this.backBufferContext2D.lineWidth = e
                                    },
                                },
                                {
                                    key: "setTransform",
                                    value: function (e) {
                                        this.resetTransform(), this.transform(e)
                                    },
                                },
                                {
                                    key: "transform",
                                    value: function (e) {
                                        var t = e.toArray(),
                                            n = t[0],
                                            i = t[1],
                                            r = t[3],
                                            o = t[4],
                                            s = t[6],
                                            a = t[7]
                                        !1 === this.settings.subPixel &&
                                            ((s |= 0), (a |= 0)),
                                            this.backBufferContext2D.transform(
                                                n,
                                                i,
                                                r,
                                                o,
                                                s,
                                                a
                                            )
                                    },
                                },
                                {
                                    key: "translate",
                                    value: function (e, t) {
                                        !1 === this.settings.subPixel
                                            ? this.backBufferContext2D.translate(
                                                  ~~e,
                                                  ~~t
                                              )
                                            : this.backBufferContext2D.translate(
                                                  e,
                                                  t
                                              )
                                    },
                                },
                                {
                                    key: "clipRect",
                                    value: function (e, t, n, i) {
                                        var r = this.backBufferCanvas
                                        if (
                                            0 !== e ||
                                            0 !== t ||
                                            n !== r.width ||
                                            i !== r.height
                                        ) {
                                            var o = this.currentScissor
                                            if (
                                                o[0] !== e ||
                                                o[1] !== t ||
                                                o[2] !== n ||
                                                o[3] !== i
                                            ) {
                                                var s = this.backBufferContext2D
                                                s.beginPath(),
                                                    s.rect(e, t, n, i),
                                                    s.clip(),
                                                    (o[0] = e),
                                                    (o[1] = t),
                                                    (o[2] = n),
                                                    (o[3] = i)
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "setMask",
                                    value: function (e) {
                                        var t = this.backBufferContext2D,
                                            n = e.pos.x,
                                            i = e.pos.y
                                        if ((t.save(), e instanceof Ellipse)) {
                                            var r = e.radiusV.x,
                                                o = e.radiusV.y,
                                                s = n - r,
                                                a = n + r,
                                                l = i - o,
                                                u = i + o,
                                                h = 0.551784 * r,
                                                c = 0.551784 * o,
                                                d = n - h,
                                                f = n + h,
                                                p = i - c,
                                                v = i + c
                                            t.beginPath(),
                                                t.moveTo(n, l),
                                                t.bezierCurveTo(
                                                    f,
                                                    l,
                                                    a,
                                                    p,
                                                    a,
                                                    i
                                                ),
                                                t.bezierCurveTo(
                                                    a,
                                                    v,
                                                    f,
                                                    u,
                                                    n,
                                                    u
                                                ),
                                                t.bezierCurveTo(
                                                    d,
                                                    u,
                                                    s,
                                                    v,
                                                    s,
                                                    i
                                                ),
                                                t.bezierCurveTo(
                                                    s,
                                                    p,
                                                    d,
                                                    l,
                                                    n,
                                                    l
                                                )
                                        } else {
                                            var g
                                            t.beginPath(),
                                                t.moveTo(
                                                    n + e.points[0].x,
                                                    i + e.points[0].y
                                                )
                                            for (
                                                var y = 1;
                                                y < e.points.length;
                                                y++
                                            )
                                                (g = e.points[y]),
                                                    t.lineTo(n + g.x, i + g.y)
                                        }
                                        t.clip()
                                    },
                                },
                                {
                                    key: "clearMask",
                                    value: function () {
                                        this.backBufferContext2D.restore()
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderer)
                function initArray(e) {
                    e.layerData = new Array(e.cols)
                    for (var t = 0; t < e.cols; t++) {
                        e.layerData[t] = new Array(e.rows)
                        for (var n = 0; n < e.rows; n++)
                            e.layerData[t][n] = null
                    }
                }
                function setLayerData(e, t) {
                    var n = 0
                    initArray(e)
                    for (var i = 0; i < e.rows; i++)
                        for (var r = 0; r < e.cols; r++) {
                            var o = t[n++]
                            0 !== o &&
                                (e.layerData[r][i] = e.getTileById(o, r, i))
                        }
                }
                function preRenderLayer(e, t) {
                    for (var n = 0; n < e.rows; n++)
                        for (var i = 0; i < e.cols; i++) {
                            var r = e.layerData[i][n]
                            r instanceof Tile &&
                                e.getRenderer().drawTile(t, i, n, r)
                        }
                }
                var TMXLayer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r, o, s, a, l) {
                            var u
                            _classCallCheck(this, n),
                                ((u = t.call(this, 0, 0, 0, 0)).tilewidth =
                                    i.tilewidth || r),
                                (u.tileheight = i.tileheight || o),
                                (u.orientation = s),
                                (u.tilesets = a),
                                (u.tileset = u.tilesets
                                    ? u.tilesets.getTilesetByIndex(0)
                                    : null),
                                (u.maxTileSize = { width: 0, height: 0 })
                            for (var h = 0; h < u.tilesets.length; h++) {
                                var c = u.tilesets.getTilesetByIndex(h)
                                ;(u.maxTileSize.width = Math.max(
                                    u.maxTileSize.width,
                                    c.tilewidth
                                )),
                                    (u.maxTileSize.height = Math.max(
                                        u.maxTileSize.height,
                                        c.tileheight
                                    ))
                            }
                            ;(u.animatedTilesets = []),
                                (u.isAnimated = !1),
                                (u.renderorder = i.renderorder || "right-down"),
                                (u.pos.z = l),
                                u.anchorPoint.set(0, 0),
                                (u.name = i.name),
                                (u.cols = +i.width),
                                (u.rows = +i.height)
                            var d = void 0 !== i.visible ? +i.visible : 1
                            return (
                                u.setOpacity(d ? +i.opacity : 0),
                                "string" == typeof i.tintcolor &&
                                    u.tint.parseHex(i.tintcolor, !0),
                                "isometric" === u.orientation
                                    ? ((u.width =
                                          (u.cols + u.rows) *
                                          (u.tilewidth / 2)),
                                      (u.height =
                                          (u.cols + u.rows) *
                                          (u.tileheight / 2)))
                                    : ((u.width = u.cols * u.tilewidth),
                                      (u.height = u.rows * u.tileheight)),
                                applyTMXProperties(
                                    _assertThisInitialized(u),
                                    i
                                ),
                                void 0 === u.preRender &&
                                    (u.preRender = world.preRender),
                                u.setRenderer(e.getRenderer()),
                                setLayerData(
                                    _assertThisInitialized(u),
                                    decode(i.data, i.encoding, i.compression)
                                ),
                                u
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onActivateEvent",
                                    value: function () {
                                        if (
                                            (void 0 === this.animatedTilesets &&
                                                (this.animatedTilesets = []),
                                            this.tilesets)
                                        )
                                            for (
                                                var e = this.tilesets.tilesets,
                                                    t = 0;
                                                t < e.length;
                                                t++
                                            )
                                                e[t].isAnimated &&
                                                    this.animatedTilesets.push(
                                                        e[t]
                                                    )
                                        ;(this.isAnimated =
                                            this.animatedTilesets.length > 0),
                                            this.isAnimated &&
                                                (this.preRender = !1),
                                            this.getBounds().addBounds(
                                                this.getRenderer().getBounds(),
                                                !0
                                            ),
                                            this.getBounds().shift(this.pos),
                                            !0 !== this.preRender ||
                                                this.canvasRenderer ||
                                                ((this.canvasRenderer =
                                                    new CanvasRenderer({
                                                        canvas: createCanvas(
                                                            this.width,
                                                            this.height
                                                        ),
                                                        widht: this.width,
                                                        heigth: this.height,
                                                        transparent: !0,
                                                    })),
                                                preRenderLayer(
                                                    this,
                                                    this.canvasRenderer
                                                ))
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        this.animatedTilesets = void 0
                                    },
                                },
                                {
                                    key: "setRenderer",
                                    value: function (e) {
                                        this.renderer = e
                                    },
                                },
                                {
                                    key: "getRenderer",
                                    value: function () {
                                        return this.renderer
                                    },
                                },
                                {
                                    key: "getTileId",
                                    value: function (e, t) {
                                        var n = this.getTile(e, t)
                                        return n ? n.tileId : null
                                    },
                                },
                                {
                                    key: "getTile",
                                    value: function (e, t) {
                                        var n = null
                                        if (this.contains(e, t)) {
                                            var i =
                                                this.getRenderer().pixelToTileCoords(
                                                    e,
                                                    t,
                                                    pool.pull("Vector2d")
                                                )
                                            ;(n = this.cellAt(i.x, i.y)),
                                                pool.push(i)
                                        }
                                        return n
                                    },
                                },
                                {
                                    key: "setTile",
                                    value: function (e, t, n) {
                                        return (this.layerData[t][n] = e), e
                                    },
                                },
                                {
                                    key: "getTileById",
                                    value: function (e, t, n) {
                                        return (
                                            this.tileset.contains(e) ||
                                                (this.tileset =
                                                    this.tilesets.getTilesetByGid(
                                                        e
                                                    )),
                                            new Tile(t, n, e, this.tileset)
                                        )
                                    },
                                },
                                {
                                    key: "cellAt",
                                    value: function (e, t, n) {
                                        var i = ~~e,
                                            r = ~~t,
                                            o = this.getRenderer()
                                        return !1 === n ||
                                            (i >= 0 &&
                                                i < o.cols &&
                                                r >= 0 &&
                                                r < o.rows)
                                            ? this.layerData[i][r]
                                            : null
                                    },
                                },
                                {
                                    key: "clearTile",
                                    value: function (e, t) {
                                        ;(this.layerData[e][t] = null),
                                            this.preRender &&
                                                this.canvasRenderer.clearRect(
                                                    e * this.tilewidth,
                                                    t * this.tileheight,
                                                    this.tilewidth,
                                                    this.tileheight
                                                )
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        if (this.isAnimated) {
                                            for (
                                                var t = !1, n = 0;
                                                n <
                                                this.animatedTilesets.length;
                                                n++
                                            )
                                                t =
                                                    this.animatedTilesets[
                                                        n
                                                    ].update(e) || t
                                            return t
                                        }
                                        return !1
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        if (this.preRender) {
                                            var n = Math.min(
                                                    t.width,
                                                    this.width
                                                ),
                                                i = Math.min(
                                                    t.height,
                                                    this.height
                                                )
                                            e.drawImage(
                                                this.canvasRenderer.getCanvas(),
                                                t.pos.x,
                                                t.pos.y,
                                                n,
                                                i,
                                                t.pos.x,
                                                t.pos.y,
                                                n,
                                                i
                                            )
                                        } else
                                            this.getRenderer().drawTileLayer(
                                                e,
                                                this,
                                                t
                                            )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    Bounds = (function () {
                        function e(t) {
                            _classCallCheck(this, e), this.onResetEvent(t)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function (e) {
                                        void 0 === this.min
                                            ? ((this.min = {
                                                  x: 1 / 0,
                                                  y: 1 / 0,
                                              }),
                                              (this.max = {
                                                  x: -1 / 0,
                                                  y: -1 / 0,
                                              }))
                                            : this.clear(),
                                            void 0 !== e && this.update(e),
                                            (this._center = new Vector2d())
                                    },
                                },
                                {
                                    key: "clear",
                                    value: function () {
                                        this.setMinMax(
                                            1 / 0,
                                            1 / 0,
                                            -1 / 0,
                                            -1 / 0
                                        )
                                    },
                                },
                                {
                                    key: "setMinMax",
                                    value: function (e, t, n, i) {
                                        ;(this.min.x = e),
                                            (this.min.y = t),
                                            (this.max.x = n),
                                            (this.max.y = i)
                                    },
                                },
                                {
                                    key: "x",
                                    get: function () {
                                        return this.min.x
                                    },
                                    set: function (e) {
                                        var t = this.max.x - this.min.x
                                        ;(this.min.x = e), (this.max.x = e + t)
                                    },
                                },
                                {
                                    key: "y",
                                    get: function () {
                                        return this.min.y
                                    },
                                    set: function (e) {
                                        var t = this.max.y - this.min.y
                                        ;(this.min.y = e), (this.max.y = e + t)
                                    },
                                },
                                {
                                    key: "width",
                                    get: function () {
                                        return this.max.x - this.min.x
                                    },
                                    set: function (e) {
                                        this.max.x = this.min.x + e
                                    },
                                },
                                {
                                    key: "height",
                                    get: function () {
                                        return this.max.y - this.min.y
                                    },
                                    set: function (e) {
                                        this.max.y = this.min.y + e
                                    },
                                },
                                {
                                    key: "left",
                                    get: function () {
                                        return this.min.x
                                    },
                                },
                                {
                                    key: "right",
                                    get: function () {
                                        return this.max.x
                                    },
                                },
                                {
                                    key: "top",
                                    get: function () {
                                        return this.min.y
                                    },
                                },
                                {
                                    key: "bottom",
                                    get: function () {
                                        return this.max.y
                                    },
                                },
                                {
                                    key: "centerX",
                                    get: function () {
                                        return this.min.x + this.width / 2
                                    },
                                },
                                {
                                    key: "centerY",
                                    get: function () {
                                        return this.min.y + this.height / 2
                                    },
                                },
                                {
                                    key: "center",
                                    get: function () {
                                        return this._center.set(
                                            this.centerX,
                                            this.centerY
                                        )
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        this.add(e, !0)
                                    },
                                },
                                {
                                    key: "add",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        !0 === t && this.clear()
                                        for (var n = 0; n < e.length; n++) {
                                            var i = e[n]
                                            i.x > this.max.x &&
                                                (this.max.x = i.x),
                                                i.x < this.min.x &&
                                                    (this.min.x = i.x),
                                                i.y > this.max.y &&
                                                    (this.max.y = i.y),
                                                i.y < this.min.y &&
                                                    (this.min.y = i.y)
                                        }
                                    },
                                },
                                {
                                    key: "addBounds",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        !0 === t && this.clear(),
                                            e.max.x > this.max.x &&
                                                (this.max.x = e.max.x),
                                            e.min.x < this.min.x &&
                                                (this.min.x = e.min.x),
                                            e.max.y > this.max.y &&
                                                (this.max.y = e.max.y),
                                            e.min.y < this.min.y &&
                                                (this.min.y = e.min.y)
                                    },
                                },
                                {
                                    key: "addPoint",
                                    value: function (e, t) {
                                        void 0 !== t && (e = t.apply(e)),
                                            (this.min.x = Math.min(
                                                this.min.x,
                                                e.x
                                            )),
                                            (this.max.x = Math.max(
                                                this.max.x,
                                                e.x
                                            )),
                                            (this.min.y = Math.min(
                                                this.min.y,
                                                e.y
                                            )),
                                            (this.max.y = Math.max(
                                                this.max.y,
                                                e.y
                                            ))
                                    },
                                },
                                {
                                    key: "addFrame",
                                    value: function (e, t, n, i, r) {
                                        var o = me.pool.pull("Vector2d")
                                        this.addPoint(o.set(e, t), r),
                                            this.addPoint(o.set(n, t), r),
                                            this.addPoint(o.set(e, i), r),
                                            this.addPoint(o.set(n, i), r),
                                            me.pool.push(o)
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function () {
                                        var t,
                                            n,
                                            i,
                                            r,
                                            o = arguments[0]
                                        return (
                                            2 === arguments.length
                                                ? ((t = n = o),
                                                  (i = r = arguments[1]))
                                                : o instanceof e
                                                ? ((t = o.min.x),
                                                  (n = o.max.x),
                                                  (i = o.min.y),
                                                  (r = o.max.y))
                                                : ((t = n = o.x),
                                                  (i = r = o.y)),
                                            t >= this.min.x &&
                                                n <= this.max.x &&
                                                i >= this.min.y &&
                                                r <= this.max.y
                                        )
                                    },
                                },
                                {
                                    key: "overlaps",
                                    value: function (e) {
                                        return !(
                                            this.right < e.left ||
                                            this.left > e.right ||
                                            this.bottom < e.top ||
                                            this.top > e.bottom
                                        )
                                    },
                                },
                                {
                                    key: "isFinite",
                                    value: (function (e) {
                                        function t() {
                                            return e.apply(this, arguments)
                                        }
                                        return (
                                            (t.toString = function () {
                                                return e.toString()
                                            }),
                                            t
                                        )
                                    })(function () {
                                        return (
                                            isFinite(this.min.x) &&
                                            isFinite(this.max.x) &&
                                            isFinite(this.min.y) &&
                                            isFinite(this.max.y)
                                        )
                                    }),
                                },
                                {
                                    key: "translate",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y)),
                                            (this.min.x += e),
                                            (this.max.x += e),
                                            (this.min.y += t),
                                            (this.max.y += t)
                                    },
                                },
                                {
                                    key: "shift",
                                    value: function () {
                                        var e, t
                                        2 === arguments.length
                                            ? ((e = arguments[0]),
                                              (t = arguments[1]))
                                            : ((e = arguments[0].x),
                                              (t = arguments[0].y))
                                        var n = this.max.x - this.min.x,
                                            i = this.max.y - this.min.y
                                        ;(this.min.x = e),
                                            (this.max.x = e + n),
                                            (this.min.y = t),
                                            (this.max.y = t + i)
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function () {
                                        var t = new e()
                                        return t.addBounds(this), t
                                    },
                                },
                                {
                                    key: "toPolygon",
                                    value: function () {
                                        return new Polygon(this.x, this.y, [
                                            new Vector2d(0, 0),
                                            new Vector2d(this.width, 0),
                                            new Vector2d(
                                                this.width,
                                                this.height
                                            ),
                                            new Vector2d(0, this.height),
                                        ])
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    TMXRenderer = (function () {
                        function e(t, n, i, r) {
                            _classCallCheck(this, e),
                                (this.cols = t),
                                (this.rows = n),
                                (this.tilewidth = i),
                                (this.tileheight = r),
                                (this.bounds = new Bounds())
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "canRender",
                                    value: function (e) {
                                        return (
                                            this.tilewidth === e.tilewidth &&
                                            this.tileheight === e.tileheight
                                        )
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function (e) {
                                        var t =
                                            e instanceof TMXLayer
                                                ? pool.pull("Bounds")
                                                : this.bounds
                                        return (
                                            t.setMinMax(
                                                0,
                                                0,
                                                this.cols * this.tilewidth,
                                                this.rows * this.tileheight
                                            ),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "pixelToTileCoords",
                                    value: function (e, t, n) {
                                        return n
                                    },
                                },
                                {
                                    key: "tileToPixelCoords",
                                    value: function (e, t, n) {
                                        return n
                                    },
                                },
                                {
                                    key: "drawTile",
                                    value: function (e, t, n, i) {},
                                },
                                {
                                    key: "drawTileLayer",
                                    value: function (e, t, n) {},
                                },
                            ]),
                            e
                        )
                    })(),
                    TMXOrthogonalRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            return (
                                _classCallCheck(this, n),
                                t.call(
                                    this,
                                    e.cols,
                                    e.rows,
                                    e.tilewidth,
                                    e.tileheight
                                )
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "canRender",
                                    value: function (e) {
                                        return (
                                            "orthogonal" === e.orientation &&
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "canRender",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                                {
                                    key: "pixelToTileCoords",
                                    value: function (e, t, n) {
                                        return (n || new Vector2d()).set(
                                            e / this.tilewidth,
                                            t / this.tileheight
                                        )
                                    },
                                },
                                {
                                    key: "tileToPixelCoords",
                                    value: function (e, t, n) {
                                        return (n || new Vector2d()).set(
                                            e * this.tilewidth,
                                            t * this.tileheight
                                        )
                                    },
                                },
                                {
                                    key: "adjustPosition",
                                    value: function (e) {
                                        "number" == typeof e.gid &&
                                            (e.y -= e.height)
                                    },
                                },
                                {
                                    key: "drawTile",
                                    value: function (e, t, n, i) {
                                        var r = i.tileset
                                        r.drawTile(
                                            e,
                                            r.tileoffset.x + t * this.tilewidth,
                                            r.tileoffset.y +
                                                (n + 1) * this.tileheight -
                                                r.tileheight,
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "drawTileLayer",
                                    value: function (e, t, n) {
                                        var i = 1,
                                            r = 1,
                                            o = this.pixelToTileCoords(
                                                Math.max(
                                                    n.pos.x -
                                                        (t.maxTileSize.width -
                                                            t.tilewidth),
                                                    0
                                                ),
                                                Math.max(
                                                    n.pos.y -
                                                        (t.maxTileSize.height -
                                                            t.tileheight),
                                                    0
                                                ),
                                                pool.pull("Vector2d")
                                            ).floorSelf(),
                                            s = this.pixelToTileCoords(
                                                n.pos.x +
                                                    n.width +
                                                    this.tilewidth,
                                                n.pos.y +
                                                    n.height +
                                                    this.tileheight,
                                                pool.pull("Vector2d")
                                            ).ceilSelf()
                                        switch (
                                            ((s.x =
                                                s.x > this.cols
                                                    ? this.cols
                                                    : s.x),
                                            (s.y =
                                                s.y > this.rows
                                                    ? this.rows
                                                    : s.y),
                                            t.renderorder)
                                        ) {
                                            case "right-up":
                                                ;(s.y =
                                                    o.y + (o.y = s.y) - s.y),
                                                    (r = -1)
                                                break
                                            case "left-down":
                                                ;(s.x =
                                                    o.x + (o.x = s.x) - s.x),
                                                    (i = -1)
                                                break
                                            case "left-up":
                                                ;(s.x =
                                                    o.x + (o.x = s.x) - s.x),
                                                    (s.y =
                                                        o.y +
                                                        (o.y = s.y) -
                                                        s.y),
                                                    (i = -1),
                                                    (r = -1)
                                        }
                                        for (var a = o.y; a !== s.y; a += r)
                                            for (
                                                var l = o.x;
                                                l !== s.x;
                                                l += i
                                            ) {
                                                var u = t.cellAt(l, a, !1)
                                                u && this.drawTile(e, l, a, u)
                                            }
                                        pool.push(o), pool.push(s)
                                    },
                                },
                            ]),
                            n
                        )
                    })(TMXRenderer),
                    TMXIsometricRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            return (
                                _classCallCheck(this, n),
                                ((i = t.call(
                                    this,
                                    e.cols,
                                    e.rows,
                                    e.tilewidth,
                                    e.tileheight
                                )).hTilewidth = i.tilewidth / 2),
                                (i.hTileheight = i.tileheight / 2),
                                (i.originX = i.rows * i.hTilewidth),
                                i
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "canRender",
                                    value: function (e) {
                                        return (
                                            "isometric" === e.orientation &&
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "canRender",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function (e) {
                                        var t =
                                            e instanceof TMXLayer
                                                ? pool.pull("Bounds")
                                                : this.bounds
                                        return (
                                            t.setMinMax(
                                                0,
                                                0,
                                                (this.cols + this.rows) *
                                                    (this.tilewidth / 2),
                                                (this.cols + this.rows) *
                                                    (this.tileheight / 2)
                                            ),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "pixelToTileCoords",
                                    value: function (e, t, n) {
                                        return (n || new Vector2d()).set(
                                            t / this.tileheight +
                                                (e - this.originX) /
                                                    this.tilewidth,
                                            t / this.tileheight -
                                                (e - this.originX) /
                                                    this.tilewidth
                                        )
                                    },
                                },
                                {
                                    key: "tileToPixelCoords",
                                    value: function (e, t, n) {
                                        return (n || new Vector2d()).set(
                                            (e - t) * this.hTilewidth +
                                                this.originX,
                                            (e + t) * this.hTileheight
                                        )
                                    },
                                },
                                {
                                    key: "adjustPosition",
                                    value: function (e) {
                                        var t = e.x / this.hTilewidth,
                                            n = e.y / this.tileheight,
                                            i = pool.pull("Vector2d")
                                        this.tileToPixelCoords(t, n, i),
                                            (e.x = i.x),
                                            (e.y = i.y),
                                            pool.push(i)
                                    },
                                },
                                {
                                    key: "drawTile",
                                    value: function (e, t, n, i) {
                                        var r = i.tileset
                                        r.drawTile(
                                            e,
                                            ((this.cols - 1) * r.tilewidth +
                                                (t - n) * r.tilewidth) >>
                                                1,
                                            (-r.tilewidth +
                                                (t + n) * r.tileheight) >>
                                                2,
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "drawTileLayer",
                                    value: function (e, t, n) {
                                        var i = t.tileset,
                                            r = this.pixelToTileCoords(
                                                n.pos.x - i.tilewidth,
                                                n.pos.y - i.tileheight,
                                                pool.pull("Vector2d")
                                            ).floorSelf(),
                                            o = this.pixelToTileCoords(
                                                n.pos.x + n.width + i.tilewidth,
                                                n.pos.y +
                                                    n.height +
                                                    i.tileheight,
                                                pool.pull("Vector2d")
                                            ).ceilSelf(),
                                            s = this.tileToPixelCoords(
                                                o.x,
                                                o.y,
                                                pool.pull("Vector2d")
                                            ),
                                            a = this.tileToPixelCoords(
                                                r.x,
                                                r.y,
                                                pool.pull("Vector2d")
                                            )
                                        ;(a.x -= this.hTilewidth),
                                            (a.y += this.tileheight)
                                        var l =
                                                a.y - n.pos.y >
                                                this.hTileheight,
                                            u = n.pos.x - a.x < this.hTilewidth
                                        l &&
                                            (u
                                                ? (r.x--,
                                                  (a.x -= this.hTilewidth))
                                                : (r.y--,
                                                  (a.x += this.hTilewidth)),
                                            (a.y -= this.hTileheight))
                                        for (
                                            var h = l ^ u,
                                                c = r.clone(),
                                                d = 2 * a.y;
                                            d - 2 * this.tileheight < 2 * s.y;
                                            d += this.tileheight
                                        ) {
                                            c.setV(r)
                                            for (
                                                var f = a.x;
                                                f < s.x;
                                                f += this.tilewidth
                                            ) {
                                                var p = t.cellAt(c.x, c.y)
                                                if (p) {
                                                    var v = (i = p.tileset)
                                                        .tileoffset
                                                    i.drawTile(
                                                        e,
                                                        v.x + f,
                                                        v.y +
                                                            d / 2 -
                                                            i.tileheight,
                                                        p
                                                    )
                                                }
                                                c.x++, c.y--
                                            }
                                            h
                                                ? (r.y++,
                                                  (a.x -= this.hTilewidth),
                                                  (h = !1))
                                                : (r.x++,
                                                  (a.x += this.hTilewidth),
                                                  (h = !0))
                                        }
                                        pool.push(c),
                                            pool.push(r),
                                            pool.push(o),
                                            pool.push(s),
                                            pool.push(a)
                                    },
                                },
                            ]),
                            n
                        )
                    })(TMXRenderer),
                    offsetsStaggerX = [
                        { x: 0, y: 0 },
                        { x: 1, y: -1 },
                        { x: 1, y: 0 },
                        { x: 2, y: 0 },
                    ],
                    offsetsStaggerY = [
                        { x: 0, y: 0 },
                        { x: -1, y: 1 },
                        { x: 0, y: 1 },
                        { x: 0, y: 2 },
                    ],
                    TMXHexagonalRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            return (
                                _classCallCheck(this, n),
                                ((i = t.call(
                                    this,
                                    e.cols,
                                    e.rows,
                                    -2 & e.tilewidth,
                                    -2 & e.tileheight
                                )).hexsidelength = e.hexsidelength || 0),
                                (i.staggerX = "x" === e.staggeraxis),
                                (i.staggerEven = "even" === e.staggerindex),
                                (i.sidelengthx = 0),
                                (i.sidelengthy = 0),
                                "hexagonal" === e.orientation &&
                                    (i.staggerX
                                        ? (i.sidelengthx = i.hexsidelength)
                                        : (i.sidelengthy = i.hexsidelength)),
                                (i.sideoffsetx =
                                    (i.tilewidth - i.sidelengthx) / 2),
                                (i.sideoffsety =
                                    (i.tileheight - i.sidelengthy) / 2),
                                (i.columnwidth = i.sideoffsetx + i.sidelengthx),
                                (i.rowheight = i.sideoffsety + i.sidelengthy),
                                (i.centers = [
                                    new Vector2d(),
                                    new Vector2d(),
                                    new Vector2d(),
                                    new Vector2d(),
                                ]),
                                i
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "canRender",
                                    value: function (e) {
                                        return (
                                            "hexagonal" === e.orientation &&
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "canRender",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function (e) {
                                        var t =
                                            e instanceof TMXLayer
                                                ? pool.pull("Bounds")
                                                : this.bounds
                                        return (
                                            this.staggerX
                                                ? (t.setMinMax(
                                                      0,
                                                      0,
                                                      this.cols *
                                                          this.columnwidth +
                                                          this.sideoffsetx,
                                                      this.rows *
                                                          (this.tileheight +
                                                              this.sidelengthy)
                                                  ),
                                                  t.width > 1 &&
                                                      (t.height +=
                                                          this.rowheight))
                                                : (t.setMinMax(
                                                      0,
                                                      0,
                                                      this.cols *
                                                          (this.tilewidth +
                                                              this.sidelengthx),
                                                      this.rows *
                                                          this.rowheight +
                                                          this.sideoffsety
                                                  ),
                                                  t.height > 1 &&
                                                      (t.width +=
                                                          this.columnwidth)),
                                            t
                                        )
                                    },
                                },
                                {
                                    key: "doStaggerX",
                                    value: function (e) {
                                        return (
                                            this.staggerX &&
                                            (1 & e) ^ this.staggerEven
                                        )
                                    },
                                },
                                {
                                    key: "doStaggerY",
                                    value: function (e) {
                                        return (
                                            !this.staggerX &&
                                            (1 & e) ^ this.staggerEven
                                        )
                                    },
                                },
                                {
                                    key: "topLeft",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d()
                                        return (
                                            this.staggerX
                                                ? (1 & e) ^ this.staggerEven
                                                    ? i.set(e - 1, t)
                                                    : i.set(e - 1, t - 1)
                                                : (1 & t) ^ this.staggerEven
                                                ? i.set(e, t - 1)
                                                : i.set(e - 1, t - 1),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "topRight",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d()
                                        return (
                                            this.staggerX
                                                ? (1 & e) ^ this.staggerEven
                                                    ? i.set(e + 1, t)
                                                    : i.set(e + 1, t - 1)
                                                : (1 & t) ^ this.staggerEven
                                                ? i.set(e + 1, t - 1)
                                                : i.set(e, t - 1),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "bottomLeft",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d()
                                        return (
                                            this.staggerX
                                                ? (1 & e) ^ this.staggerEven
                                                    ? i.set(e - 1, t + 1)
                                                    : i.set(e - 1, t)
                                                : (1 & t) ^ this.staggerEven
                                                ? i.set(e, t + 1)
                                                : i.set(e - 1, t + 1),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "bottomRight",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d()
                                        return (
                                            this.staggerX
                                                ? (1 & e) ^ this.staggerEven
                                                    ? i.set(e + 1, t + 1)
                                                    : i.set(e + 1, t)
                                                : (1 & t) ^ this.staggerEven
                                                ? i.set(e + 1, t + 1)
                                                : i.set(e, t + 1),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "pixelToTileCoords",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d()
                                        this.staggerX
                                            ? (e -= this.staggerEven
                                                  ? this.tilewidth
                                                  : this.sideoffsetx)
                                            : (t -= this.staggerEven
                                                  ? this.tileheight
                                                  : this.sideoffsety)
                                        var r,
                                            o,
                                            s,
                                            a,
                                            l = pool.pull(
                                                "Vector2d",
                                                Math.floor(
                                                    e / (2 * this.columnwidth)
                                                ),
                                                Math.floor(
                                                    t / (2 * this.rowheight)
                                                )
                                            ),
                                            u = pool.pull(
                                                "Vector2d",
                                                e -
                                                    l.x *
                                                        (2 * this.columnwidth),
                                                t - l.y * (2 * this.rowheight)
                                            )
                                        this.staggerX
                                            ? ((l.x = 2 * l.x),
                                              this.staggerEven && ++l.x)
                                            : ((l.y = 2 * l.y),
                                              this.staggerEven && ++l.y),
                                            this.staggerX
                                                ? ((s =
                                                      (r =
                                                          this.sidelengthx /
                                                          2) +
                                                      this.columnwidth),
                                                  (a = this.tileheight / 2),
                                                  this.centers[0].set(r, a),
                                                  this.centers[1].set(
                                                      s,
                                                      a - this.rowheight
                                                  ),
                                                  this.centers[2].set(
                                                      s,
                                                      a + this.rowheight
                                                  ),
                                                  this.centers[3].set(
                                                      s + this.columnwidth,
                                                      a
                                                  ))
                                                : ((o = this.sidelengthy / 2),
                                                  (s = this.tilewidth / 2),
                                                  (a = o + this.rowheight),
                                                  this.centers[0].set(s, o),
                                                  this.centers[1].set(
                                                      s - this.columnwidth,
                                                      a
                                                  ),
                                                  this.centers[2].set(
                                                      s + this.columnwidth,
                                                      a
                                                  ),
                                                  this.centers[3].set(
                                                      s,
                                                      a + this.rowheight
                                                  ))
                                        for (
                                            var h = 0,
                                                c = Number.MAX_VALUE,
                                                d = 0;
                                            d < 4;
                                            ++d
                                        ) {
                                            var f = this.centers[d]
                                                .sub(u)
                                                .length2()
                                            f < c && ((c = f), (h = d))
                                        }
                                        var p = this.staggerX
                                            ? offsetsStaggerX
                                            : offsetsStaggerY
                                        return (
                                            i.set(l.x + p[h].x, l.y + p[h].y),
                                            pool.push(l),
                                            pool.push(u),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "tileToPixelCoords",
                                    value: function (e, t, n) {
                                        var i = Math.floor(e),
                                            r = Math.floor(t),
                                            o = n || new Vector2d()
                                        return (
                                            this.staggerX
                                                ? ((o.y =
                                                      r *
                                                      (this.tileheight +
                                                          this.sidelengthy)),
                                                  this.doStaggerX(i) &&
                                                      (o.y += this.rowheight),
                                                  (o.x = i * this.columnwidth))
                                                : ((o.x =
                                                      i *
                                                      (this.tilewidth +
                                                          this.sidelengthx)),
                                                  this.doStaggerY(r) &&
                                                      (o.x += this.columnwidth),
                                                  (o.y = r * this.rowheight)),
                                            o
                                        )
                                    },
                                },
                                {
                                    key: "adjustPosition",
                                    value: function (e) {
                                        "number" == typeof e.gid &&
                                            (e.y -= e.height)
                                    },
                                },
                                {
                                    key: "drawTile",
                                    value: function (e, t, n, i) {
                                        var r = i.tileset,
                                            o = this.tileToPixelCoords(
                                                t,
                                                n,
                                                pool.pull("Vector2d")
                                            )
                                        r.drawTile(
                                            e,
                                            r.tileoffset.x + o.x,
                                            r.tileoffset.y +
                                                o.y +
                                                (this.tileheight -
                                                    r.tileheight),
                                            i
                                        ),
                                            pool.push(o)
                                    },
                                },
                                {
                                    key: "drawTileLayer",
                                    value: function (e, t, n) {
                                        var i,
                                            r = this.pixelToTileCoords(
                                                n.pos.x,
                                                n.pos.y,
                                                pool.pull("Vector2d")
                                            )
                                        r.sub(t.pos)
                                        var o = this.tileToPixelCoords(
                                                r.x + t.pos.x,
                                                r.y + t.pos.y,
                                                pool.pull("Vector2d")
                                            ),
                                            s = r.clone(),
                                            a = o.clone(),
                                            l =
                                                n.pos.y - o.y <
                                                this.sideoffsety,
                                            u = n.pos.x - o.x < this.sideoffsetx
                                        l && r.y--, u && r.x--
                                        var h = t.cols,
                                            c = t.rows
                                        if (this.staggerX) {
                                            ;(r.x = Math.max(0, r.x)),
                                                (r.y = Math.max(0, r.y)),
                                                (o = this.tileToPixelCoords(
                                                    r.x + t.pos.x,
                                                    r.y + t.pos.y
                                                ))
                                            for (
                                                var d = this.doStaggerX(
                                                    r.x + t.pos.x
                                                );
                                                o.y < n.bottom && r.y < c;

                                            ) {
                                                for (
                                                    s.setV(r), a.setV(o);
                                                    a.x < n.right && s.x < h;
                                                    s.x += 2
                                                )
                                                    (i = t.cellAt(
                                                        s.x,
                                                        s.y,
                                                        !1
                                                    )) &&
                                                        i.tileset.drawTile(
                                                            e,
                                                            a.x,
                                                            a.y,
                                                            i
                                                        ),
                                                        (a.x +=
                                                            this.tilewidth +
                                                            this.sidelengthx)
                                                d
                                                    ? ((r.x -= 1),
                                                      (r.y += 1),
                                                      (o.x -= this.columnwidth),
                                                      (d = !1))
                                                    : ((r.x += 1),
                                                      (o.x += this.columnwidth),
                                                      (d = !0)),
                                                    (o.y += this.rowheight)
                                            }
                                            pool.push(s), pool.push(a)
                                        } else {
                                            for (
                                                r.x = Math.max(0, r.x),
                                                    r.y = Math.max(0, r.y),
                                                    o = this.tileToPixelCoords(
                                                        r.x + t.pos.x,
                                                        r.y + t.pos.y
                                                    ),
                                                    this.doStaggerY(r.y) &&
                                                        (o.x -=
                                                            this.columnwidth);
                                                o.y < n.bottom && r.y < c;
                                                r.y++
                                            ) {
                                                for (
                                                    s.setV(r),
                                                        a.setV(o),
                                                        this.doStaggerY(r.y) &&
                                                            (a.x +=
                                                                this.columnwidth);
                                                    a.x < n.right && s.x < h;
                                                    s.x++
                                                )
                                                    (i = t.cellAt(
                                                        s.x,
                                                        s.y,
                                                        !1
                                                    )) &&
                                                        i.tileset.drawTile(
                                                            e,
                                                            a.x,
                                                            a.y,
                                                            i
                                                        ),
                                                        (a.x +=
                                                            this.tilewidth +
                                                            this.sidelengthx)
                                                o.y += this.rowheight
                                            }
                                            pool.push(s), pool.push(a)
                                        }
                                        pool.push(r), pool.push(o)
                                    },
                                },
                            ]),
                            n
                        )
                    })(TMXRenderer),
                    TMXStaggeredRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n() {
                            return (
                                _classCallCheck(this, n),
                                t.apply(this, arguments)
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "canRender",
                                    value: function (e) {
                                        return (
                                            "staggered" === e.orientation &&
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "canRender",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                                {
                                    key: "pixelToTileCoords",
                                    value: function (e, t, n) {
                                        var i = n || new Vector2d(),
                                            r = e,
                                            o = t
                                        this.staggerX
                                            ? (r -= this.staggerEven
                                                  ? this.sideoffsetx
                                                  : 0)
                                            : (o -= this.staggerEven
                                                  ? this.sideoffsety
                                                  : 0)
                                        var s = pool.pull(
                                            "Vector2d",
                                            Math.floor(r / this.tilewidth),
                                            Math.floor(o / this.tileheight)
                                        )
                                        this.staggerX
                                            ? ((s.x = 2 * s.x),
                                              this.staggerEven && ++s.x)
                                            : ((s.y = 2 * s.y),
                                              this.staggerEven && ++s.y)
                                        var a = pool.pull(
                                                "Vector2d",
                                                r - s.x * this.tilewidth,
                                                o - s.y * this.tileheight
                                            ),
                                            l =
                                                a.x *
                                                (this.tileheight /
                                                    this.tilewidth)
                                        return (
                                            this.sideoffsety - l > a.y &&
                                                (s = this.topLeft(s.x, s.y, s)),
                                            -this.sideoffsety + l > a.y &&
                                                (s = this.topRight(
                                                    s.x,
                                                    s.y,
                                                    s
                                                )),
                                            this.sideoffsety + l < a.y &&
                                                (s = this.bottomLeft(
                                                    s.x,
                                                    s.y,
                                                    s
                                                )),
                                            3 * this.sideoffsety - l < a.y &&
                                                (s = this.bottomRight(
                                                    s.x,
                                                    s.y,
                                                    s
                                                )),
                                            (i = this.tileToPixelCoords(
                                                s.x,
                                                s.y,
                                                i
                                            )).set(e - i.x, t - i.y),
                                            i.set(
                                                i.x - this.tilewidth / 2,
                                                i.y *
                                                    (this.tilewidth /
                                                        this.tileheight)
                                            ),
                                            i
                                                .div(
                                                    this.tilewidth /
                                                        Math.sqrt(2)
                                                )
                                                .rotate(degToRad(-45))
                                                .add(s),
                                            pool.push(s),
                                            pool.push(a),
                                            i
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(TMXHexagonalRenderer),
                    TMXTileset = (function () {
                        function e(t) {
                            _classCallCheck(this, e)
                            var n = 0
                            if (
                                ((this.TileProperties = []),
                                (this.imageCollection = []),
                                (this.firstgid = this.lastgid = +t.firstgid),
                                void 0 !== t.source)
                            ) {
                                var i = t.source,
                                    r = getExtension(i)
                                if (
                                    ("tsx" === r || "json" === r) &&
                                    !(t = loader.getTMX(getBasename(i)))
                                )
                                    throw new Error(
                                        i +
                                            " external TSX/JSON tileset not found"
                                    )
                            }
                            ;(this.name = t.name),
                                (this.tilewidth = +t.tilewidth),
                                (this.tileheight = +t.tileheight),
                                (this.spacing = +t.spacing || 0),
                                (this.margin = +t.margin || 0),
                                (this.tileoffset = new Vector2d()),
                                (this.isAnimated = !1),
                                (this.isCollection = !1),
                                (this.animations = new Map()),
                                (this._lastUpdate = 0)
                            var o = t.tiles
                            for (n in o)
                                if (o.hasOwnProperty(n)) {
                                    if (
                                        ("animation" in o[n] &&
                                            ((this.isAnimated = !0),
                                            this.animations.set(
                                                o[+n].animation[0].tileid,
                                                {
                                                    dt: 0,
                                                    idx: 0,
                                                    frames: o[+n].animation,
                                                    cur: o[+n].animation[0],
                                                }
                                            )),
                                        "properties" in o[n])
                                    )
                                        if (Array.isArray(o[n].properties)) {
                                            var s = {}
                                            for (var a in o[n].properties)
                                                s[o[n].properties[a].name] =
                                                    o[n].properties[a].value
                                            this.setTileProperty(
                                                +o[n].id + this.firstgid,
                                                s
                                            )
                                        } else
                                            this.setTileProperty(
                                                +n + this.firstgid,
                                                o[n].properties
                                            )
                                    if ("image" in o[n]) {
                                        var l = loader.getImage(o[n].image)
                                        if (!l)
                                            throw new Error(
                                                "melonJS: '" +
                                                    o[n].image +
                                                    "' file for tile '" +
                                                    (+n + this.firstgid) +
                                                    "' not found!"
                                            )
                                        this.imageCollection[
                                            +n + this.firstgid
                                        ] = l
                                    }
                                }
                            this.isCollection = this.imageCollection.length > 0
                            var u = t.tileoffset
                            u &&
                                ((this.tileoffset.x = +u.x),
                                (this.tileoffset.y = +u.y))
                            var h = t.tileproperties
                            if (h)
                                for (n in h)
                                    h.hasOwnProperty(n) &&
                                        this.setTileProperty(
                                            +n + this.firstgid,
                                            h[n]
                                        )
                            if (!1 === this.isCollection) {
                                if (
                                    ((this.image = loader.getImage(t.image)),
                                    !this.image)
                                )
                                    throw new Error(
                                        "melonJS: '" +
                                            t.image +
                                            "' file for tileset '" +
                                            this.name +
                                            "' not found!"
                                    )
                                ;(this.texture = renderer.cache.get(
                                    this.image,
                                    {
                                        framewidth: this.tilewidth,
                                        frameheight: this.tileheight,
                                        margin: this.margin,
                                        spacing: this.spacing,
                                    }
                                )),
                                    (this.atlas = this.texture.getAtlas())
                                var c =
                                        +t.columns ||
                                        Math.round(
                                            this.image.width /
                                                (this.tilewidth + this.spacing)
                                        ),
                                    d = Math.round(
                                        this.image.height /
                                            (this.tileheight + this.spacing)
                                    )
                                t.tilecount % c > 0 && ++d,
                                    (this.lastgid =
                                        this.firstgid + (c * d - 1 || 0)),
                                    t.tilecount &&
                                        this.lastgid - this.firstgid + 1 !=
                                            +t.tilecount &&
                                        console.warn(
                                            "Computed tilecount (" +
                                                (this.lastgid -
                                                    this.firstgid +
                                                    1) +
                                                ") does not match expected tilecount (" +
                                                t.tilecount +
                                                ")"
                                        )
                            }
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "getTileImage",
                                    value: function (e) {
                                        return this.imageCollection[e]
                                    },
                                },
                                {
                                    key: "setTileProperty",
                                    value: function (e, t) {
                                        this.TileProperties[e] = t
                                    },
                                },
                                {
                                    key: "contains",
                                    value: function (e) {
                                        return (
                                            e >= this.firstgid &&
                                            e <= this.lastgid
                                        )
                                    },
                                },
                                {
                                    key: "getViewTileId",
                                    value: function (e) {
                                        var t = e - this.firstgid
                                        return this.animations.has(t)
                                            ? this.animations.get(t).cur.tileid
                                            : t
                                    },
                                },
                                {
                                    key: "getTileProperties",
                                    value: function (e) {
                                        return this.TileProperties[e]
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        var t = 0,
                                            n = timer$1.getTime(),
                                            i = !1
                                        return (
                                            this._lastUpdate !== n &&
                                                ((this._lastUpdate = n),
                                                this.animations.forEach(
                                                    function (n) {
                                                        for (
                                                            n.dt += e,
                                                                t =
                                                                    n.cur
                                                                        .duration;
                                                            n.dt >= t;

                                                        )
                                                            (n.dt -= t),
                                                                (n.idx =
                                                                    (n.idx +
                                                                        1) %
                                                                    n.frames
                                                                        .length),
                                                                (n.cur =
                                                                    n.frames[
                                                                        n.idx
                                                                    ]),
                                                                (t =
                                                                    n.cur
                                                                        .duration),
                                                                (i = !0)
                                                    }
                                                )),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "drawTile",
                                    value: function (e, t, n, i) {
                                        if (
                                            (i.flipped &&
                                                (e.save(),
                                                e.translate(t, n),
                                                e.transform(i.currentTransform),
                                                (t = n = 0)),
                                            !0 === this.isCollection)
                                        )
                                            e.drawImage(
                                                this.imageCollection[i.tileId],
                                                0,
                                                0,
                                                i.width,
                                                i.height,
                                                t,
                                                n,
                                                i.width,
                                                i.height
                                            )
                                        else {
                                            var r =
                                                this.atlas[
                                                    this.getViewTileId(i.tileId)
                                                ].offset
                                            e.drawImage(
                                                this.image,
                                                r.x,
                                                r.y,
                                                this.tilewidth,
                                                this.tileheight,
                                                t,
                                                n,
                                                this.tilewidth + e.uvOffset,
                                                this.tileheight + e.uvOffset
                                            )
                                        }
                                        i.flipped && e.restore()
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    TMX_CLEAR_BIT_MASK = 536870911,
                    TMXTilesetGroup = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                (this.tilesets = []),
                                (this.length = 0)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "add",
                                    value: function (e) {
                                        this.tilesets.push(e), this.length++
                                    },
                                },
                                {
                                    key: "getTilesetByIndex",
                                    value: function (e) {
                                        return this.tilesets[e]
                                    },
                                },
                                {
                                    key: "getTilesetByGid",
                                    value: function (e) {
                                        var t = -1
                                        e &= TMX_CLEAR_BIT_MASK
                                        for (
                                            var n = 0, i = this.tilesets.length;
                                            n < i;
                                            n++
                                        ) {
                                            if (this.tilesets[n].contains(e))
                                                return this.tilesets[n]
                                            this.tilesets[n].firstgid ===
                                                this.tilesets[n].lastgid &&
                                                e >=
                                                    this.tilesets[n].firstgid &&
                                                (t = n)
                                        }
                                        if (-1 !== t) return this.tilesets[t]
                                        throw new Error(
                                            "no matching tileset found for gid " +
                                                e
                                        )
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    TMXObject = (function () {
                        function e(t, n, i) {
                            _classCallCheck(this, e),
                                (this.points = void 0),
                                (this.name = n.name),
                                (this.x = +n.x),
                                (this.y = +n.y),
                                (this.z = +i),
                                (this.width = +n.width || 0),
                                (this.height = +n.height || 0),
                                (this.gid = +n.gid || null),
                                (this.tintcolor = n.tintcolor),
                                (this.type = n.type),
                                (this.type = n.type),
                                (this.rotation = degToRad(+n.rotation || 0)),
                                (this.id = +n.id || void 0),
                                (this.orientation = t.orientation),
                                (this.shapes = void 0),
                                (this.isEllipse = !1),
                                (this.isPolygon = !1),
                                (this.isPolyLine = !1),
                                "number" == typeof this.gid
                                    ? this.setTile(t.tilesets)
                                    : void 0 !== n.ellipse
                                    ? (this.isEllipse = !0)
                                    : void 0 !== n.polygon
                                    ? ((this.points = n.polygon),
                                      (this.isPolygon = !0))
                                    : void 0 !== n.polyline &&
                                      ((this.points = n.polyline),
                                      (this.isPolyLine = !0)),
                                void 0 !== n.text
                                    ? ((this.text = n.text),
                                      (this.text.font =
                                          n.text.fontfamily || "sans-serif"),
                                      (this.text.size = n.text.pixelsize || 16),
                                      (this.text.fillStyle =
                                          n.text.color || "#000000"),
                                      (this.text.textAlign =
                                          n.text.halign || "left"),
                                      (this.text.textBaseline =
                                          n.text.valign || "top"),
                                      (this.text.width = this.width),
                                      (this.text.height = this.height),
                                      applyTMXProperties(this.text, n))
                                    : (applyTMXProperties(this, n),
                                      this.shapes ||
                                          (this.shapes =
                                              this.parseTMXShapes())),
                                t.isEditor ||
                                    t.getRenderer().adjustPosition(this)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "setTile",
                                    value: function (e) {
                                        var t = e.getTilesetByGid(this.gid)
                                        !1 === t.isCollection &&
                                            ((this.width = this.framewidth =
                                                t.tilewidth),
                                            (this.height = this.frameheight =
                                                t.tileheight)),
                                            (this.tile = new Tile(
                                                this.x,
                                                this.y,
                                                this.gid,
                                                t
                                            ))
                                    },
                                },
                                {
                                    key: "parseTMXShapes",
                                    value: function () {
                                        var e = 0,
                                            t = []
                                        if (!0 === this.isEllipse)
                                            t.push(
                                                new Ellipse(
                                                    this.width / 2,
                                                    this.height / 2,
                                                    this.width,
                                                    this.height
                                                ).rotate(this.rotation)
                                            )
                                        else if (!0 === this.isPolygon)
                                            t.push(
                                                new Polygon(
                                                    0,
                                                    0,
                                                    this.points
                                                ).rotate(this.rotation)
                                            )
                                        else if (!0 === this.isPolyLine) {
                                            var n,
                                                i,
                                                r = this.points,
                                                o = r.length - 1
                                            for (e = 0; e < o; e++)
                                                (n = new Vector2d(
                                                    r[e].x,
                                                    r[e].y
                                                )),
                                                    (i = new Vector2d(
                                                        r[e + 1].x,
                                                        r[e + 1].y
                                                    )),
                                                    0 !== this.rotation &&
                                                        ((n = n.rotate(
                                                            this.rotation
                                                        )),
                                                        (i = i.rotate(
                                                            this.rotation
                                                        ))),
                                                    t.push(
                                                        new Line(0, 0, [n, i])
                                                    )
                                        } else
                                            t.push(
                                                new Polygon(0, 0, [
                                                    new Vector2d(),
                                                    new Vector2d(this.width, 0),
                                                    new Vector2d(
                                                        this.width,
                                                        this.height
                                                    ),
                                                    new Vector2d(
                                                        0,
                                                        this.height
                                                    ),
                                                ]).rotate(this.rotation)
                                            )
                                        if ("isometric" === this.orientation)
                                            for (e = 0; e < t.length; e++)
                                                t[e].toIso()
                                        return t
                                    },
                                },
                                {
                                    key: "getObjectPropertyByName",
                                    value: function (e) {
                                        return this[e]
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    TMXGroup = (function () {
                        function e(t, n, i) {
                            var r = this
                            _classCallCheck(this, e),
                                (this.name = n.name),
                                (this.width = n.width || 0),
                                (this.height = n.height || 0),
                                (this.tintcolor = n.tintcolor),
                                (this.z = i),
                                (this.objects = [])
                            var o = void 0 === n.visible || n.visible
                            ;(this.opacity =
                                !0 === o ? _clamp(+n.opacity || 1, 0, 1) : 0),
                                applyTMXProperties(this, n),
                                n.objects &&
                                    n.objects.forEach(function (e) {
                                        ;(e.tintcolor = r.tintcolor),
                                            r.objects.push(
                                                new TMXObject(t, e, i)
                                            )
                                    }),
                                n.layers &&
                                    n.layers.forEach(function (e) {
                                        var n = new TMXLayer(
                                            t,
                                            e,
                                            t.tilewidth,
                                            t.tileheight,
                                            t.orientation,
                                            t.tilesets,
                                            i++
                                        )
                                        n.setRenderer(t.getRenderer()),
                                            (r.width = Math.max(
                                                r.width,
                                                n.width
                                            )),
                                            (r.height = Math.max(
                                                r.height,
                                                n.height
                                            )),
                                            r.objects.push(n)
                                    })
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.objects = null
                                    },
                                },
                                {
                                    key: "getObjectCount",
                                    value: function () {
                                        return this.objects.length
                                    },
                                },
                                {
                                    key: "getObjectByIndex",
                                    value: function (e) {
                                        return this.objects[e]
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    COLLISION_GROUP = "collision"
                function getNewDefaultRenderer(e) {
                    switch (e.orientation) {
                        case "orthogonal":
                            return new TMXOrthogonalRenderer(e)
                        case "isometric":
                            return new TMXIsometricRenderer(e)
                        case "hexagonal":
                            return new TMXHexagonalRenderer(e)
                        case "staggered":
                            return new TMXStaggeredRenderer(e)
                        default:
                            throw new Error(
                                e.orientation +
                                    " type TMX Tile Map not supported!"
                            )
                    }
                }
                function readLayer(e, t, n) {
                    return new TMXLayer(
                        e,
                        t,
                        e.tilewidth,
                        e.tileheight,
                        e.orientation,
                        e.tilesets,
                        n
                    )
                }
                function readImageLayer(e, t, n) {
                    applyTMXProperties(t.properties, t)
                    var i = pool.pull(
                            "ImageLayer",
                            +t.offsetx || +t.x || 0,
                            +t.offsety || +t.y || 0,
                            Object.assign(
                                {
                                    name: t.name,
                                    image: t.image,
                                    ratio: pool.pull(
                                        "Vector2d",
                                        +t.parallaxx || 1,
                                        +t.parallaxy || 1
                                    ),
                                    tint:
                                        void 0 !== t.tintcolor
                                            ? pool
                                                  .pull("Color")
                                                  .parseHex(t.tintcolor, !0)
                                            : void 0,
                                    z: n,
                                },
                                t.properties
                            )
                        ),
                        r = void 0 === t.visible || t.visible
                    return i.setOpacity(r ? +t.opacity : 0), i
                }
                function readTileset(e) {
                    return new TMXTileset(e)
                }
                function readObjectGroup(e, t, n) {
                    return new TMXGroup(e, t, n)
                }
                var TMXTileMap = (function () {
                        function e(t, n) {
                            if (
                                (_classCallCheck(this, e),
                                (this.data = n),
                                (this.name = t),
                                (this.cols = +n.width),
                                (this.rows = +n.height),
                                (this.tilewidth = +n.tilewidth),
                                (this.tileheight = +n.tileheight),
                                (this.infinite = +n.infinite),
                                (this.orientation = n.orientation),
                                (this.renderorder =
                                    n.renderorder || "right-down"),
                                (this.version = n.version),
                                (this.tiledversion = n.tiledversion),
                                (this.tilesets = null),
                                void 0 === this.layers && (this.layers = []),
                                void 0 === this.objectGroups &&
                                    (this.objectGroups = []),
                                (this.isEditor = "melon-editor" === n.editor),
                                (this.nextobjectid = +n.nextobjectid || void 0),
                                (this.hexsidelength = +n.hexsidelength),
                                (this.staggeraxis = n.staggeraxis),
                                (this.staggerindex = n.staggerindex),
                                (this.bounds = this.getRenderer()
                                    .getBounds()
                                    .clone()),
                                (this.width = this.bounds.width),
                                (this.height = this.bounds.height),
                                (this.backgroundcolor = n.backgroundcolor),
                                applyTMXProperties(this, n),
                                (this.initialized = !1),
                                1 === this.infinite)
                            )
                                throw new Error(
                                    "Tiled Infinite Map not supported!"
                                )
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "getRenderer",
                                    value: function () {
                                        return (
                                            (void 0 !== this.renderer &&
                                                this.renderer.canRender(
                                                    this
                                                )) ||
                                                (this.renderer =
                                                    getNewDefaultRenderer(
                                                        this
                                                    )),
                                            this.renderer
                                        )
                                    },
                                },
                                {
                                    key: "getBounds",
                                    value: function () {
                                        return this.bounds
                                    },
                                },
                                {
                                    key: "readMapObjects",
                                    value: function (e) {
                                        var t = this
                                        if (!0 !== this.initialized) {
                                            var n = 0
                                            this.tilesets ||
                                                (this.tilesets =
                                                    new TMXTilesetGroup()),
                                                void 0 !== e.tilesets &&
                                                    e.tilesets.forEach(
                                                        function (e) {
                                                            t.tilesets.add(
                                                                readTileset(e)
                                                            )
                                                        }
                                                    ),
                                                this.backgroundcolor &&
                                                    this.layers.push(
                                                        pool.pull(
                                                            "ColorLayer",
                                                            "background_color",
                                                            this
                                                                .backgroundcolor,
                                                            n++
                                                        )
                                                    ),
                                                this.background_image &&
                                                    this.layers.push(
                                                        pool.pull(
                                                            "ImageLayer",
                                                            0,
                                                            0,
                                                            {
                                                                name: "background_image",
                                                                image: this
                                                                    .background_image,
                                                                z: n++,
                                                            }
                                                        )
                                                    ),
                                                e.layers.forEach(function (e) {
                                                    switch (e.type) {
                                                        case "imagelayer":
                                                            t.layers.push(
                                                                readImageLayer(
                                                                    t,
                                                                    e,
                                                                    n++
                                                                )
                                                            )
                                                            break
                                                        case "tilelayer":
                                                            t.layers.push(
                                                                readLayer(
                                                                    t,
                                                                    e,
                                                                    n++
                                                                )
                                                            )
                                                            break
                                                        case "objectgroup":
                                                        case "group":
                                                            t.objectGroups.push(
                                                                readObjectGroup(
                                                                    t,
                                                                    e,
                                                                    n++
                                                                )
                                                            )
                                                    }
                                                }),
                                                (this.initialized = !0)
                                        }
                                    },
                                },
                                {
                                    key: "addTo",
                                    value: function (e, t, n) {
                                        var i = e.autoSort,
                                            r = e.autoDepth,
                                            o = this.getBounds()
                                        function s(t, n) {
                                            viewport.setBounds(
                                                0,
                                                0,
                                                Math.max(o.width, t),
                                                Math.max(o.height, n)
                                            ),
                                                e.pos.set(
                                                    Math.max(
                                                        0,
                                                        ~~((t - o.width) / 2)
                                                    ),
                                                    Math.max(
                                                        0,
                                                        ~~((n - o.height) / 2)
                                                    ),
                                                    e.pos.z
                                                )
                                        }
                                        ;(e.autoSort = !1),
                                            (e.autoDepth = !1),
                                            this.getLayers().forEach(function (
                                                t
                                            ) {
                                                e.addChild(t)
                                            }),
                                            this.getObjects(t).forEach(
                                                function (t) {
                                                    e.addChild(t)
                                                }
                                            ),
                                            e.resize(
                                                this.bounds.width,
                                                this.bounds.height
                                            ),
                                            e.sort(!0),
                                            !0 === n &&
                                                (off(VIEWPORT_ONRESIZE, s),
                                                s(
                                                    viewport.width,
                                                    viewport.height
                                                ),
                                                on(VIEWPORT_ONRESIZE, s, this)),
                                            (e.autoSort = i),
                                            (e.autoDepth = r)
                                    },
                                },
                                {
                                    key: "getObjects",
                                    value: function (e) {
                                        var t,
                                            n = [],
                                            i = !1
                                        this.readMapObjects(this.data)
                                        for (
                                            var r = 0;
                                            r < this.objectGroups.length;
                                            r++
                                        ) {
                                            var o = this.objectGroups[r]
                                            ;(i = o.name
                                                .toLowerCase()
                                                .includes(COLLISION_GROUP)),
                                                !1 === e &&
                                                    ((t = new Container(
                                                        0,
                                                        0,
                                                        this.width,
                                                        this.height
                                                    )).anchorPoint.set(0, 0),
                                                    (t.name = o.name),
                                                    (t.pos.z = o.z),
                                                    t.setOpacity(o.opacity),
                                                    (t.autoSort = !1),
                                                    (t.autoDepth = !1))
                                            for (
                                                var s = 0;
                                                s < o.objects.length;
                                                s++
                                            ) {
                                                var a,
                                                    l = o.objects[s]
                                                void 0 === l.anchorPoint &&
                                                    (l.anchorPoint = {
                                                        x: 0,
                                                        y: 0,
                                                    }),
                                                    void 0 !== l.tintcolor &&
                                                        ((l.tint =
                                                            pool.pull("Color")),
                                                        l.tint.parseHex(
                                                            l.tintcolor,
                                                            !0
                                                        )),
                                                    l instanceof TMXLayer
                                                        ? (a = l)
                                                        : "object" ===
                                                          _typeof(l.text)
                                                        ? (void 0 ===
                                                              l.text
                                                                  .anchorPoint &&
                                                              (l.text.anchorPoint =
                                                                  l.anchorPoint),
                                                          ((a =
                                                              !0 ===
                                                              l.text.bitmap
                                                                  ? pool.pull(
                                                                        "BitmapText",
                                                                        l.x,
                                                                        l.y,
                                                                        l.text
                                                                    )
                                                                  : pool.pull(
                                                                        "Text",
                                                                        l.x,
                                                                        l.y,
                                                                        l.text
                                                                    )).pos.z =
                                                              l.z))
                                                        : "object" ===
                                                          _typeof(l.tile)
                                                        ? (((a =
                                                              l.tile.getRenderable(
                                                                  l
                                                              )).body = new Body(
                                                              a,
                                                              l.shapes ||
                                                                  new Rect(
                                                                      0,
                                                                      0,
                                                                      this.width,
                                                                      this.height
                                                                  )
                                                          )),
                                                          a.body.setStatic(!0),
                                                          a.pos.setMuted(
                                                              l.x,
                                                              l.y,
                                                              l.z
                                                          ))
                                                        : (void 0 !== l.name &&
                                                          "" !== l.name
                                                              ? (a = pool.pull(
                                                                    l.name,
                                                                    l.x,
                                                                    l.y,
                                                                    l
                                                                ))
                                                              : ((a = pool.pull(
                                                                    "Renderable",
                                                                    l.x,
                                                                    l.y,
                                                                    l.width,
                                                                    l.height
                                                                )).anchorPoint.set(
                                                                    0,
                                                                    0
                                                                ),
                                                                (a.name =
                                                                    l.name),
                                                                (a.type =
                                                                    l.type),
                                                                (a.id = l.id),
                                                                (a.body =
                                                                    new Body(
                                                                        a,
                                                                        l.shapes ||
                                                                            new Rect(
                                                                                0,
                                                                                0,
                                                                                a.width,
                                                                                a.height
                                                                            )
                                                                    )),
                                                                a.body.setStatic(
                                                                    !0
                                                                ),
                                                                a.resize(
                                                                    a.body.getBounds()
                                                                        .width,
                                                                    a.body.getBounds()
                                                                        .height
                                                                )),
                                                          (a.pos.z = l.z)),
                                                    i &&
                                                        !l.name &&
                                                        a.body &&
                                                        (a.body.collisionType =
                                                            collision.types.WORLD_SHAPE),
                                                    !1 !== e
                                                        ? (!0 ===
                                                              a.isRenderable &&
                                                              (a.setOpacity(
                                                                  a.getOpacity() *
                                                                      o.opacity
                                                              ),
                                                              a.renderable instanceof
                                                                  Renderable &&
                                                                  a.renderable.setOpacity(
                                                                      a.renderable.getOpacity() *
                                                                          o.opacity
                                                                  )),
                                                          n.push(a))
                                                        : t.addChild(a)
                                            }
                                            !1 === e &&
                                                t.children.length > 0 &&
                                                ((t.autoSort = !0),
                                                (t.autoDepth = !0),
                                                n.push(t))
                                        }
                                        return n
                                    },
                                },
                                {
                                    key: "getLayers",
                                    value: function () {
                                        return (
                                            this.readMapObjects(this.data),
                                            this.layers
                                        )
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        ;(this.tilesets = void 0),
                                            (this.layers.length = 0),
                                            (this.objectGroups.length = 0),
                                            (this.initialized = !1)
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    levels = {},
                    levelIdx = [],
                    currentLevelIdx = 0
                function safeLoadLevel(e, t, n) {
                    t.container.reset(),
                        _reset(),
                        levels[level.getCurrentLevelId()] &&
                            levels[level.getCurrentLevelId()].destroy(),
                        (currentLevelIdx = levelIdx.indexOf(e)),
                        loadTMXLevel(
                            e,
                            t.container,
                            t.flatten,
                            t.setViewportBounds
                        ),
                        emit(LEVEL_LOADED, e),
                        t.onLoaded(e),
                        n && state.restart()
                }
                function loadTMXLevel(e, t, n, i) {
                    var r = levels[e]
                    utils.resetGUID(e, r.nextobjectid),
                        t.anchorPoint.set(0, 0),
                        r.addTo(t, n, i)
                }
                var level = {
                        add: function (e, t, n) {
                            if ("tmx" === e)
                                return (
                                    null == levels[t] &&
                                    ((levels[t] = new TMXTileMap(
                                        t,
                                        loader.getTMX(t)
                                    )),
                                    levelIdx.push(t),
                                    n && n(),
                                    !0)
                                )
                            throw new Error(
                                "no level loader defined for format " + e
                            )
                        },
                        load: function (e, t) {
                            if (
                                ((t = Object.assign(
                                    {
                                        container: world,
                                        onLoaded: onLevelLoaded,
                                        flatten: mergeGroup,
                                        setViewportBounds: !0,
                                    },
                                    t || {}
                                )),
                                void 0 === levels[e])
                            )
                                throw new Error("level " + e + " not found")
                            if (!(levels[e] instanceof TMXTileMap))
                                throw new Error("no level loader defined")
                            return (
                                state.isRunning()
                                    ? (state.stop(),
                                      utils.function.defer(
                                          safeLoadLevel,
                                          this,
                                          e,
                                          t,
                                          !0
                                      ))
                                    : safeLoadLevel(e, t),
                                !0
                            )
                        },
                        getCurrentLevelId: function () {
                            return levelIdx[currentLevelIdx]
                        },
                        getCurrentLevel: function () {
                            return levels[this.getCurrentLevelId()]
                        },
                        reload: function (e) {
                            return this.load(this.getCurrentLevelId(), e)
                        },
                        next: function (e) {
                            return (
                                currentLevelIdx + 1 < levelIdx.length &&
                                this.load(levelIdx[currentLevelIdx + 1], e)
                            )
                        },
                        previous: function (e) {
                            return (
                                currentLevelIdx - 1 >= 0 &&
                                this.load(levelIdx[currentLevelIdx - 1], e)
                            )
                        },
                        levelCount: function () {
                            return levelIdx.length
                        },
                    },
                    imgList = {},
                    tmxList = {},
                    binList = {},
                    jsonList = {},
                    baseURL = {},
                    resourceCount = 0,
                    loadCount = 0,
                    timerId$1 = 0
                function checkLoadStatus(e) {
                    if (loadCount === resourceCount) {
                        if (!e && !loader.onload)
                            throw new Error("no load callback defined")
                        clearTimeout(timerId$1)
                        var t = e || loader.onload
                        setTimeout(function () {
                            t(), emit(LOADER_COMPLETE)
                        }, 300)
                    } else
                        timerId$1 = setTimeout(function () {
                            checkLoadStatus(e)
                        }, 100)
                }
                function preloadImage(e, t, n) {
                    ;(imgList[e.name] = new Image()),
                        (imgList[e.name].onload = t),
                        (imgList[e.name].onerror = n),
                        "string" == typeof loader.crossOrigin &&
                            (imgList[e.name].crossOrigin = loader.crossOrigin),
                        (imgList[e.name].src = e.src + loader.nocache)
                }
                function preloadFontFace(e, t, n) {
                    var i = new FontFace(e.name, e.src)
                    i.load().then(
                        function () {
                            document.fonts.add(i),
                                (document.body.style.fontFamily = e.name),
                                t()
                        },
                        function () {
                            n(e.name)
                        }
                    )
                }
                function preloadTMX(e, t, n) {
                    function i(t) {
                        ;(tmxList[e.name] = t),
                            "tmx" === e.type && level.add(e.type, e.name)
                    }
                    if (e.data) return i(e.data), void t()
                    var r = new XMLHttpRequest(),
                        o = getExtension(e.src)
                    r.overrideMimeType &&
                        ("json" === o
                            ? r.overrideMimeType("application/json")
                            : r.overrideMimeType("text/xml")),
                        r.open("GET", e.src + loader.nocache, !0),
                        (r.withCredentials = loader.withCredentials),
                        (r.ontimeout = n),
                        (r.onreadystatechange = function () {
                            if (4 === r.readyState)
                                if (
                                    200 === r.status ||
                                    (0 === r.status && r.responseText)
                                ) {
                                    var s = null
                                    switch (o) {
                                        case "xml":
                                        case "tmx":
                                        case "tsx":
                                            if (
                                                device$1.ua.match(/msie/i) ||
                                                !r.responseXML
                                            ) {
                                                if (!window.DOMParser)
                                                    throw new Error(
                                                        "XML file format loading not supported, use the JSON file format instead"
                                                    )
                                                s =
                                                    new DOMParser().parseFromString(
                                                        r.responseText,
                                                        "text/xml"
                                                    )
                                            } else s = r.responseXML
                                            var a = parse(s)
                                            switch (o) {
                                                case "tmx":
                                                    s = a.map
                                                    break
                                                case "tsx":
                                                    s = a.tilesets[0]
                                            }
                                            break
                                        case "json":
                                            s = JSON.parse(r.responseText)
                                            break
                                        default:
                                            throw new Error(
                                                "TMX file format " +
                                                    o +
                                                    "not supported !"
                                            )
                                    }
                                    i(s), t()
                                } else n(e.name)
                        }),
                        r.send()
                }
                function preloadJSON(e, t, n) {
                    var i = new XMLHttpRequest()
                    i.overrideMimeType &&
                        i.overrideMimeType("application/json"),
                        i.open("GET", e.src + loader.nocache, !0),
                        (i.withCredentials = loader.withCredentials),
                        (i.ontimeout = n),
                        (i.onreadystatechange = function () {
                            4 === i.readyState &&
                                (200 === i.status ||
                                (0 === i.status && i.responseText)
                                    ? ((jsonList[e.name] = JSON.parse(
                                          i.responseText
                                      )),
                                      t())
                                    : n(e.name))
                        }),
                        i.send()
                }
                function preloadBinary(e, t, n) {
                    var i = new XMLHttpRequest()
                    i.open("GET", e.src + loader.nocache, !0),
                        (i.withCredentials = loader.withCredentials),
                        (i.responseType = "arraybuffer"),
                        (i.onerror = n),
                        (i.onload = function () {
                            var n = i.response
                            if (n) {
                                for (
                                    var r = new Uint8Array(n), o = [], s = 0;
                                    s < r.byteLength;
                                    s++
                                )
                                    o[s] = String.fromCharCode(r[s])
                                ;(binList[e.name] = o.join("")), t()
                            }
                        }),
                        i.send()
                }
                function preloadJavascript(e, t, n) {
                    var i = document.createElement("script")
                    ;(i.src = e.src),
                        (i.type = "text/javascript"),
                        "string" == typeof loader.crossOrigin &&
                            (i.crossOrigin = loader.crossOrigin),
                        (i.defer = !0),
                        (i.onload = function () {
                            t()
                        }),
                        (i.onerror = function () {
                            n(e.name)
                        }),
                        document.getElementsByTagName("body")[0].appendChild(i)
                }
                var loader = {
                        nocache: "",
                        onload: void 0,
                        onProgress: void 0,
                        crossOrigin: void 0,
                        withCredentials: !1,
                        onResourceLoaded: function (e) {
                            var t = ++loadCount / resourceCount
                            this.onProgress && this.onProgress(t, e),
                                emit(LOADER_PROGRESS, t, e)
                        },
                        onLoadingError: function (e) {
                            throw new Error("Failed loading resource " + e.src)
                        },
                        setNocache: function (e) {
                            this.nocache = e
                                ? "?" + ~~(1e7 * Math.random())
                                : ""
                        },
                        setBaseURL: function (e, t) {
                            "*" !== e
                                ? (baseURL[e] = t)
                                : ((baseURL.audio = t),
                                  (baseURL.binary = t),
                                  (baseURL.image = t),
                                  (baseURL.json = t),
                                  (baseURL.js = t),
                                  (baseURL.tmx = t),
                                  (baseURL.tsx = t))
                        },
                        preload: function (e, t) {
                            for (
                                var n =
                                        !(
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2]
                                        ) || arguments[2],
                                    i = 0;
                                i < e.length;
                                i++
                            )
                                resourceCount += this.load(
                                    e[i],
                                    this.onResourceLoaded.bind(this, e[i]),
                                    this.onLoadingError.bind(this, e[i])
                                )
                            void 0 !== t && (this.onload = t),
                                !0 === n && state.change(state.LOADING),
                                checkLoadStatus(t)
                        },
                        load: function (e, t, n) {
                            switch (
                                (void 0 !== baseURL[e.type] &&
                                    (e.src = baseURL[e.type] + e.src),
                                e.type)
                            ) {
                                case "binary":
                                    return preloadBinary.call(this, e, t, n), 1
                                case "image":
                                    return preloadImage.call(this, e, t, n), 1
                                case "json":
                                    return preloadJSON.call(this, e, t, n), 1
                                case "js":
                                    return (
                                        preloadJavascript.call(this, e, t, n), 1
                                    )
                                case "tmx":
                                case "tsx":
                                    return preloadTMX.call(this, e, t, n), 1
                                case "audio":
                                    return _load(e, !!e.stream, t, n), 1
                                case "fontface":
                                    return (
                                        preloadFontFace.call(this, e, t, n), 1
                                    )
                                default:
                                    throw new Error(
                                        "load : unknown or invalid resource type : " +
                                            e.type
                                    )
                            }
                        },
                        unload: function (e) {
                            switch (e.type) {
                                case "binary":
                                    return (
                                        e.name in binList &&
                                        (delete binList[e.name], !0)
                                    )
                                case "image":
                                    return (
                                        e.name in imgList &&
                                        (delete imgList[e.name], !0)
                                    )
                                case "json":
                                    return (
                                        e.name in jsonList &&
                                        (delete jsonList[e.name], !0)
                                    )
                                case "js":
                                case "fontface":
                                    return !0
                                case "tmx":
                                case "tsx":
                                    return (
                                        e.name in tmxList &&
                                        (delete tmxList[e.name], !0)
                                    )
                                case "audio":
                                    return _unload(e.name)
                                default:
                                    throw new Error(
                                        "unload : unknown or invalid resource type : " +
                                            e.type
                                    )
                            }
                        },
                        unloadAll: function () {
                            var e
                            for (e in binList)
                                binList.hasOwnProperty(e) &&
                                    this.unload({ name: e, type: "binary" })
                            for (e in imgList)
                                imgList.hasOwnProperty(e) &&
                                    this.unload({ name: e, type: "image" })
                            for (e in tmxList)
                                tmxList.hasOwnProperty(e) &&
                                    this.unload({ name: e, type: "tmx" })
                            for (e in jsonList)
                                jsonList.hasOwnProperty(e) &&
                                    this.unload({ name: e, type: "json" })
                            _unloadAll()
                        },
                        getTMX: function (e) {
                            return (e = "" + e) in tmxList ? tmxList[e] : null
                        },
                        getBinary: function (e) {
                            return (e = "" + e) in binList ? binList[e] : null
                        },
                        getImage: function (e) {
                            return (e = getBasename("" + e)) in imgList
                                ? imgList[e]
                                : null
                        },
                        getJSON: function (e) {
                            return (e = "" + e) in jsonList ? jsonList[e] : null
                        },
                    },
                    audioTracks = {},
                    current_track_id = null,
                    retry_counter = 0,
                    audioExts = [],
                    soundLoadError = function (e, t) {
                        if (retry_counter++ > 3)
                            throw new Error("melonJS: failed loading " + e)
                        audioTracks[e].load()
                    },
                    stopOnAudioError = !0
                function init$1() {
                    var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : "mp3"
                    return (audioExts = e.split(",")), !howler.Howler.noAudio
                }
                function hasFormat(e) {
                    return hasAudio() && howler.Howler.codecs(e)
                }
                function hasAudio() {
                    return !howler.Howler.noAudio
                }
                function enable() {
                    unmuteAll()
                }
                function disable() {
                    muteAll()
                }
                function _load(e, t, n, i) {
                    var r = []
                    if (0 === audioExts.length)
                        throw new Error(
                            "target audio extension(s) should be set through me.audio.init() before calling the preloader."
                        )
                    for (var o = 0; o < audioExts.length; o++)
                        r.push(
                            e.src + e.name + "." + audioExts[o] + loader.nocache
                        )
                    return (
                        (audioTracks[e.name] = new howler.Howl({
                            src: r,
                            volume: howler.Howler.volume(),
                            html5: !0 === t,
                            xhrWithCredentials: loader.withCredentials,
                            onloaderror: function () {
                                soundLoadError.call(this, e.name, i)
                            },
                            onload: function () {
                                ;(retry_counter = 0), n && n()
                            },
                        })),
                        1
                    )
                }
                function play(e) {
                    var t =
                            arguments.length > 1 &&
                            void 0 !== arguments[1] &&
                            arguments[1],
                        n = arguments.length > 2 ? arguments[2] : void 0,
                        i = arguments.length > 3 ? arguments[3] : void 0,
                        r = audioTracks[e]
                    if (r && void 0 !== r) {
                        var o = r.play()
                        return (
                            "boolean" == typeof t && r.loop(t, o),
                            r.volume(
                                "number" == typeof i
                                    ? _clamp(i, 0, 1)
                                    : howler.Howler.volume(),
                                o
                            ),
                            "function" == typeof n &&
                                (!0 === t
                                    ? r.on("end", n, o)
                                    : r.once("end", n, o)),
                            o
                        )
                    }
                    throw new Error("audio clip " + e + " does not exist")
                }
                function fade(e, t, n, i, r) {
                    var o = audioTracks[e]
                    if (!o || void 0 === o)
                        throw new Error("audio clip " + e + " does not exist")
                    o.fade(t, n, i, r)
                }
                function seek(e) {
                    var t = audioTracks[e]
                    if (t && void 0 !== t) {
                        for (
                            var n = arguments.length,
                                i = new Array(n > 1 ? n - 1 : 0),
                                r = 1;
                            r < n;
                            r++
                        )
                            i[r - 1] = arguments[r]
                        return t.seek.apply(t, i)
                    }
                    throw new Error("audio clip " + e + " does not exist")
                }
                function rate(e) {
                    var t = audioTracks[e]
                    if (t && void 0 !== t) {
                        for (
                            var n = arguments.length,
                                i = new Array(n > 1 ? n - 1 : 0),
                                r = 1;
                            r < n;
                            r++
                        )
                            i[r - 1] = arguments[r]
                        return t.rate.apply(t, i)
                    }
                    throw new Error("audio clip " + e + " does not exist")
                }
                function stop(e, t) {
                    if (void 0 !== e) {
                        var n = audioTracks[e]
                        if (!n || void 0 === n)
                            throw new Error(
                                "audio clip " + e + " does not exist"
                            )
                        n.stop(t), n.off("end", void 0, t)
                    } else howler.Howler.stop()
                }
                function pause(e, t) {
                    var n = audioTracks[e]
                    if (!n || void 0 === n)
                        throw new Error("audio clip " + e + " does not exist")
                    n.pause(t)
                }
                function resume(e, t) {
                    var n = audioTracks[e]
                    if (!n || void 0 === n)
                        throw new Error("audio clip " + e + " does not exist")
                    n.play(t)
                }
                function playTrack(e, t) {
                    return play((current_track_id = e), !0, null, t)
                }
                function stopTrack() {
                    null !== current_track_id &&
                        (audioTracks[current_track_id].stop(),
                        (current_track_id = null))
                }
                function pauseTrack() {
                    null !== current_track_id &&
                        audioTracks[current_track_id].pause()
                }
                function resumeTrack() {
                    null !== current_track_id &&
                        audioTracks[current_track_id].play()
                }
                function getCurrentTrack() {
                    return current_track_id
                }
                function setVolume(e) {
                    howler.Howler.volume(e)
                }
                function getVolume() {
                    return howler.Howler.volume()
                }
                function mute(e, t, n) {
                    n = void 0 === n || !!n
                    var i = audioTracks[e]
                    if (!i || void 0 === i)
                        throw new Error("audio clip " + e + " does not exist")
                    i.mute(n, t)
                }
                function unmute(e, t) {
                    mute(e, t, !1)
                }
                function muteAll() {
                    howler.Howler.mute(!0)
                }
                function unmuteAll() {
                    howler.Howler.mute(!1)
                }
                function muted() {
                    return howler.Howler._muted
                }
                function _unload(e) {
                    return (
                        e in audioTracks &&
                        (audioTracks[e].unload(), delete audioTracks[e], !0)
                    )
                }
                function _unloadAll() {
                    for (var e in audioTracks)
                        audioTracks.hasOwnProperty(e) && _unload(e)
                }
                var audio = Object.freeze({
                        __proto__: null,
                        stopOnAudioError,
                        init: init$1,
                        hasFormat,
                        hasAudio,
                        enable,
                        disable,
                        load: _load,
                        play,
                        fade,
                        seek,
                        rate,
                        stop,
                        pause,
                        resume,
                        playTrack,
                        stopTrack,
                        pauseTrack,
                        resumeTrack,
                        getCurrentTrack,
                        setVolume,
                        getVolume,
                        mute,
                        unmute,
                        muteAll,
                        unmuteAll,
                        muted,
                        unload: _unload,
                        unloadAll: _unloadAll,
                    }),
                    data = {}
                function isReserved(e) {
                    return "add" === e || "remove" === e
                }
                on(BOOT, function () {
                    if (!0 === device$1.localStorage) {
                        var e = localStorage.getItem("me.save")
                        "string" == typeof e &&
                            e.length > 0 &&
                            (JSON.parse(e) || []).forEach(function (e) {
                                data[e] = JSON.parse(
                                    localStorage.getItem("me.save." + e)
                                )
                            })
                    }
                })
                var save = {
                        add: function (e) {
                            var t = save
                            Object.keys(e).forEach(function (n) {
                                var i
                                isReserved(n) ||
                                    ((i = n),
                                    Object.defineProperty(t, i, {
                                        configurable: !0,
                                        enumerable: !0,
                                        get: function () {
                                            return data[i]
                                        },
                                        set: function (e) {
                                            ;(data[i] = e),
                                                !0 === device$1.localStorage &&
                                                    localStorage.setItem(
                                                        "me.save." + i,
                                                        JSON.stringify(e)
                                                    )
                                        },
                                    }),
                                    n in data || (t[n] = e[n]))
                            }),
                                !0 === device$1.localStorage &&
                                    localStorage.setItem(
                                        "me.save",
                                        JSON.stringify(Object.keys(data))
                                    )
                        },
                        remove: function (e) {
                            isReserved(e) ||
                                (void 0 !== data[e] &&
                                    (delete data[e],
                                    !0 === device$1.localStorage &&
                                        (localStorage.removeItem(
                                            "me.save." + e
                                        ),
                                        localStorage.setItem(
                                            "me.save",
                                            JSON.stringify(Object.keys(data))
                                        ))))
                        },
                    },
                    accelInitialized = !1,
                    deviceOrientationInitialized = !1,
                    swipeEnabled = !0
                function _disableSwipeFn(e) {
                    return (
                        e.preventDefault(),
                        "function" == typeof window.scroll &&
                            window.scroll(0, 0),
                        !1
                    )
                }
                var readyBound = !1,
                    isReady = !1,
                    readyList = []
                function _domReady() {
                    if (!isReady) {
                        if (!document.body) return setTimeout(_domReady, 13)
                        for (
                            document.removeEventListener &&
                                document.removeEventListener(
                                    "DOMContentLoaded",
                                    this._domReady,
                                    !1
                                ),
                                window.removeEventListener(
                                    "load",
                                    _domReady,
                                    !1
                                );
                            readyList.length;

                        )
                            readyList.shift().call(window, [])
                        isReady = !0
                    }
                }
                var _domRect = {
                    left: 0,
                    top: 0,
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0,
                    right: 0,
                    bottom: 0,
                }
                function _detectDevice() {
                    ;(device.iOS = /iPhone|iPad|iPod/i.test(device.ua)),
                        (device.android = /Android/i.test(device.ua)),
                        (device.android2 = /Android 2/i.test(device.ua)),
                        (device.linux = /Linux/i.test(device.ua)),
                        (device.chromeOS = /CrOS/.test(device.ua)),
                        (device.wp = /Windows Phone/i.test(device.ua)),
                        (device.BlackBerry = /BlackBerry/i.test(device.ua)),
                        (device.Kindle = /Kindle|Silk.*Mobile Safari/i.test(
                            device.ua
                        )),
                        (device.isMobile =
                            /Mobi/i.test(device.ua) ||
                            device.iOS ||
                            device.android ||
                            device.wp ||
                            device.BlackBerry ||
                            device.Kindle ||
                            !1),
                        (device.ejecta = void 0 !== window.ejecta),
                        (device.isWeixin = /MicroMessenger/i.test(device.ua))
                }
                function _checkCapabilities() {
                    _detectDevice(),
                        device.isMobile && device.enableSwipe(!1),
                        (device.TouchEvent = !!("ontouchstart" in window)),
                        (device.PointerEvent = !!window.PointerEvent),
                        (window.gesture = prefixed("gesture")),
                        (device.touch =
                            device.TouchEvent || device.PointerEvent),
                        (device.maxTouchPoints = device.touch
                            ? device.PointerEvent
                                ? navigator.maxTouchPoints || 1
                                : 10
                            : 1),
                        (device.wheel =
                            "onwheel" in document.createElement("div")),
                        (device.hasPointerLockSupport = prefixed(
                            "pointerLockElement",
                            document
                        )),
                        device.hasPointerLockSupport &&
                            (document.exitPointerLock = prefixed(
                                "exitPointerLock",
                                document
                            )),
                        (device.hasDeviceOrientation =
                            !!window.DeviceOrientationEvent),
                        (device.hasAccelerometer = !!window.DeviceMotionEvent),
                        (device.ScreenOrientation =
                            "undefined" != typeof screen &&
                            void 0 !== screen.orientation),
                        (device.hasFullscreenSupport =
                            prefixed("fullscreenEnabled", document) ||
                            document.mozFullScreenEnabled),
                        (document.exitFullscreen =
                            prefixed("cancelFullScreen", document) ||
                            prefixed("exitFullscreen", document)),
                        (navigator.vibrate = prefixed("vibrate", navigator)),
                        (device.hasWebAudio = !(
                            !window.AudioContext && !window.webkitAudioContext
                        ))
                    try {
                        device.localStorage = !!window.localStorage
                    } catch (e) {
                        device.localStorage = !1
                    }
                    try {
                        device.OffscreenCanvas =
                            void 0 !== window.OffscreenCanvas &&
                            null !== new OffscreenCanvas(0, 0).getContext("2d")
                    } catch (e) {
                        device.OffscreenCanvas = !1
                    }
                    var e, t
                    window.addEventListener(
                        "blur",
                        function () {
                            device.stopOnBlur && state.stop(!0),
                                device.pauseOnBlur && state.pause(!0)
                        },
                        !1
                    ),
                        window.addEventListener(
                            "focus",
                            function () {
                                device.stopOnBlur && state.restart(!0),
                                    device.resumeOnFocus && state.resume(!0),
                                    device.autoFocus && device.focus()
                            },
                            !1
                        ),
                        void 0 !== document.hidden
                            ? ((e = "hidden"), (t = "visibilitychange"))
                            : void 0 !== document.mozHidden
                            ? ((e = "mozHidden"), (t = "mozvisibilitychange"))
                            : void 0 !== document.msHidden
                            ? ((e = "msHidden"), (t = "msvisibilitychange"))
                            : void 0 !== document.webkitHidden &&
                              ((e = "webkitHidden"),
                              (t = "webkitvisibilitychange")),
                        "string" == typeof t &&
                            document.addEventListener(
                                t,
                                function () {
                                    document[e]
                                        ? (device.stopOnBlur && state.stop(!0),
                                          device.pauseOnBlur && state.pause(!0))
                                        : (device.stopOnBlur &&
                                              state.restart(!0),
                                          device.resumeOnFocus &&
                                              state.resume(!0))
                                },
                                !1
                            )
                }
                on(BOOT, function () {
                    _checkCapabilities()
                })
                var device = {
                    ua: navigator.userAgent,
                    localStorage: !1,
                    hasAccelerometer: !1,
                    hasDeviceOrientation: !1,
                    ScreenOrientation: !1,
                    hasFullscreenSupport: !1,
                    hasPointerLockSupport: !1,
                    hasWebAudio: !1,
                    nativeBase64: "function" == typeof window.atob,
                    maxTouchPoints: 1,
                    touch: !1,
                    wheel: !1,
                    isMobile: !1,
                    iOS: !1,
                    android: !1,
                    android2: !1,
                    linux: !1,
                    ejecta: !1,
                    isWeixin: !1,
                    chromeOS: !1,
                    wp: !1,
                    BlackBerry: !1,
                    Kindle: !1,
                    accelerationX: 0,
                    accelerationY: 0,
                    accelerationZ: 0,
                    gamma: 0,
                    beta: 0,
                    alpha: 0,
                    language:
                        navigator.language ||
                        navigator.browserLanguage ||
                        navigator.userLanguage ||
                        "en",
                    pauseOnBlur: !0,
                    resumeOnFocus: !0,
                    autoFocus: !0,
                    stopOnBlur: !1,
                    OffscreenCanvas: !1,
                    onReady: function (e) {
                        isReady
                            ? e.call(window, [])
                            : (readyList.push(e),
                              readyBound ||
                                  ("complete" === document.readyState
                                      ? window.setTimeout(_domReady, 0)
                                      : (document.addEventListener &&
                                            document.addEventListener(
                                                "DOMContentLoaded",
                                                _domReady,
                                                !1
                                            ),
                                        window.addEventListener(
                                            "load",
                                            _domReady,
                                            !1
                                        )),
                                  (readyBound = !0)))
                    },
                    enableSwipe: function (e) {
                        !1 !== e
                            ? !1 === swipeEnabled &&
                              (window.document.removeEventListener(
                                  "touchmove",
                                  _disableSwipeFn,
                                  !1
                              ),
                              (swipeEnabled = !0))
                            : !0 === swipeEnabled &&
                              (window.document.addEventListener(
                                  "touchmove",
                                  _disableSwipeFn,
                                  !1
                              ),
                              (swipeEnabled = !1))
                    },
                    requestFullscreen: function (e) {
                        this.hasFullscreenSupport &&
                            (((e = e || getParent()).requestFullscreen =
                                prefixed("requestFullscreen", e) ||
                                e.mozRequestFullScreen),
                            e.requestFullscreen())
                    },
                    exitFullscreen: function () {
                        this.hasFullscreenSupport && document.exitFullscreen()
                    },
                    getScreenOrientation: function () {
                        var e = "portrait",
                            t = "landscape",
                            n = window.screen
                        if (!0 === this.ScreenOrientation) {
                            var i = prefixed("orientation", n)
                            if (void 0 !== i && "string" == typeof i.type)
                                return i.type
                            if ("string" == typeof i) return i
                        }
                        return "number" == typeof window.orientation
                            ? 90 === Math.abs(window.orientation)
                                ? t
                                : e
                            : window.outerWidth > window.outerHeight
                            ? t
                            : e
                    },
                    lockOrientation: function (e) {
                        var t = window.screen
                        if (void 0 !== t) {
                            var n = prefixed("lockOrientation", t)
                            if (void 0 !== n) return n(e)
                        }
                        return !1
                    },
                    unlockOrientation: function () {
                        var e = window.screen
                        if (void 0 !== e) {
                            var t = prefixed("unlockOrientation", e)
                            if (void 0 !== t) return t()
                        }
                        return !1
                    },
                    isPortrait: function () {
                        return this.getScreenOrientation().includes("portrait")
                    },
                    isLandscape: function () {
                        return this.getScreenOrientation().includes("landscape")
                    },
                    getStorage: function () {
                        var e =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : "local"
                        if ("local" === e) return save
                        throw new Error("storage type " + e + " not supported")
                    },
                    getParentElement: function (e) {
                        var t = this.getElement(e)
                        return null !== t.parentNode && (t = t.parentNode), t
                    },
                    getElement: function (e) {
                        var t = null
                        return (
                            "undefined" !== e &&
                                ("string" == typeof e
                                    ? (t = document.getElementById(e))
                                    : "object" === _typeof(e) &&
                                      e.nodeType === Node.ELEMENT_NODE &&
                                      (t = e)),
                            t || (t = document.body),
                            t
                        )
                    },
                    getElementBounds: function (e) {
                        return "object" === _typeof(e) &&
                            e !== document.body &&
                            void 0 !== e.getBoundingClientRect
                            ? e.getBoundingClientRect()
                            : ((_domRect.width = _domRect.right =
                                  window.innerWidth),
                              (_domRect.height = _domRect.bottom =
                                  window.innerHeight),
                              _domRect)
                    },
                    getParentBounds: function (e) {
                        return this.getElementBounds(this.getParentElement(e))
                    },
                    isWebGLSupported: function (e) {
                        var t = !1
                        try {
                            var n = document.createElement("canvas"),
                                i = {
                                    stencil: !0,
                                    failIfMajorPerformanceCaveat:
                                        e.failIfMajorPerformanceCaveat,
                                }
                            t = !(
                                !window.WebGLRenderingContext ||
                                (!n.getContext("webgl", i) &&
                                    !n.getContext("experimental-webgl", i))
                            )
                        } catch (e) {
                            t = !1
                        }
                        return t
                    },
                    getMaxShaderPrecision: function (e) {
                        return e.getShaderPrecisionFormat(
                            e.VERTEX_SHADER,
                            e.HIGH_FLOAT
                        ).precision > 0 &&
                            e.getShaderPrecisionFormat(
                                e.FRAGMENT_SHADER,
                                e.HIGH_FLOAT
                            ).precision > 0
                            ? "highp"
                            : e.getShaderPrecisionFormat(
                                  e.VERTEX_SHADER,
                                  e.MEDIUM_FLOAT
                              ).precision > 0 &&
                              e.getShaderPrecisionFormat(
                                  e.FRAGMENT_SHADER,
                                  e.MEDIUM_FLOAT
                              ).precision > 0
                            ? "mediump"
                            : "lowp"
                    },
                    focus: function () {
                        "function" == typeof window.focus && window.focus()
                    },
                    onDeviceMotion: function (e) {
                        ;(this.accelerationX =
                            e.accelerationIncludingGravity.x),
                            (this.accelerationY =
                                e.accelerationIncludingGravity.y),
                            (this.accelerationZ =
                                e.accelerationIncludingGravity.z)
                    },
                    onDeviceRotate: function (e) {
                        ;(this.gamma = e.gamma),
                            (this.beta = e.beta),
                            (this.alpha = e.alpha)
                    },
                    turnOnPointerLock: function () {
                        if (this.hasPointerLockSupport) {
                            var e = getParent()
                            if (this.ua.match(/Firefox/i)) {
                                var t = function t() {
                                    ;(prefixed("fullscreenElement", document) ||
                                        document.mozFullScreenElement) === e &&
                                        (document.removeEventListener(
                                            "fullscreenchange",
                                            t
                                        ),
                                        document.removeEventListener(
                                            "mozfullscreenchange",
                                            t
                                        ),
                                        (e.requestPointerLock = prefixed(
                                            "requestPointerLock",
                                            e
                                        )),
                                        e.requestPointerLock())
                                }
                                document.addEventListener(
                                    "fullscreenchange",
                                    t,
                                    !1
                                ),
                                    document.addEventListener(
                                        "mozfullscreenchange",
                                        t,
                                        !1
                                    ),
                                    this.requestFullscreen()
                            } else e.requestPointerLock()
                        }
                    },
                    turnOffPointerLock: function () {
                        this.hasPointerLockSupport && document.exitPointerLock()
                    },
                    watchAccelerometer: function () {
                        var e = this
                        return (
                            this.hasAccelerometer &&
                                !accelInitialized &&
                                (DeviceOrientationEvent &&
                                "function" ==
                                    typeof DeviceOrientationEvent.requestPermission
                                    ? DeviceOrientationEvent.requestPermission()
                                          .then(function (t) {
                                              "granted" === t &&
                                                  (window.addEventListener(
                                                      "devicemotion",
                                                      e.onDeviceMotion,
                                                      !1
                                                  ),
                                                  (accelInitialized = !0))
                                          })
                                          .catch(console.error)
                                    : (window.addEventListener(
                                          "devicemotion",
                                          this.onDeviceMotion,
                                          !1
                                      ),
                                      (accelInitialized = !0))),
                            accelInitialized
                        )
                    },
                    unwatchAccelerometer: function () {
                        accelInitialized &&
                            (window.removeEventListener(
                                "devicemotion",
                                this.onDeviceMotion,
                                !1
                            ),
                            (accelInitialized = !1))
                    },
                    watchDeviceOrientation: function () {
                        var e = this
                        return (
                            this.hasDeviceOrientation &&
                                !deviceOrientationInitialized &&
                                ("function" ==
                                typeof DeviceOrientationEvent.requestPermission
                                    ? DeviceOrientationEvent.requestPermission()
                                          .then(function (t) {
                                              "granted" === t &&
                                                  (window.addEventListener(
                                                      "deviceorientation",
                                                      e.onDeviceRotate,
                                                      !1
                                                  ),
                                                  (deviceOrientationInitialized =
                                                      !0))
                                          })
                                          .catch(console.error)
                                    : (window.addEventListener(
                                          "deviceorientation",
                                          this.onDeviceRotate,
                                          !1
                                      ),
                                      (deviceOrientationInitialized = !0))),
                            deviceOrientationInitialized
                        )
                    },
                    unwatchDeviceOrientation: function () {
                        deviceOrientationInitialized &&
                            (window.removeEventListener(
                                "deviceorientation",
                                this.onDeviceRotate,
                                !1
                            ),
                            (deviceOrientationInitialized = !1))
                    },
                    vibrate: function (e) {
                        navigator.vibrate && navigator.vibrate(e)
                    },
                }
                Object.defineProperty(device, "devicePixelRatio", {
                    get: function () {
                        return window.devicePixelRatio || 1
                    },
                }),
                    Object.defineProperty(device, "isFullscreen", {
                        get: function () {
                            return !(
                                !this.hasFullscreenSupport ||
                                (!prefixed("fullscreenElement", document) &&
                                    !document.mozFullScreenElement)
                            )
                        },
                    }),
                    Object.defineProperty(device, "sound", {
                        get: function () {
                            return hasAudio()
                        },
                    })
                var device$1 = device
                function extractUniforms(e, t) {
                    var n,
                        i = {},
                        r = /uniform\s+(\w+)\s+(\w+)/g,
                        o = {},
                        s = {},
                        a = {}
                    return (
                        [t.vertex, t.fragment].forEach(function (e) {
                            for (; (n = r.exec(e)); ) o[n[2]] = n[1]
                        }),
                        Object.keys(o).forEach(function (n) {
                            var i = o[n]
                            ;(a[n] = e.getUniformLocation(t.program, n)),
                                (s[n] = {
                                    get: (function (e) {
                                        return function () {
                                            return a[e]
                                        }
                                    })(n),
                                    set: (function (t, n, i) {
                                        return 0 === n.indexOf("mat")
                                            ? function (n) {
                                                  e[i](a[t], !1, n)
                                              }
                                            : function (n) {
                                                  var r = i
                                                  n.length &&
                                                      "v" !== i.substr(-1) &&
                                                      (r += "v"),
                                                      e[r](a[t], n)
                                              }
                                    })(n, i, "uniform" + fnHash[i]),
                                })
                        }),
                        Object.defineProperties(i, s),
                        i
                    )
                }
                function extractAttributes(e, t) {
                    for (
                        var n, i = {}, r = /attribute\s+\w+\s+(\w+)/g, o = 0;
                        (n = r.exec(t.vertex));

                    )
                        i[n[1]] = o++
                    return i
                }
                function compileShader(e, t, n) {
                    var i = e.createShader(t)
                    if (
                        (e.shaderSource(i, n),
                        e.compileShader(i),
                        !e.getShaderParameter(i, e.COMPILE_STATUS))
                    )
                        throw new Error(e.getShaderInfoLog(i))
                    return i
                }
                function compileProgram(e, t, n, i) {
                    var r = compileShader(e, e.VERTEX_SHADER, t),
                        o = compileShader(e, e.FRAGMENT_SHADER, n),
                        s = e.createProgram()
                    for (var a in (e.attachShader(s, r),
                    e.attachShader(s, o),
                    i))
                        e.bindAttribLocation(s, i[a], a)
                    if (
                        (e.linkProgram(s),
                        !e.getProgramParameter(s, e.LINK_STATUS))
                    ) {
                        var l =
                            "Error initializing Shader " +
                            this +
                            "\ngl.VALIDATE_STATUS: " +
                            e.getProgramParameter(s, e.VALIDATE_STATUS) +
                            "\ngl.getError()" +
                            e.getError() +
                            "\ngl.getProgramInfoLog()" +
                            e.getProgramInfoLog(s)
                        throw (e.deleteProgram(s), (s = null), new Error(l))
                    }
                    return (
                        e.useProgram(s), e.deleteShader(r), e.deleteShader(o), s
                    )
                }
                var fnHash = {
                    bool: "1i",
                    int: "1i",
                    float: "1f",
                    vec2: "2fv",
                    vec3: "3fv",
                    vec4: "4fv",
                    bvec2: "2iv",
                    bvec3: "3iv",
                    bvec4: "4iv",
                    ivec2: "2iv",
                    ivec3: "3iv",
                    ivec4: "4iv",
                    mat2: "Matrix2fv",
                    mat3: "Matrix3fv",
                    mat4: "Matrix4fv",
                    sampler2D: "1i",
                }
                function setPrecision(e, t) {
                    return "precision" !== e.substring(0, 9)
                        ? "precision " + t + " float;" + e
                        : e
                }
                function minify(e) {
                    return (e = (e = (e = e.replace(
                        /\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,
                        "$1"
                    )).replace(/(\\n\s+)|(\s+\\n)/g, "")).replace(
                        /(\\r|\\n)+/g,
                        ""
                    )).replace(/\s*([;,[\](){}\\\/\-+*|^&!=<>?~%])\s*/g, "$1")
                }
                var GLShader = (function () {
                        function e(t, n, i, r) {
                            return (
                                _classCallCheck(this, e),
                                (this.gl = t),
                                (this.vertex = setPrecision(
                                    minify(n),
                                    r || device$1.getMaxShaderPrecision(this.gl)
                                )),
                                (this.fragment = setPrecision(
                                    minify(i),
                                    r || device$1.getMaxShaderPrecision(this.gl)
                                )),
                                (this.attributes = extractAttributes(
                                    this.gl,
                                    this
                                )),
                                (this.program = compileProgram(
                                    this.gl,
                                    this.vertex,
                                    this.fragment,
                                    this.attributes
                                )),
                                (this.uniforms = extractUniforms(
                                    this.gl,
                                    this
                                )),
                                on(WEBGL_ONCONTEXT_LOST, this.destroy, this),
                                this
                            )
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "bind",
                                    value: function () {
                                        this.gl.useProgram(this.program)
                                    },
                                },
                                {
                                    key: "getAttribLocation",
                                    value: function (e) {
                                        var t = this.attributes[e]
                                        return void 0 !== t ? t : -1
                                    },
                                },
                                {
                                    key: "setUniform",
                                    value: function (e, t) {
                                        var n = this.uniforms
                                        if (void 0 === n[e])
                                            throw new Error(
                                                "undefined (" +
                                                    e +
                                                    ") uniform for shader " +
                                                    this
                                            )
                                        "object" === _typeof(t) &&
                                        "function" == typeof t.toArray
                                            ? (n[e] = t.toArray())
                                            : (n[e] = t)
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        ;(this.uniforms = null),
                                            (this.attributes = null),
                                            this.gl.deleteProgram(this.program),
                                            (this.vertex = null),
                                            (this.fragment = null)
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    VertexArrayBuffer = (function () {
                        function e(t, n) {
                            return (
                                _classCallCheck(this, e),
                                (this.vertexSize = t),
                                (this.quadSize = n),
                                (this.maxVertex = 256),
                                (this.vertexCount = 0),
                                (this.buffer = new ArrayBuffer(
                                    this.maxVertex *
                                        this.vertexSize *
                                        this.quadSize
                                )),
                                (this.bufferF32 = new Float32Array(
                                    this.buffer
                                )),
                                (this.bufferU32 = new Uint32Array(this.buffer)),
                                this
                            )
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "clear",
                                    value: function () {
                                        this.vertexCount = 0
                                    },
                                },
                                {
                                    key: "isFull",
                                    value: function () {
                                        var e =
                                            arguments.length > 0 &&
                                            void 0 !== arguments[0]
                                                ? arguments[0]
                                                : 0
                                        return (
                                            this.vertexCount + e >=
                                            this.maxVertex
                                        )
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function () {
                                        this.maxVertex <<= 1
                                        var e = this.bufferF32
                                        return (
                                            (this.buffer = new ArrayBuffer(
                                                this.maxVertex *
                                                    this.vertexSize *
                                                    this.quadSize
                                            )),
                                            (this.bufferF32 = new Float32Array(
                                                this.buffer
                                            )),
                                            (this.bufferU32 = new Uint32Array(
                                                this.buffer
                                            )),
                                            this.bufferF32.set(e),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "push",
                                    value: function (e, t, n, i, r) {
                                        var o =
                                            this.vertexCount * this.vertexSize
                                        return (
                                            this.vertexCount >=
                                                this.maxVertex && this.resize(),
                                            (this.bufferF32[o + 0] = e),
                                            (this.bufferF32[o + 1] = t),
                                            void 0 !== n &&
                                                ((this.bufferF32[o + 2] = n),
                                                (this.bufferF32[o + 3] = i)),
                                            void 0 !== r &&
                                                (this.bufferU32[o + 4] = r),
                                            this.vertexCount++,
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "toFloat32",
                                    value: function (e, t) {
                                        return void 0 !== t
                                            ? this.bufferF32.subarray(e, t)
                                            : this.bufferF32
                                    },
                                },
                                {
                                    key: "toUint32",
                                    value: function (e, t) {
                                        return void 0 !== t
                                            ? this.bufferU32.subarray(e, t)
                                            : this.bufferU32
                                    },
                                },
                                {
                                    key: "length",
                                    value: function () {
                                        return this.vertexCount
                                    },
                                },
                                {
                                    key: "isEmpty",
                                    value: function () {
                                        return 0 === this.vertexCount
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    primitiveVertex =
                        "// Current vertex point\nattribute vec2 aVertex;\n\n// Projection matrix\nuniform mat4 uProjectionMatrix;\n\n// Vertex color\nuniform vec4 uColor;\n\n// Fragment color\nvarying vec4 vColor;\n\nvoid main(void) {\n    // Transform the vertex position by the projection matrix\n    gl_Position = uProjectionMatrix * vec4(aVertex, 0.0, 1.0);\n    // Pass the remaining attributes to the fragment shader\n    vColor = vec4(uColor.rgb * uColor.a, uColor.a);\n}\n",
                    primitiveFragment =
                        "varying vec4 vColor;\n\nvoid main(void) {\n    gl_FragColor = vColor;\n}\n",
                    quadVertex =
                        "attribute vec2 aVertex;\nattribute vec2 aRegion;\nattribute vec4 aColor;\n\nuniform mat4 uProjectionMatrix;\n\nvarying vec2 vRegion;\nvarying vec4 vColor;\n\nvoid main(void) {\n    // Transform the vertex position by the projection matrix\n     gl_Position = uProjectionMatrix * vec4(aVertex, 0.0, 1.0);\n    // Pass the remaining attributes to the fragment shader\n    vColor = vec4(aColor.bgr * aColor.a, aColor.a);\n    vRegion = aRegion;\n}\n",
                    quadFragment =
                        "uniform sampler2D uSampler;\nvarying vec4 vColor;\nvarying vec2 vRegion;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSampler, vRegion) * vColor;\n}\n",
                    V_ARRAY = [
                        new Vector2d(),
                        new Vector2d(),
                        new Vector2d(),
                        new Vector2d(),
                    ],
                    VERTEX_SIZE = 2,
                    REGION_SIZE = 2,
                    COLOR_SIZE = 4,
                    ELEMENT_SIZE = VERTEX_SIZE + REGION_SIZE + COLOR_SIZE,
                    ELEMENT_OFFSET =
                        ELEMENT_SIZE * Float32Array.BYTES_PER_ELEMENT,
                    ELEMENTS_PER_QUAD = 4,
                    INDICES_PER_QUAD = 6,
                    MAX_LENGTH = 16e3
                function createIB() {
                    for (
                        var e = [0, 1, 2, 2, 1, 3],
                            t = new Array(MAX_LENGTH * INDICES_PER_QUAD),
                            n = 0;
                        n < t.length;
                        n++
                    )
                        t[n] =
                            e[n % INDICES_PER_QUAD] +
                            ~~(n / INDICES_PER_QUAD) * ELEMENTS_PER_QUAD
                    return new Uint16Array(t)
                }
                var WebGLCompositor = (function () {
                        function e(t) {
                            _classCallCheck(this, e), this.init(t)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "init",
                                    value: function (e) {
                                        var t = this,
                                            n = e.gl
                                        ;(this.currentTextureUnit = -1),
                                            (this.boundTextures = []),
                                            (this.renderer = e),
                                            (this.gl = e.gl),
                                            (this.color = e.currentColor),
                                            (this.viewMatrix =
                                                e.currentTransform),
                                            (this.activeShader = null),
                                            (this.mode = n.TRIANGLES),
                                            (this.attributes = []),
                                            (this.primitiveShader =
                                                new GLShader(
                                                    this.gl,
                                                    primitiveVertex,
                                                    primitiveFragment
                                                )),
                                            (this.quadShader = new GLShader(
                                                this.gl,
                                                quadVertex,
                                                quadFragment
                                            )),
                                            this.addAttribute(
                                                "aVertex",
                                                2,
                                                n.FLOAT,
                                                !1,
                                                0 *
                                                    Float32Array.BYTES_PER_ELEMENT
                                            ),
                                            this.addAttribute(
                                                "aRegion",
                                                2,
                                                n.FLOAT,
                                                !1,
                                                2 *
                                                    Float32Array.BYTES_PER_ELEMENT
                                            ),
                                            this.addAttribute(
                                                "aColor",
                                                4,
                                                n.UNSIGNED_BYTE,
                                                !0,
                                                4 *
                                                    Float32Array.BYTES_PER_ELEMENT
                                            ),
                                            n.bindBuffer(
                                                n.ARRAY_BUFFER,
                                                n.createBuffer()
                                            ),
                                            n.bufferData(
                                                n.ARRAY_BUFFER,
                                                MAX_LENGTH *
                                                    ELEMENT_OFFSET *
                                                    ELEMENTS_PER_QUAD,
                                                n.STREAM_DRAW
                                            ),
                                            (this.vertexBuffer =
                                                new VertexArrayBuffer(
                                                    ELEMENT_SIZE,
                                                    ELEMENTS_PER_QUAD
                                                )),
                                            n.bindBuffer(
                                                n.ELEMENT_ARRAY_BUFFER,
                                                n.createBuffer()
                                            ),
                                            n.bufferData(
                                                n.ELEMENT_ARRAY_BUFFER,
                                                createIB(),
                                                n.STATIC_DRAW
                                            ),
                                            on(
                                                CANVAS_ONRESIZE,
                                                function (e, n) {
                                                    t.flush(),
                                                        t.setViewport(
                                                            0,
                                                            0,
                                                            e,
                                                            n
                                                        )
                                                }
                                            ),
                                            this.reset()
                                    },
                                },
                                {
                                    key: "reset",
                                    value: function () {
                                        ;(this.gl = this.renderer.gl),
                                            this.flush(),
                                            this.setViewport(
                                                0,
                                                0,
                                                this.renderer.getScreenCanvas()
                                                    .width,
                                                this.renderer.getScreenCanvas()
                                                    .height
                                            ),
                                            this.clearColor(0, 0, 0, 0)
                                        for (
                                            var e = 0;
                                            e < this.renderer.maxTextures;
                                            e++
                                        ) {
                                            var t = this.boundTextures[e]
                                            null !== t &&
                                                ((this.boundTextures[e] = null),
                                                this.gl.deleteTexture(t))
                                        }
                                        ;(this.currentTextureUnit = -1),
                                            this.useShader(this.quadShader)
                                    },
                                },
                                {
                                    key: "addAttribute",
                                    value: function (e, t, n, i, r) {
                                        this.attributes.push({
                                            name: e,
                                            size: t,
                                            type: n,
                                            normalized: i,
                                            offset: r,
                                        })
                                    },
                                },
                                {
                                    key: "setViewport",
                                    value: function (e, t, n, i) {
                                        this.gl.viewport(e, t, n, i)
                                    },
                                },
                                {
                                    key: "createTexture2D",
                                    value: function (e, t, n) {
                                        var i =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : "no-repeat",
                                            r =
                                                arguments.length > 4
                                                    ? arguments[4]
                                                    : void 0,
                                            o =
                                                arguments.length > 5
                                                    ? arguments[5]
                                                    : void 0,
                                            s =
                                                arguments.length > 6
                                                    ? arguments[6]
                                                    : void 0,
                                            a =
                                                !(
                                                    arguments.length > 7 &&
                                                    void 0 !== arguments[7]
                                                ) || arguments[7],
                                            l =
                                                !(
                                                    arguments.length > 8 &&
                                                    void 0 !== arguments[8]
                                                ) || arguments[8],
                                            u = this.gl,
                                            h =
                                                isPowerOfTwo(r || t.width) &&
                                                isPowerOfTwo(o || t.height),
                                            c = u.createTexture(),
                                            d =
                                                0 ===
                                                    i.search(/^repeat(-x)?$/) &&
                                                (h ||
                                                    this.renderer.WebGLVersion >
                                                        1)
                                                    ? u.REPEAT
                                                    : u.CLAMP_TO_EDGE,
                                            f =
                                                0 ===
                                                    i.search(/^repeat(-y)?$/) &&
                                                (h ||
                                                    this.renderer.WebGLVersion >
                                                        1)
                                                    ? u.REPEAT
                                                    : u.CLAMP_TO_EDGE
                                        return (
                                            this.bindTexture2D(c, e),
                                            u.texParameteri(
                                                u.TEXTURE_2D,
                                                u.TEXTURE_WRAP_S,
                                                d
                                            ),
                                            u.texParameteri(
                                                u.TEXTURE_2D,
                                                u.TEXTURE_WRAP_T,
                                                f
                                            ),
                                            u.texParameteri(
                                                u.TEXTURE_2D,
                                                u.TEXTURE_MAG_FILTER,
                                                n
                                            ),
                                            u.texParameteri(
                                                u.TEXTURE_2D,
                                                u.TEXTURE_MIN_FILTER,
                                                n
                                            ),
                                            u.pixelStorei(
                                                u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                                                a
                                            ),
                                            r || o || s
                                                ? u.texImage2D(
                                                      u.TEXTURE_2D,
                                                      0,
                                                      u.RGBA,
                                                      r,
                                                      o,
                                                      s,
                                                      u.RGBA,
                                                      u.UNSIGNED_BYTE,
                                                      t
                                                  )
                                                : u.texImage2D(
                                                      u.TEXTURE_2D,
                                                      0,
                                                      u.RGBA,
                                                      u.RGBA,
                                                      u.UNSIGNED_BYTE,
                                                      t
                                                  ),
                                            h &&
                                                !1 !== l &&
                                                u.generateMipmap(u.TEXTURE_2D),
                                            c
                                        )
                                    },
                                },
                                {
                                    key: "bindTexture2D",
                                    value: function (e, t) {
                                        var n = this.gl
                                        e !== this.boundTextures[t]
                                            ? (this.flush(),
                                              this.currentTextureUnit !== t &&
                                                  ((this.currentTextureUnit =
                                                      t),
                                                  n.activeTexture(
                                                      n.TEXTURE0 + t
                                                  )),
                                              n.bindTexture(n.TEXTURE_2D, e),
                                              (this.boundTextures[t] = e))
                                            : this.currentTextureUnit !== t &&
                                              (this.flush(),
                                              (this.currentTextureUnit = t),
                                              n.activeTexture(n.TEXTURE0 + t))
                                    },
                                },
                                {
                                    key: "unbindTexture2D",
                                    value: function (e) {
                                        var t = this.renderer.cache.getUnit(e)
                                        this.boundTextures[t] = null
                                    },
                                },
                                {
                                    key: "uploadTexture",
                                    value: function (e, t, n, i, r) {
                                        var o = this.renderer.cache.getUnit(e),
                                            s = this.boundTextures[o]
                                        return (
                                            null === s || r
                                                ? this.createTexture2D(
                                                      o,
                                                      e.getTexture(),
                                                      this.renderer.settings
                                                          .antiAlias
                                                          ? this.gl.LINEAR
                                                          : this.gl.NEAREST,
                                                      e.repeat,
                                                      t,
                                                      n,
                                                      i,
                                                      e.premultipliedAlpha
                                                  )
                                                : this.bindTexture2D(s, o),
                                            this.currentTextureUnit
                                        )
                                    },
                                },
                                {
                                    key: "useShader",
                                    value: function (e) {
                                        if (this.activeShader !== e) {
                                            this.flush(),
                                                (this.activeShader = e),
                                                this.activeShader.bind(),
                                                this.activeShader.setUniform(
                                                    "uProjectionMatrix",
                                                    this.renderer
                                                        .projectionMatrix
                                                )
                                            for (
                                                var t = 0;
                                                t < this.attributes.length;
                                                ++t
                                            ) {
                                                var n = this.gl,
                                                    i = this.attributes[t],
                                                    r =
                                                        this.activeShader.getAttribLocation(
                                                            i.name
                                                        )
                                                ;-1 !== r
                                                    ? (n.enableVertexAttribArray(
                                                          r
                                                      ),
                                                      n.vertexAttribPointer(
                                                          r,
                                                          i.size,
                                                          i.type,
                                                          i.normalized,
                                                          ELEMENT_OFFSET,
                                                          i.offset
                                                      ))
                                                    : n.disableVertexAttribArray(
                                                          t
                                                      )
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "addQuad",
                                    value: function (
                                        e,
                                        t,
                                        n,
                                        i,
                                        r,
                                        o,
                                        s,
                                        a,
                                        l,
                                        u
                                    ) {
                                        if (!(this.color.alpha < 1 / 255)) {
                                            this.useShader(this.quadShader),
                                                this.vertexBuffer.isFull(4) &&
                                                    this.flush()
                                            var h = this.uploadTexture(e)
                                            this.quadShader.setUniform(
                                                "uSampler",
                                                h
                                            )
                                            var c = this.viewMatrix,
                                                d = V_ARRAY[0].set(t, n),
                                                f = V_ARRAY[1].set(t + i, n),
                                                p = V_ARRAY[2].set(t, n + r),
                                                v = V_ARRAY[3].set(t + i, n + r)
                                            c.isIdentity() ||
                                                (c.apply(d),
                                                c.apply(f),
                                                c.apply(p),
                                                c.apply(v)),
                                                this.vertexBuffer.push(
                                                    d.x,
                                                    d.y,
                                                    o,
                                                    s,
                                                    u
                                                ),
                                                this.vertexBuffer.push(
                                                    f.x,
                                                    f.y,
                                                    a,
                                                    s,
                                                    u
                                                ),
                                                this.vertexBuffer.push(
                                                    p.x,
                                                    p.y,
                                                    o,
                                                    l,
                                                    u
                                                ),
                                                this.vertexBuffer.push(
                                                    v.x,
                                                    v.y,
                                                    a,
                                                    l,
                                                    u
                                                )
                                        }
                                    },
                                },
                                {
                                    key: "flush",
                                    value: function () {
                                        var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : this.mode,
                                            t = this.vertexBuffer,
                                            n = t.vertexCount
                                        if (n > 0) {
                                            var i = this.gl,
                                                r = t.vertexSize
                                            this.renderer.WebGLVersion > 1
                                                ? i.bufferData(
                                                      i.ARRAY_BUFFER,
                                                      t.toFloat32(),
                                                      i.STREAM_DRAW,
                                                      0,
                                                      n * r
                                                  )
                                                : i.bufferData(
                                                      i.ARRAY_BUFFER,
                                                      t.toFloat32(0, n * r),
                                                      i.STREAM_DRAW
                                                  ),
                                                this.activeShader ===
                                                this.primitiveShader
                                                    ? i.drawArrays(e, 0, n)
                                                    : i.drawElements(
                                                          e,
                                                          (n / t.quadSize) *
                                                              INDICES_PER_QUAD,
                                                          i.UNSIGNED_SHORT,
                                                          0
                                                      ),
                                                t.clear()
                                        }
                                    },
                                },
                                {
                                    key: "drawVertices",
                                    value: function (e, t) {
                                        var n =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2]
                                                ? arguments[2]
                                                : t.length
                                        this.useShader(this.primitiveShader),
                                            this.primitiveShader.setUniform(
                                                "uColor",
                                                this.color
                                            )
                                        for (
                                            var i = this.viewMatrix,
                                                r = this.vertexBuffer,
                                                o = i.isIdentity(),
                                                s = 0;
                                            s < n;
                                            s++
                                        )
                                            o || i.apply(t[s]),
                                                r.push(t[s].x, t[s].y)
                                        this.flush(e)
                                    },
                                },
                                {
                                    key: "clearColor",
                                    value: function (e, t, n, i) {
                                        this.gl.clearColor(e, t, n, i)
                                    },
                                },
                                {
                                    key: "clear",
                                    value: function () {
                                        this.gl.clear(this.gl.COLOR_BUFFER_BIT)
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    WebGLRenderer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            _classCallCheck(this, n),
                                ((i = t.call(this, e)).WebGLVersion = 1),
                                (i.GPUVendor = null),
                                (i.GPURenderer = null),
                                (i.context = i.gl =
                                    i.getContextGL(
                                        i.getScreenCanvas(),
                                        e.transparent
                                    )),
                                (i.maxTextures = i.gl.getParameter(
                                    i.gl.MAX_TEXTURE_IMAGE_UNITS
                                )),
                                (i._colorStack = []),
                                (i._matrixStack = []),
                                (i._scissorStack = []),
                                (i._glPoints = [
                                    new Vector2d(),
                                    new Vector2d(),
                                    new Vector2d(),
                                    new Vector2d(),
                                ]),
                                (i.currentTransform = new Matrix2d()),
                                (i.currentCompositor = null)
                            var r = i.settings.compositor || WebGLCompositor
                            i.setCompositor(new r(_assertThisInitialized(i))),
                                i.gl.disable(i.gl.DEPTH_TEST),
                                i.gl.disable(i.gl.SCISSOR_TEST),
                                i.gl.enable(i.gl.BLEND),
                                i.setBlendMode(i.settings.blendMode)
                            var o = i.gl.getExtension(
                                "WEBGL_debug_renderer_info"
                            )
                            return (
                                null !== o &&
                                    ((i.GPUVendor = i.gl.getParameter(
                                        o.UNMASKED_VENDOR_WEBGL
                                    )),
                                    (i.GPURenderer = i.gl.getParameter(
                                        o.UNMASKED_RENDERER_WEBGL
                                    ))),
                                (i.cache = new TextureCache(i.maxTextures)),
                                i.getScreenCanvas().addEventListener(
                                    "webglcontextlost",
                                    function (e) {
                                        e.preventDefault(),
                                            (i.isContextValid = !1),
                                            emit(
                                                WEBGL_ONCONTEXT_LOST,
                                                _assertThisInitialized(i)
                                            )
                                    },
                                    !1
                                ),
                                i.getScreenCanvas().addEventListener(
                                    "webglcontextrestored",
                                    function () {
                                        i.reset(),
                                            (i.isContextValid = !0),
                                            emit(
                                                WEBGL_ONCONTEXT_RESTORED,
                                                _assertThisInitialized(i)
                                            )
                                    },
                                    !1
                                ),
                                _possibleConstructorReturn(
                                    i,
                                    _assertThisInitialized(i)
                                )
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "reset",
                                    value: function () {
                                        _get(
                                            _getPrototypeOf(n.prototype),
                                            "reset",
                                            this
                                        ).call(this),
                                            !1 === this.isContextValid
                                                ? this.currentCompositor.init(
                                                      this
                                                  )
                                                : this.currentCompositor.reset(),
                                            this.gl.disable(
                                                this.gl.SCISSOR_TEST
                                            ),
                                            void 0 !== this.fontContext2D &&
                                                this.createFontTexture(
                                                    this.cache
                                                )
                                    },
                                },
                                {
                                    key: "setCompositor",
                                    value: function (e) {
                                        null !== this.currentCompositor &&
                                            this.currentCompositor !== e &&
                                            this.currentCompositor.flush(),
                                            (this.currentCompositor = e)
                                    },
                                },
                                {
                                    key: "resetTransform",
                                    value: function () {
                                        this.currentTransform.identity()
                                    },
                                },
                                {
                                    key: "createFontTexture",
                                    value: function (e) {
                                        if (void 0 === this.fontTexture) {
                                            var t = this.backBufferCanvas,
                                                n = t.width,
                                                i = t.height
                                            1 === this.WebGLVersion &&
                                                (isPowerOfTwo(n) ||
                                                    (n = nextPowerOfTwo(
                                                        t.width
                                                    )),
                                                isPowerOfTwo(i) ||
                                                    (i = nextPowerOfTwo(
                                                        t.height
                                                    )))
                                            var r = createCanvas(n, i, !0)
                                            ;(this.fontContext2D =
                                                this.getContext2d(r)),
                                                (this.fontTexture = new Texture(
                                                    createAtlas(
                                                        t.width,
                                                        t.height,
                                                        "fontTexture"
                                                    ),
                                                    r,
                                                    e
                                                )),
                                                this.currentCompositor.uploadTexture(
                                                    this.fontTexture,
                                                    0,
                                                    0,
                                                    0
                                                )
                                        } else
                                            e.set(
                                                this.fontContext2D.canvas,
                                                this.fontTexture
                                            )
                                    },
                                },
                                {
                                    key: "createPattern",
                                    value: function (e, t) {
                                        if (
                                            !(
                                                1 !== renderer.WebGLVersion ||
                                                (isPowerOfTwo(e.width) &&
                                                    isPowerOfTwo(e.height))
                                            )
                                        ) {
                                            var n = void 0 !== e.src ? e.src : e
                                            throw new Error(
                                                "[WebGL Renderer] " +
                                                    n +
                                                    " is not a POT texture (" +
                                                    e.width +
                                                    "x" +
                                                    e.height +
                                                    ")"
                                            )
                                        }
                                        var i = new Texture(
                                            createAtlas(
                                                e.width,
                                                e.height,
                                                "pattern",
                                                t
                                            ),
                                            e
                                        )
                                        return (
                                            this.currentCompositor.uploadTexture(
                                                i
                                            ),
                                            i
                                        )
                                    },
                                },
                                {
                                    key: "flush",
                                    value: function () {
                                        this.currentCompositor.flush()
                                    },
                                },
                                {
                                    key: "clearColor",
                                    value: function (e, t) {
                                        var n
                                        this.save(),
                                            (n =
                                                e instanceof Color
                                                    ? e.toArray()
                                                    : this.getColor()
                                                          .parseCSS(e)
                                                          .toArray()),
                                            this.currentCompositor.clearColor(
                                                n[0],
                                                n[1],
                                                n[2],
                                                !0 === t ? 1 : n[3]
                                            ),
                                            this.currentCompositor.clear(),
                                            this.currentCompositor.clearColor(
                                                0,
                                                0,
                                                0,
                                                0
                                            ),
                                            this.restore()
                                    },
                                },
                                {
                                    key: "clearRect",
                                    value: function (e, t, n, i) {
                                        var r = this.currentColor.clone()
                                        this.currentColor.copy("#000000"),
                                            this.fillRect(e, t, n, i),
                                            this.currentColor.copy(r),
                                            pool.push(r)
                                    },
                                },
                                {
                                    key: "drawFont",
                                    value: function (e) {
                                        var t = this.getFontContext()
                                        this.currentCompositor.uploadTexture(
                                            this.fontTexture,
                                            0,
                                            0,
                                            0,
                                            !0
                                        )
                                        var n = this.fontTexture.getUVs(
                                            e.left +
                                                "," +
                                                e.top +
                                                "," +
                                                e.width +
                                                "," +
                                                e.height
                                        )
                                        this.currentCompositor.addQuad(
                                            this.fontTexture,
                                            e.left,
                                            e.top,
                                            e.width,
                                            e.height,
                                            n[0],
                                            n[1],
                                            n[2],
                                            n[3],
                                            this.currentTint.toUint32()
                                        ),
                                            t.clearRect(
                                                e.left,
                                                e.top,
                                                e.width,
                                                e.height
                                            )
                                    },
                                },
                                {
                                    key: "drawImage",
                                    value: function (
                                        e,
                                        t,
                                        n,
                                        i,
                                        r,
                                        o,
                                        s,
                                        a,
                                        l
                                    ) {
                                        void 0 === i
                                            ? ((i = a = e.width),
                                              (r = l = e.height),
                                              (o = t),
                                              (s = n),
                                              (t = 0),
                                              (n = 0))
                                            : void 0 === o &&
                                              ((o = t),
                                              (s = n),
                                              (a = i),
                                              (l = r),
                                              (i = e.width),
                                              (r = e.height),
                                              (t = 0),
                                              (n = 0)),
                                            !1 === this.settings.subPixel &&
                                                ((o |= 0), (s |= 0))
                                        var u = this.cache.get(e),
                                            h = u.getUVs(
                                                t + "," + n + "," + i + "," + r
                                            )
                                        this.currentCompositor.addQuad(
                                            u,
                                            o,
                                            s,
                                            a,
                                            l,
                                            h[0],
                                            h[1],
                                            h[2],
                                            h[3],
                                            this.currentTint.toUint32()
                                        )
                                    },
                                },
                                {
                                    key: "drawPattern",
                                    value: function (e, t, n, i, r) {
                                        var o = e.getUVs("0,0," + i + "," + r)
                                        this.currentCompositor.addQuad(
                                            e,
                                            t,
                                            n,
                                            i,
                                            r,
                                            o[0],
                                            o[1],
                                            o[2],
                                            o[3],
                                            this.currentTint.toUint32()
                                        )
                                    },
                                },
                                {
                                    key: "getScreenContext",
                                    value: function () {
                                        return this.gl
                                    },
                                },
                                {
                                    key: "getContextGL",
                                    value: function (e, t) {
                                        if (null == e)
                                            throw new Error(
                                                "You must pass a canvas element in order to create a GL context"
                                            )
                                        "boolean" != typeof t && (t = !0)
                                        var n,
                                            i = {
                                                alpha: t,
                                                antialias:
                                                    this.settings.antiAlias,
                                                depth: !1,
                                                stencil: !0,
                                                preserveDrawingBuffer: !1,
                                                premultipliedAlpha: t,
                                                powerPreference:
                                                    this.settings
                                                        .powerPreference,
                                                failIfMajorPerformanceCaveat:
                                                    this.settings
                                                        .failIfMajorPerformanceCaveat,
                                            }
                                        if (
                                            (!1 ===
                                                this.settings.preferWebGL1 &&
                                                (n = e.getContext(
                                                    "webgl2",
                                                    i
                                                )) &&
                                                (this.WebGLVersion = 2),
                                            n ||
                                                ((this.WebGLVersion = 1),
                                                (n =
                                                    e.getContext("webgl", i) ||
                                                    e.getContext(
                                                        "experimental-webgl",
                                                        i
                                                    ))),
                                            !n)
                                        )
                                            throw new Error(
                                                "A WebGL context could not be created."
                                            )
                                        return n
                                    },
                                },
                                {
                                    key: "getContext",
                                    value: function () {
                                        return this.gl
                                    },
                                },
                                {
                                    key: "setBlendMode",
                                    value: function (e, t) {
                                        ;(t = t || this.gl).enable(t.BLEND),
                                            "multiply" === e
                                                ? (t.blendFunc(
                                                      t.SRC_ALPHA,
                                                      t.ONE_MINUS_SRC_ALPHA
                                                  ),
                                                  (this.currentBlendMode = e))
                                                : (t.blendFunc(
                                                      t.ONE,
                                                      t.ONE_MINUS_SRC_ALPHA
                                                  ),
                                                  (this.currentBlendMode =
                                                      "normal"))
                                    },
                                },
                                {
                                    key: "getFontContext",
                                    value: function () {
                                        return (
                                            void 0 === this.fontContext2D &&
                                                (console.warn(
                                                    "[WebGL Renderer] WARNING : Using Standard me.Text with WebGL will severly impact performances !"
                                                ),
                                                this.createFontTexture(
                                                    this.cache
                                                )),
                                            this.fontContext2D
                                        )
                                    },
                                },
                                {
                                    key: "restore",
                                    value: function () {
                                        if (0 !== this._matrixStack.length) {
                                            var e = this._colorStack.pop(),
                                                t = this._matrixStack.pop()
                                            this.currentColor.copy(e),
                                                this.currentTransform.copy(t),
                                                pool.push(e),
                                                pool.push(t)
                                        }
                                        0 !== this._scissorStack.length
                                            ? this.currentScissor.set(
                                                  this._scissorStack.pop()
                                              )
                                            : (this.gl.disable(
                                                  this.gl.SCISSOR_TEST
                                              ),
                                              (this.currentScissor[0] = 0),
                                              (this.currentScissor[1] = 0),
                                              (this.currentScissor[2] =
                                                  this.backBufferCanvas.width),
                                              (this.currentScissor[3] =
                                                  this.backBufferCanvas.height))
                                    },
                                },
                                {
                                    key: "save",
                                    value: function () {
                                        this._colorStack.push(
                                            this.currentColor.clone()
                                        ),
                                            this._matrixStack.push(
                                                this.currentTransform.clone()
                                            ),
                                            this.gl.isEnabled(
                                                this.gl.SCISSOR_TEST
                                            ) &&
                                                this._scissorStack.push(
                                                    this.currentScissor.slice()
                                                )
                                    },
                                },
                                {
                                    key: "rotate",
                                    value: function (e) {
                                        this.currentTransform.rotate(e)
                                    },
                                },
                                {
                                    key: "scale",
                                    value: function (e, t) {
                                        this.currentTransform.scale(e, t)
                                    },
                                },
                                {
                                    key: "setAntiAlias",
                                    value: function (e, t) {
                                        _get(
                                            _getPrototypeOf(n.prototype),
                                            "setAntiAlias",
                                            this
                                        ).call(this, e, t)
                                    },
                                },
                                {
                                    key: "setGlobalAlpha",
                                    value: function (e) {
                                        this.currentColor.alpha = e
                                    },
                                },
                                {
                                    key: "setColor",
                                    value: function (e) {
                                        var t = this.currentColor.alpha
                                        this.currentColor.copy(e),
                                            (this.currentColor.alpha *= t)
                                    },
                                },
                                {
                                    key: "setLineWidth",
                                    value: function (e) {
                                        this.getScreenContext().lineWidth(e)
                                    },
                                },
                                {
                                    key: "strokeArc",
                                    value: function (e, t, n, i, r) {
                                        var o =
                                                arguments.length > 5 &&
                                                void 0 !== arguments[5] &&
                                                arguments[5],
                                            s =
                                                arguments.length > 6
                                                    ? arguments[6]
                                                    : void 0
                                        if (!0 === s)
                                            this.fillArc(e, t, n, i, r, o)
                                        else {
                                            var a,
                                                l = this._glPoints,
                                                u = Math.floor(
                                                    24 * Math.sqrt(2 * n)
                                                ),
                                                h = (r - i) / (2 * u),
                                                c = 2 * h,
                                                d = Math.cos(h),
                                                f = Math.sin(h)
                                            for (a = l.length; a < u + 1; a++)
                                                l.push(new Vector2d())
                                            for (a = 0; a < u; a++) {
                                                var p = h + i + c * a,
                                                    v = Math.cos(p),
                                                    g = -Math.sin(p)
                                                ;(l[a].x =
                                                    e + (d * v + f * g) * n),
                                                    (l[a].y =
                                                        t +
                                                        (d * -g + f * v) * n)
                                            }
                                            this.currentCompositor.drawVertices(
                                                this.gl.LINE_STRIP,
                                                l,
                                                u
                                            )
                                        }
                                    },
                                },
                                {
                                    key: "fillArc",
                                    value: function (e, t, n, i, r) {
                                        var o,
                                            s = this._glPoints,
                                            a = 0,
                                            l = Math.floor(
                                                24 * Math.sqrt(2 * n)
                                            ),
                                            u = (r - i) / (2 * l),
                                            h = 2 * u,
                                            c = Math.cos(u),
                                            d = Math.sin(u)
                                        for (o = s.length; o < 2 * l; o++)
                                            s.push(new Vector2d())
                                        for (o = 0; o < l - 1; o++) {
                                            var f = u + i + h * o,
                                                p = Math.cos(f),
                                                v = -Math.sin(f)
                                            s[a++].set(e, t),
                                                s[a++].set(
                                                    e - (c * p + d * v) * n,
                                                    t - (c * -v + d * p) * n
                                                )
                                        }
                                        this.currentCompositor.drawVertices(
                                            this.gl.TRIANGLE_STRIP,
                                            s,
                                            a
                                        )
                                    },
                                },
                                {
                                    key: "strokeEllipse",
                                    value: function (e, t, n, i) {
                                        var r =
                                            arguments.length > 4 &&
                                            void 0 !== arguments[4] &&
                                            arguments[4]
                                        if (!0 === r)
                                            this.fillEllipse(e, t, n, i)
                                        else {
                                            var o,
                                                s =
                                                    Math.floor(
                                                        24 * Math.sqrt(n)
                                                    ) ||
                                                    Math.floor(
                                                        12 * Math.sqrt(n + i)
                                                    ),
                                                a = TAU / s,
                                                l = this._glPoints
                                            for (o = l.length; o < s; o++)
                                                l.push(new Vector2d())
                                            for (o = 0; o < s; o++)
                                                (l[o].x =
                                                    e + Math.sin(a * -o) * n),
                                                    (l[o].y =
                                                        t +
                                                        Math.cos(a * -o) * i)
                                            this.currentCompositor.drawVertices(
                                                this.gl.LINE_LOOP,
                                                l,
                                                s
                                            )
                                        }
                                    },
                                },
                                {
                                    key: "fillEllipse",
                                    value: function (e, t, n, i) {
                                        var r,
                                            o =
                                                Math.floor(24 * Math.sqrt(n)) ||
                                                Math.floor(
                                                    12 * Math.sqrt(n + i)
                                                ),
                                            s = TAU / o,
                                            a = this._glPoints,
                                            l = 0
                                        for (r = a.length; r < 2 * (o + 1); r++)
                                            a.push(new Vector2d())
                                        for (r = 0; r < o + 1; r++)
                                            a[l++].set(e, t),
                                                a[l++].set(
                                                    e + Math.sin(s * r) * n,
                                                    t + Math.cos(s * r) * i
                                                )
                                        this.currentCompositor.drawVertices(
                                            this.gl.TRIANGLE_STRIP,
                                            a,
                                            l
                                        )
                                    },
                                },
                                {
                                    key: "strokeLine",
                                    value: function (e, t, n, i) {
                                        var r = this._glPoints
                                        ;(r[0].x = e),
                                            (r[0].y = t),
                                            (r[1].x = n),
                                            (r[1].y = i),
                                            this.currentCompositor.drawVertices(
                                                this.gl.LINE_STRIP,
                                                r,
                                                2
                                            )
                                    },
                                },
                                {
                                    key: "fillLine",
                                    value: function (e, t, n, i) {
                                        this.strokeLine(e, t, n, i)
                                    },
                                },
                                {
                                    key: "strokePolygon",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        if (!0 === t) this.fillPolygon(e)
                                        else {
                                            var n,
                                                i = e.points.length,
                                                r = this._glPoints
                                            for (n = r.length; n < i; n++)
                                                r.push(new Vector2d())
                                            for (n = 0; n < i; n++)
                                                (r[n].x =
                                                    e.pos.x + e.points[n].x),
                                                    (r[n].y =
                                                        e.pos.y + e.points[n].y)
                                            this.currentCompositor.drawVertices(
                                                this.gl.LINE_LOOP,
                                                r,
                                                i
                                            )
                                        }
                                    },
                                },
                                {
                                    key: "fillPolygon",
                                    value: function (e) {
                                        var t,
                                            n = e.points,
                                            i = this._glPoints,
                                            r = e.getIndices(),
                                            o = e.pos.x,
                                            s = e.pos.y
                                        for (t = i.length; t < r.length; t++)
                                            i.push(new Vector2d())
                                        for (t = 0; t < r.length; t++)
                                            i[t].set(
                                                o + n[r[t]].x,
                                                s + n[r[t]].y
                                            )
                                        this.currentCompositor.drawVertices(
                                            this.gl.TRIANGLES,
                                            i,
                                            r.length
                                        )
                                    },
                                },
                                {
                                    key: "strokeRect",
                                    value: function (e, t, n, i) {
                                        var r =
                                            arguments.length > 4 &&
                                            void 0 !== arguments[4] &&
                                            arguments[4]
                                        if (!0 === r) this.fillRect(e, t, n, i)
                                        else {
                                            var o = this._glPoints
                                            ;(o[0].x = e),
                                                (o[0].y = t),
                                                (o[1].x = e + n),
                                                (o[1].y = t),
                                                (o[2].x = e + n),
                                                (o[2].y = t + i),
                                                (o[3].x = e),
                                                (o[3].y = t + i),
                                                this.currentCompositor.drawVertices(
                                                    this.gl.LINE_LOOP,
                                                    o,
                                                    4
                                                )
                                        }
                                    },
                                },
                                {
                                    key: "fillRect",
                                    value: function (e, t, n, i) {
                                        var r = this._glPoints
                                        ;(r[0].x = e + n),
                                            (r[0].y = t),
                                            (r[1].x = e),
                                            (r[1].y = t),
                                            (r[2].x = e + n),
                                            (r[2].y = t + i),
                                            (r[3].x = e),
                                            (r[3].y = t + i),
                                            this.currentCompositor.drawVertices(
                                                this.gl.TRIANGLE_STRIP,
                                                r,
                                                4
                                            )
                                    },
                                },
                                {
                                    key: "setTransform",
                                    value: function (e) {
                                        this.resetTransform(), this.transform(e)
                                    },
                                },
                                {
                                    key: "transform",
                                    value: function (e) {
                                        var t = this.currentTransform
                                        if (
                                            (t.multiply(e),
                                            !1 === this.settings.subPixel)
                                        ) {
                                            var n = t.toArray()
                                            ;(n[6] |= 0), (n[7] |= 0)
                                        }
                                    },
                                },
                                {
                                    key: "translate",
                                    value: function (e, t) {
                                        var n = this.currentTransform
                                        if (
                                            (n.translate(e, t),
                                            !1 === this.settings.subPixel)
                                        ) {
                                            var i = n.toArray()
                                            ;(i[6] |= 0), (i[7] |= 0)
                                        }
                                    },
                                },
                                {
                                    key: "clipRect",
                                    value: function (e, t, n, i) {
                                        var r = this.backBufferCanvas,
                                            o = this.gl
                                        if (
                                            0 !== e ||
                                            0 !== t ||
                                            n !== r.width ||
                                            i !== r.height
                                        ) {
                                            var s = this.currentScissor
                                            if (
                                                o.isEnabled(o.SCISSOR_TEST) &&
                                                s[0] === e &&
                                                s[1] === t &&
                                                s[2] === n &&
                                                s[3] === i
                                            )
                                                return
                                            this.flush(),
                                                o.enable(this.gl.SCISSOR_TEST),
                                                o.scissor(
                                                    e +
                                                        this.currentTransform
                                                            .tx,
                                                    r.height -
                                                        i -
                                                        t -
                                                        this.currentTransform
                                                            .ty,
                                                    n,
                                                    i
                                                ),
                                                (s[0] = e),
                                                (s[1] = t),
                                                (s[2] = n),
                                                (s[3] = i)
                                        } else o.disable(o.SCISSOR_TEST)
                                    },
                                },
                                {
                                    key: "setMask",
                                    value: function (e) {
                                        var t = this.gl
                                        this.flush(),
                                            t.enable(t.STENCIL_TEST),
                                            t.clear(t.STENCIL_BUFFER_BIT),
                                            t.colorMask(!1, !1, !1, !1),
                                            t.stencilFunc(t.NOTEQUAL, 1, 1),
                                            t.stencilOp(
                                                t.REPLACE,
                                                t.REPLACE,
                                                t.REPLACE
                                            ),
                                            this.fill(e),
                                            this.flush(),
                                            t.colorMask(!0, !0, !0, !0),
                                            t.stencilFunc(t.EQUAL, 1, 1),
                                            t.stencilOp(t.KEEP, t.KEEP, t.KEEP)
                                    },
                                },
                                {
                                    key: "clearMask",
                                    value: function () {
                                        this.flush(),
                                            this.gl.disable(
                                                this.gl.STENCIL_TEST
                                            )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderer),
                    designRatio = 1,
                    designWidth = 0,
                    designHeight = 0,
                    settings = {
                        parent: document.body,
                        renderer: 2,
                        doubleBuffering: !1,
                        autoScale: !1,
                        scale: 1,
                        scaleMethod: "fit",
                        transparent: !1,
                        blendMode: "normal",
                        antiAlias: !1,
                        failIfMajorPerformanceCaveat: !0,
                        subPixel: !1,
                        preferWebGL1: !1,
                        powerPreference: "default",
                        verbose: !1,
                        consoleHeader: !0,
                    }
                function autoDetectRenderer(e) {
                    try {
                        if (device$1.isWebGLSupported(e))
                            return new WebGLRenderer(e)
                    } catch (e) {
                        console.log(
                            "Error creating WebGL renderer :" + e.message
                        )
                    }
                    return new CanvasRenderer(e)
                }
                function onresize() {
                    var e = renderer.settings,
                        t = 1,
                        n = 1
                    if (e.autoScale) {
                        var i = 1 / 0,
                            r = 1 / 0
                        if (window.getComputedStyle) {
                            var o = window.getComputedStyle(
                                renderer.getScreenCanvas(),
                                null
                            )
                            ;(i = parseInt(o.maxWidth, 10) || 1 / 0),
                                (r = parseInt(o.maxHeight, 10) || 1 / 0)
                        }
                        var s = device$1.getParentBounds(getParent()),
                            a = Math.min(i, s.width),
                            l = Math.min(r, s.height),
                            u = a / l
                        if (
                            ("fill-min" === e.scaleMethod && u > designRatio) ||
                            ("fill-max" === e.scaleMethod && u < designRatio) ||
                            "flex-width" === e.scaleMethod
                        ) {
                            var h = Math.min(i, designHeight * u)
                            ;(t = n = a / h),
                                renderer.resize(Math.floor(h), designHeight)
                        } else if (
                            ("fill-min" === e.scaleMethod && u < designRatio) ||
                            ("fill-max" === e.scaleMethod && u > designRatio) ||
                            "flex-height" === e.scaleMethod
                        ) {
                            var c = Math.min(r, designWidth * (l / a))
                            ;(t = n = l / c),
                                renderer.resize(designWidth, Math.floor(c))
                        } else
                            "flex" === e.scaleMethod
                                ? renderer.resize(Math.floor(a), Math.floor(l))
                                : "stretch" === e.scaleMethod
                                ? ((t = a / designWidth),
                                  (n = l / designHeight))
                                : (t = n =
                                      u < designRatio
                                          ? a / designWidth
                                          : l / designHeight)
                        scale(t, n)
                    }
                }
                var CANVAS = 0,
                    WEBGL = 1,
                    AUTO = 2,
                    parent = null,
                    scaleRatio = new Vector2d(1, 1),
                    renderer = null
                function init(e, t, n) {
                    if (!initialized)
                        throw new Error(
                            "me.video.init() called before engine initialization."
                        )
                    ;((settings = Object.assign(settings, n || {})).width = e),
                        (settings.height = t),
                        (settings.doubleBuffering = !!settings.doubleBuffering),
                        (settings.transparent = !!settings.transparent),
                        (settings.antiAlias = !!settings.antiAlias),
                        (settings.failIfMajorPerformanceCaveat =
                            !!settings.failIfMajorPerformanceCaveat),
                        (settings.subPixel = !!settings.subPixel),
                        (settings.verbose = !!settings.verbose),
                        -1 !==
                        settings.scaleMethod.search(
                            /^(fill-(min|max)|fit|flex(-(width|height))?|stretch)$/
                        )
                            ? (settings.autoScale =
                                  "auto" === settings.scale || !0)
                            : ((settings.scaleMethod = "fit"),
                              (settings.autoScale =
                                  "auto" === settings.scale || !1)),
                        !1 !== settings.consoleHeader &&
                            console.log(
                                "melonJS 2 (v" +
                                    version +
                                    ") | http://melonjs.org"
                            )
                    var i = utils.getUriFragment()
                    ;(!0 !== i.webgl && !0 !== i.webgl1 && !0 !== i.webgl2) ||
                        ((settings.renderer = WEBGL),
                        !0 === i.webgl1 && (settings.preferWebGL1 = !0)),
                        (settings.scale = settings.autoScale
                            ? 1
                            : +settings.scale || 1),
                        scaleRatio.set(settings.scale, settings.scale),
                        (settings.autoScale || 1 !== settings.scale) &&
                            (settings.doubleBuffering = !0),
                        (designRatio = e / t),
                        (designWidth = e),
                        (designHeight = t),
                        (settings.zoomX = e * scaleRatio.x),
                        (settings.zoomY = e * scaleRatio.y),
                        window.addEventListener(
                            "resize",
                            utils.function.throttle(function (e) {
                                emit(WINDOW_ONRESIZE, e)
                            }, 100),
                            !1
                        ),
                        window.addEventListener(
                            "orientationchange",
                            function (e) {
                                emit(WINDOW_ONORIENTATION_CHANGE, e)
                            },
                            !1
                        ),
                        window.addEventListener(
                            "onmozorientationchange",
                            function (e) {
                                emit(WINDOW_ONORIENTATION_CHANGE, e)
                            },
                            !1
                        ),
                        !0 === device$1.ScreenOrientation &&
                            (window.screen.orientation.onchange = function (e) {
                                emit(WINDOW_ONORIENTATION_CHANGE, e)
                            }),
                        window.addEventListener(
                            "scroll",
                            utils.function.throttle(function (e) {
                                emit(WINDOW_ONSCROLL, e)
                            }, 100),
                            !1
                        ),
                        on(WINDOW_ONRESIZE, onresize, this),
                        on(WINDOW_ONORIENTATION_CHANGE, onresize, this)
                    try {
                        switch (settings.renderer) {
                            case AUTO:
                            case WEBGL:
                                renderer = autoDetectRenderer(settings)
                                break
                            default:
                                renderer = new CanvasRenderer(settings)
                        }
                    } catch (e) {
                        return console(e.message), !1
                    }
                    if (
                        ((parent = device$1.getElement(
                            settings.parent
                        )).appendChild(renderer.getScreenCanvas()),
                        onresize(),
                        "MutationObserver" in window &&
                            new MutationObserver(onresize.bind(this)).observe(
                                parent,
                                { attributes: !1, childList: !0, subtree: !0 }
                            ),
                        !1 !== settings.consoleHeader)
                    ) {
                        var r =
                                renderer instanceof CanvasRenderer
                                    ? "CANVAS"
                                    : "WebGL" + renderer.WebGLVersion,
                            o = device$1.hasWebAudio
                                ? "Web Audio"
                                : "HTML5 Audio",
                            s =
                                "string" == typeof renderer.GPURenderer
                                    ? " (" + renderer.GPURenderer + ")"
                                    : ""
                        console.log(
                            r +
                                " renderer" +
                                s +
                                " | " +
                                o +
                                " | pixel ratio " +
                                device$1.devicePixelRatio +
                                " | " +
                                (device$1.isMobile ? "mobile" : "desktop") +
                                " | " +
                                device$1.getScreenOrientation() +
                                " | " +
                                device$1.language
                        ),
                            console.log(
                                "resolution: requested " +
                                    e +
                                    "x" +
                                    t +
                                    ", got " +
                                    renderer.getWidth() +
                                    "x" +
                                    renderer.getHeight()
                            )
                    }
                    return emit(VIDEO_INIT), !0
                }
                function createCanvas(e, t) {
                    var n,
                        i =
                            arguments.length > 2 &&
                            void 0 !== arguments[2] &&
                            arguments[2]
                    if (0 === e || 0 === t)
                        throw new Error(
                            "width or height was zero, Canvas could not be initialized !"
                        )
                    return (
                        !0 === device$1.OffscreenCanvas && !0 === i
                            ? void 0 ===
                                  (n = new OffscreenCanvas(0, 0)).style &&
                              (n.style = {})
                            : (n = document.createElement("canvas")),
                        (n.width = e),
                        (n.height = t),
                        n
                    )
                }
                function getParent() {
                    return parent
                }
                function scale(e, t) {
                    var n = renderer.getScreenCanvas(),
                        i = renderer.getScreenContext(),
                        r = renderer.settings,
                        o = device$1.devicePixelRatio,
                        s = (r.zoomX = n.width * e * o),
                        a = (r.zoomY = n.height * t * o)
                    scaleRatio.set(e * o, t * o),
                        (n.style.width = s / o + "px"),
                        (n.style.height = a / o + "px"),
                        renderer.setAntiAlias(i, r.antiAlias),
                        renderer.setBlendMode(r.blendMode, i),
                        repaint()
                }
                var video = Object.freeze({
                        __proto__: null,
                        CANVAS,
                        WEBGL,
                        AUTO,
                        get parent() {
                            return parent
                        },
                        scaleRatio,
                        get renderer() {
                            return renderer
                        },
                        init,
                        createCanvas,
                        getParent,
                        scale,
                    }),
                    GUID_base = "",
                    GUID_index = 0,
                    utils = {
                        agent: agentUtils,
                        array: arrayUtils,
                        file: fileUtils,
                        string: stringUtils,
                        function: fnUtils,
                        getPixels: function (e) {
                            if (e instanceof HTMLImageElement) {
                                var t = CanvasRenderer.getContext2d(
                                    createCanvas(e.width, e.height)
                                )
                                return (
                                    t.drawImage(e, 0, 0),
                                    t.getImageData(0, 0, e.width, e.height)
                                )
                            }
                            return e
                                .getContext("2d")
                                .getImageData(0, 0, e.width, e.height)
                        },
                        checkVersion: function (e) {
                            for (
                                var t =
                                        arguments.length > 1 &&
                                        void 0 !== arguments[1]
                                            ? arguments[1]
                                            : version,
                                    n = e.split("."),
                                    i = t.split("."),
                                    r = Math.min(n.length, i.length),
                                    o = 0,
                                    s = 0;
                                s < r && !(o = +n[s] - +i[s]);
                                s++
                            );
                            return o || n.length - i.length
                        },
                        getUriFragment: function (e) {
                            var t = {}
                            if (void 0 === e) {
                                var n = document.location
                                if (!n || !n.hash) return t
                                e = n.hash
                            } else {
                                var i = e.indexOf("#")
                                if (-1 === i) return t
                                e = e.substr(i, e.length)
                            }
                            return (
                                e
                                    .substr(1)
                                    .split("&")
                                    .filter(function (e) {
                                        return "" !== e
                                    })
                                    .forEach(function (e) {
                                        var n = e.split("="),
                                            i = n.shift(),
                                            r = n.join("=")
                                        t[i] = r || !0
                                    }),
                                t
                            )
                        },
                        resetGUID: function (e) {
                            var t =
                                arguments.length > 1 && void 0 !== arguments[1]
                                    ? arguments[1]
                                    : 0
                            ;(GUID_base = toHex$1(e.toString().toUpperCase())),
                                (GUID_index = t)
                        },
                        createGUID: function () {
                            var e =
                                arguments.length > 0 && void 0 !== arguments[0]
                                    ? arguments[0]
                                    : 1
                            return (
                                (GUID_index += e),
                                GUID_base + "-" + (e || GUID_index)
                            )
                        },
                    },
                    framecount = 0,
                    framedelta = 0,
                    last = 0,
                    now = 0,
                    delta = 0,
                    step = 0,
                    minstep = 0,
                    timers = [],
                    timerId = 0
                function update(e) {
                    ;(last = now),
                        (delta = (now = e) - last) < 0 && (delta = 0),
                        (timer.tick =
                            delta > minstep && timer.interpolation
                                ? delta / step
                                : 1),
                        updateTimers()
                }
                function clearTimer(e) {
                    for (var t = 0, n = timers.length; t < n; t++)
                        if (timers[t].timerId === e) {
                            timers.splice(t, 1)
                            break
                        }
                }
                function updateTimers() {
                    for (var e = 0, t = timers.length; e < t; e++) {
                        var n = timers[e]
                        ;(n.pauseable && state.isPaused()) ||
                            (n.elapsed += delta),
                            n.elapsed >= n.delay &&
                                (n.fn.apply(null, n.args),
                                !0 === n.repeat
                                    ? (n.elapsed -= n.delay)
                                    : timer.clearTimeout(n.timerId))
                    }
                }
                on(BOOT, function () {
                    timer.reset(),
                        (now = last = 0),
                        on(GAME_BEFORE_UPDATE, update)
                })
                var timer = {
                        tick: 1,
                        fps: 0,
                        maxfps: 60,
                        interpolation: !1,
                        reset: function () {
                            ;(last = now = window.performance.now()),
                                (delta = 0),
                                (framedelta = 0),
                                (framecount = 0),
                                (step = Math.ceil(1e3 / this.maxfps)),
                                (minstep = (1e3 / this.maxfps) * 1.25)
                        },
                        setTimeout: function (e, t, n) {
                            for (
                                var i = arguments.length,
                                    r = new Array(i > 3 ? i - 3 : 0),
                                    o = 3;
                                o < i;
                                o++
                            )
                                r[o - 3] = arguments[o]
                            return (
                                timers.push({
                                    fn: e,
                                    delay: t,
                                    elapsed: 0,
                                    repeat: !1,
                                    timerId: ++timerId,
                                    pauseable: !0 === n || !0,
                                    args: r,
                                }),
                                timerId
                            )
                        },
                        setInterval: function (e, t, n) {
                            for (
                                var i = arguments.length,
                                    r = new Array(i > 3 ? i - 3 : 0),
                                    o = 3;
                                o < i;
                                o++
                            )
                                r[o - 3] = arguments[o]
                            return (
                                timers.push({
                                    fn: e,
                                    delay: t,
                                    elapsed: 0,
                                    repeat: !0,
                                    timerId: ++timerId,
                                    pauseable: !0 === n || !0,
                                    args: r,
                                }),
                                timerId
                            )
                        },
                        clearTimeout: function (e) {
                            utils.function.defer(clearTimer, this, e)
                        },
                        clearInterval: function (e) {
                            utils.function.defer(clearTimer, this, e)
                        },
                        getTime: function () {
                            return now
                        },
                        getDelta: function () {
                            return delta
                        },
                        countFPS: function () {
                            framecount++,
                                (framedelta += delta),
                                framecount % 10 == 0 &&
                                    ((this.fps = _clamp(
                                        Math.round(
                                            (1e3 * framecount) / framedelta
                                        ),
                                        0,
                                        this.maxfps
                                    )),
                                    (framedelta = 0),
                                    (framecount = 0))
                        },
                    },
                    timer$1 = timer,
                    lastTime = 0,
                    vendors = ["ms", "moz", "webkit", "o"],
                    x,
                    requestAnimationFrame = window.requestAnimationFrame,
                    cancelAnimationFrame = window.cancelAnimationFrame
                for (x = 0; x < vendors.length && !requestAnimationFrame; ++x)
                    requestAnimationFrame =
                        window[vendors[x] + "RequestAnimationFrame"]
                for (x = 0; x < vendors.length && !cancelAnimationFrame; ++x)
                    cancelAnimationFrame =
                        window[vendors[x] + "CancelAnimationFrame"] ||
                        window[vendors[x] + "CancelRequestAnimationFrame"]
                ;(requestAnimationFrame && cancelAnimationFrame) ||
                    ((requestAnimationFrame = function (e) {
                        var t = window.performance.now(),
                            n = Math.max(
                                0,
                                1e3 / timer$1.maxfps - (t - lastTime)
                            ),
                            i = window.setTimeout(function () {
                                e(t + n)
                            }, n)
                        return (lastTime = t + n), i
                    }),
                    (cancelAnimationFrame = function (e) {
                        window.clearTimeout(e)
                    }),
                    (window.requestAnimationFrame = requestAnimationFrame),
                    (window.cancelAnimationFrame = cancelAnimationFrame))
                var plugins = {},
                    BasePlugin = _createClass(function e() {
                        _classCallCheck(this, e), (this.version = "10.2.3")
                    }),
                    plugin = {
                        Base: BasePlugin,
                        patch: function (e, t, n) {
                            if (
                                (void 0 !== e.prototype && (e = e.prototype),
                                "function" != typeof e[t])
                            )
                                throw new Error(
                                    t + " is not an existing function"
                                )
                            var i = e[t]
                            Object.defineProperty(e, t, {
                                configurable: !0,
                                value: (function (e, t) {
                                    return function () {
                                        this._patched = i
                                        var e = t.apply(this, arguments)
                                        return (this._patched = null), e
                                    }
                                })(0, n),
                            })
                        },
                        register: function (e, t) {
                            if (plugins[t])
                                throw new Error(
                                    "plugin " + t + " already registered"
                                )
                            var n = []
                            arguments.length > 2 &&
                                (n = Array.prototype.slice.call(arguments, 1)),
                                (n[0] = e)
                            var i = new (e.bind.apply(e, n))()
                            if (void 0 === i || !(i instanceof plugin.Base))
                                throw new Error(
                                    "Plugin should extend the me.plugin.Base Class !"
                                )
                            if (utils.checkVersion(i.version) > 0)
                                throw new Error(
                                    "Plugin version mismatch, expected: " +
                                        i.version +
                                        ", got: " +
                                        version
                                )
                            plugins[t] = i
                        },
                    },
                    Easing = {
                        Linear: {
                            None: function (e) {
                                return e
                            },
                        },
                        Quadratic: {
                            In: function (e) {
                                return e * e
                            },
                            Out: function (e) {
                                return e * (2 - e)
                            },
                            InOut: function (e) {
                                return (e *= 2) < 1
                                    ? 0.5 * e * e
                                    : -0.5 * (--e * (e - 2) - 1)
                            },
                        },
                        Cubic: {
                            In: function (e) {
                                return e * e * e
                            },
                            Out: function (e) {
                                return --e * e * e + 1
                            },
                            InOut: function (e) {
                                return (e *= 2) < 1
                                    ? 0.5 * e * e * e
                                    : 0.5 * ((e -= 2) * e * e + 2)
                            },
                        },
                        Quartic: {
                            In: function (e) {
                                return e * e * e * e
                            },
                            Out: function (e) {
                                return 1 - --e * e * e * e
                            },
                            InOut: function (e) {
                                return (e *= 2) < 1
                                    ? 0.5 * e * e * e * e
                                    : -0.5 * ((e -= 2) * e * e * e - 2)
                            },
                        },
                        Quintic: {
                            In: function (e) {
                                return e * e * e * e * e
                            },
                            Out: function (e) {
                                return --e * e * e * e * e + 1
                            },
                            InOut: function (e) {
                                return (e *= 2) < 1
                                    ? 0.5 * e * e * e * e * e
                                    : 0.5 * ((e -= 2) * e * e * e * e + 2)
                            },
                        },
                        Sinusoidal: {
                            In: function (e) {
                                return 1 - Math.cos((e * Math.PI) / 2)
                            },
                            Out: function (e) {
                                return Math.sin((e * Math.PI) / 2)
                            },
                            InOut: function (e) {
                                return 0.5 * (1 - Math.cos(Math.PI * e))
                            },
                        },
                        Exponential: {
                            In: function (e) {
                                return 0 === e ? 0 : Math.pow(1024, e - 1)
                            },
                            Out: function (e) {
                                return 1 === e ? 1 : 1 - Math.pow(2, -10 * e)
                            },
                            InOut: function (e) {
                                return 0 === e
                                    ? 0
                                    : 1 === e
                                    ? 1
                                    : (e *= 2) < 1
                                    ? 0.5 * Math.pow(1024, e - 1)
                                    : 0.5 * (2 - Math.pow(2, -10 * (e - 1)))
                            },
                        },
                        Circular: {
                            In: function (e) {
                                return 1 - Math.sqrt(1 - e * e)
                            },
                            Out: function (e) {
                                return Math.sqrt(1 - --e * e)
                            },
                            InOut: function (e) {
                                return (e *= 2) < 1
                                    ? -0.5 * (Math.sqrt(1 - e * e) - 1)
                                    : 0.5 * (Math.sqrt(1 - (e -= 2) * e) + 1)
                            },
                        },
                        Elastic: {
                            In: function (e) {
                                return 0 === e
                                    ? 0
                                    : 1 === e
                                    ? 1
                                    : -Math.pow(2, 10 * (e - 1)) *
                                      Math.sin(5 * (e - 1.1) * Math.PI)
                            },
                            Out: function (e) {
                                return 0 === e
                                    ? 0
                                    : 1 === e
                                    ? 1
                                    : Math.pow(2, -10 * e) *
                                          Math.sin(5 * (e - 0.1) * Math.PI) +
                                      1
                            },
                            InOut: function (e) {
                                return 0 === e
                                    ? 0
                                    : 1 === e
                                    ? 1
                                    : (e *= 2) < 1
                                    ? -0.5 *
                                      Math.pow(2, 10 * (e - 1)) *
                                      Math.sin(5 * (e - 1.1) * Math.PI)
                                    : 0.5 *
                                          Math.pow(2, -10 * (e - 1)) *
                                          Math.sin(5 * (e - 1.1) * Math.PI) +
                                      1
                            },
                        },
                        Back: {
                            In: function (e) {
                                var t = 1.70158
                                return e * e * ((t + 1) * e - t)
                            },
                            Out: function (e) {
                                var t = 1.70158
                                return --e * e * ((t + 1) * e + t) + 1
                            },
                            InOut: function (e) {
                                var t = 2.5949095
                                return (e *= 2) < 1
                                    ? e * e * ((t + 1) * e - t) * 0.5
                                    : 0.5 *
                                          ((e -= 2) * e * ((t + 1) * e + t) + 2)
                            },
                        },
                        Bounce: {
                            In: function (e) {
                                return 1 - Easing.Bounce.Out(1 - e)
                            },
                            Out: function (e) {
                                return e < 1 / 2.75
                                    ? 7.5625 * e * e
                                    : e < 2 / 2.75
                                    ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
                                    : e < 2.5 / 2.75
                                    ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
                                    : 7.5625 * (e -= 2.625 / 2.75) * e +
                                      0.984375
                            },
                            InOut: function (e) {
                                return e < 0.5
                                    ? 0.5 * Easing.Bounce.In(2 * e)
                                    : 0.5 * Easing.Bounce.Out(2 * e - 1) + 0.5
                            },
                        },
                    },
                    Interpolation = {
                        Linear: function (e, t) {
                            var n = e.length - 1,
                                i = n * t,
                                r = Math.floor(i),
                                o = Interpolation.Utils.Linear
                            return t < 0
                                ? o(e[0], e[1], i)
                                : t > 1
                                ? o(e[n], e[n - 1], n - i)
                                : o(e[r], e[r + 1 > n ? n : r + 1], i - r)
                        },
                        Bezier: function (e, t) {
                            var n,
                                i = 0,
                                r = e.length - 1,
                                o = Math.pow,
                                s = Interpolation.Utils.Bernstein
                            for (n = 0; n <= r; n++)
                                i += o(1 - t, r - n) * o(t, n) * e[n] * s(r, n)
                            return i
                        },
                        CatmullRom: function (e, t) {
                            var n = e.length - 1,
                                i = n * t,
                                r = Math.floor(i),
                                o = Interpolation.Utils.CatmullRom
                            return e[0] === e[n]
                                ? (t < 0 && (r = Math.floor((i = n * (1 + t)))),
                                  o(
                                      e[(r - 1 + n) % n],
                                      e[r],
                                      e[(r + 1) % n],
                                      e[(r + 2) % n],
                                      i - r
                                  ))
                                : t < 0
                                ? e[0] - (o(e[0], e[0], e[1], e[1], -i) - e[0])
                                : t > 1
                                ? e[n] -
                                  (o(e[n], e[n], e[n - 1], e[n - 1], i - n) -
                                      e[n])
                                : o(
                                      e[r ? r - 1 : 0],
                                      e[r],
                                      e[n < r + 1 ? n : r + 1],
                                      e[n < r + 2 ? n : r + 2],
                                      i - r
                                  )
                        },
                        Utils: {
                            Linear: function (e, t, n) {
                                return (t - e) * n + e
                            },
                            Bernstein: function (e, t) {
                                var n = Interpolation.Utils.Factorial
                                return n(e) / n(t) / n(e - t)
                            },
                            Factorial: (function () {
                                var e = [1]
                                return function (t) {
                                    var n,
                                        i = 1
                                    if (e[t]) return e[t]
                                    for (n = t; n > 1; n--) i *= n
                                    return (e[t] = i), i
                                }
                            })(),
                            CatmullRom: function (e, t, n, i, r) {
                                var o = 0.5 * (n - e),
                                    s = 0.5 * (i - t),
                                    a = r * r
                                return (
                                    (2 * t - 2 * n + o + s) * (r * a) +
                                    (-3 * t + 3 * n - 2 * o - s) * a +
                                    o * r +
                                    t
                                )
                            },
                        },
                    },
                    Tween = (function () {
                        function e(t) {
                            _classCallCheck(this, e), this.setProperties(t)
                        }
                        return (
                            _createClass(
                                e,
                                [
                                    {
                                        key: "onResetEvent",
                                        value: function (e) {
                                            this.setProperties(e)
                                        },
                                    },
                                    {
                                        key: "setProperties",
                                        value: function (e) {
                                            for (var t in ((this._object = e),
                                            (this._valuesStart = {}),
                                            (this._valuesEnd = {}),
                                            (this._valuesStartRepeat = {}),
                                            (this._duration = 1e3),
                                            (this._repeat = 0),
                                            (this._yoyo = !1),
                                            (this._reversed = !1),
                                            (this._delayTime = 0),
                                            (this._startTime = null),
                                            (this._easingFunction =
                                                Easing.Linear.None),
                                            (this._interpolationFunction =
                                                Interpolation.Linear),
                                            (this._chainedTweens = []),
                                            (this._onStartCallback = null),
                                            (this._onStartCallbackFired = !1),
                                            (this._onUpdateCallback = null),
                                            (this._onCompleteCallback = null),
                                            (this._tweenTimeTracker =
                                                lastUpdate),
                                            (this.isPersistent = !1),
                                            (this.updateWhenPaused = !1),
                                            (this.isRenderable = !1),
                                            e))
                                                "object" !== _typeof(e) &&
                                                    (this._valuesStart[t] =
                                                        parseFloat(e[t]))
                                        },
                                    },
                                    {
                                        key: "_resumeCallback",
                                        value: function (e) {
                                            this._startTime &&
                                                (this._startTime += e)
                                        },
                                    },
                                    {
                                        key: "onActivateEvent",
                                        value: function () {
                                            on(
                                                STATE_RESUME,
                                                this._resumeCallback,
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "onDeactivateEvent",
                                        value: function () {
                                            off(
                                                STATE_RESUME,
                                                this._resumeCallback
                                            )
                                        },
                                    },
                                    {
                                        key: "to",
                                        value: function (e, t) {
                                            return (
                                                (this._valuesEnd = e),
                                                void 0 !== t &&
                                                    ("number" == typeof t
                                                        ? (this._duration = t)
                                                        : "object" ===
                                                              _typeof(t) &&
                                                          (t.duration &&
                                                              (this._duration =
                                                                  t.duration),
                                                          t.yoyo &&
                                                              this.yoyo(t.yoyo),
                                                          t.easing &&
                                                              this.easing(
                                                                  t.easing
                                                              ),
                                                          t.repeat &&
                                                              this.repeat(
                                                                  t.repeat
                                                              ),
                                                          t.delay &&
                                                              this.delay(
                                                                  t.delay
                                                              ),
                                                          t.interpolation &&
                                                              this.interpolation(
                                                                  t.interpolation
                                                              ),
                                                          t.autoStart &&
                                                              this.start())),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "start",
                                        value: function () {
                                            var e =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : timer$1.getTime()
                                            for (var t in ((this._onStartCallbackFired =
                                                !1),
                                            world.addChild(this),
                                            (this._startTime =
                                                e + this._delayTime),
                                            this._valuesEnd)) {
                                                if (
                                                    this._valuesEnd[
                                                        t
                                                    ] instanceof Array
                                                ) {
                                                    if (
                                                        0 ===
                                                        this._valuesEnd[t]
                                                            .length
                                                    )
                                                        continue
                                                    this._valuesEnd[t] = [
                                                        this._object[t],
                                                    ].concat(this._valuesEnd[t])
                                                }
                                                ;(this._valuesStart[t] =
                                                    this._object[t]),
                                                    this._valuesStart[
                                                        t
                                                    ] instanceof
                                                        Array ==
                                                        0 &&
                                                        (this._valuesStart[
                                                            t
                                                        ] *= 1),
                                                    (this._valuesStartRepeat[
                                                        t
                                                    ] =
                                                        this._valuesStart[t] ||
                                                        0)
                                            }
                                            return this
                                        },
                                    },
                                    {
                                        key: "stop",
                                        value: function () {
                                            return (
                                                world.removeChildNow(this), this
                                            )
                                        },
                                    },
                                    {
                                        key: "delay",
                                        value: function (e) {
                                            return (this._delayTime = e), this
                                        },
                                    },
                                    {
                                        key: "repeat",
                                        value: function (e) {
                                            return (this._repeat = e), this
                                        },
                                    },
                                    {
                                        key: "yoyo",
                                        value: function (e) {
                                            return (this._yoyo = e), this
                                        },
                                    },
                                    {
                                        key: "easing",
                                        value: function (e) {
                                            if ("function" != typeof e)
                                                throw new Error(
                                                    "invalid easing function for me.Tween.easing()"
                                                )
                                            return (
                                                (this._easingFunction = e), this
                                            )
                                        },
                                    },
                                    {
                                        key: "interpolation",
                                        value: function (e) {
                                            return (
                                                (this._interpolationFunction =
                                                    e),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "chain",
                                        value: function (e) {
                                            return (
                                                (this._chainedTweens =
                                                    arguments),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "onStart",
                                        value: function (e) {
                                            return (
                                                (this._onStartCallback = e),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "onUpdate",
                                        value: function (e) {
                                            return (
                                                (this._onUpdateCallback = e),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "onComplete",
                                        value: function (e) {
                                            return (
                                                (this._onCompleteCallback = e),
                                                this
                                            )
                                        },
                                    },
                                    {
                                        key: "update",
                                        value: function (e) {
                                            this._tweenTimeTracker =
                                                lastUpdate >
                                                this._tweenTimeTracker
                                                    ? lastUpdate
                                                    : this._tweenTimeTracker + e
                                            var t,
                                                n = this._tweenTimeTracker
                                            if (n < this._startTime) return !0
                                            !1 === this._onStartCallbackFired &&
                                                (null !==
                                                    this._onStartCallback &&
                                                    this._onStartCallback.call(
                                                        this._object
                                                    ),
                                                (this._onStartCallbackFired =
                                                    !0))
                                            var i =
                                                (n - this._startTime) /
                                                this._duration
                                            i = i > 1 ? 1 : i
                                            var r = this._easingFunction(i)
                                            for (t in this._valuesEnd) {
                                                var o =
                                                        this._valuesStart[t] ||
                                                        0,
                                                    s = this._valuesEnd[t]
                                                s instanceof Array
                                                    ? (this._object[t] =
                                                          this._interpolationFunction(
                                                              s,
                                                              r
                                                          ))
                                                    : ("string" == typeof s &&
                                                          (s =
                                                              o +
                                                              parseFloat(s)),
                                                      "number" == typeof s &&
                                                          (this._object[t] =
                                                              o + (s - o) * r))
                                            }
                                            if (
                                                (null !==
                                                    this._onUpdateCallback &&
                                                    this._onUpdateCallback.call(
                                                        this._object,
                                                        r
                                                    ),
                                                1 === i)
                                            ) {
                                                if (this._repeat > 0) {
                                                    for (t in (isFinite(
                                                        this._repeat
                                                    ) && this._repeat--,
                                                    this._valuesStartRepeat)) {
                                                        if (
                                                            ("string" ==
                                                                typeof this
                                                                    ._valuesEnd[
                                                                    t
                                                                ] &&
                                                                (this._valuesStartRepeat[
                                                                    t
                                                                ] =
                                                                    this
                                                                        ._valuesStartRepeat[
                                                                        t
                                                                    ] +
                                                                    parseFloat(
                                                                        this
                                                                            ._valuesEnd[
                                                                            t
                                                                        ]
                                                                    )),
                                                            this._yoyo)
                                                        ) {
                                                            var a =
                                                                this
                                                                    ._valuesStartRepeat[
                                                                    t
                                                                ]
                                                            ;(this._valuesStartRepeat[
                                                                t
                                                            ] =
                                                                this._valuesEnd[
                                                                    t
                                                                ]),
                                                                (this._valuesEnd[
                                                                    t
                                                                ] = a)
                                                        }
                                                        this._valuesStart[t] =
                                                            this._valuesStartRepeat[
                                                                t
                                                            ]
                                                    }
                                                    return (
                                                        this._yoyo &&
                                                            (this._reversed =
                                                                !this
                                                                    ._reversed),
                                                        (this._startTime =
                                                            n +
                                                            this._delayTime),
                                                        !0
                                                    )
                                                }
                                                world.removeChildNow(this),
                                                    null !==
                                                        this
                                                            ._onCompleteCallback &&
                                                        this._onCompleteCallback.call(
                                                            this._object
                                                        )
                                                for (
                                                    var l = 0,
                                                        u =
                                                            this._chainedTweens
                                                                .length;
                                                    l < u;
                                                    l++
                                                )
                                                    this._chainedTweens[
                                                        l
                                                    ].start(n)
                                                return !1
                                            }
                                            return !0
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "Easing",
                                        get: function () {
                                            return Easing
                                        },
                                    },
                                    {
                                        key: "Interpolation",
                                        get: function () {
                                            return Interpolation
                                        },
                                    },
                                ]
                            ),
                            e
                        )
                    })(),
                    runits = ["ex", "em", "pt", "px"],
                    toPX = [12, 24, 0.75, 1],
                    setContextStyle = function (e, t) {
                        var n =
                            arguments.length > 2 &&
                            void 0 !== arguments[2] &&
                            arguments[2]
                        ;(e.font = t.font),
                            (e.fillStyle = t.fillStyle.toRGBA()),
                            !0 === n &&
                                ((e.strokeStyle = t.strokeStyle.toRGBA()),
                                (e.lineWidth = t.lineWidth)),
                            (e.textAlign = t.textAlign),
                            (e.textBaseline = t.textBaseline)
                    },
                    Text = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                (o = t.call(
                                    this,
                                    e,
                                    i,
                                    r.width || 0,
                                    r.height || 0
                                )).onResetEvent(e, i, r),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function (e, t, n) {
                                        void 0 !== n.fillStyle
                                            ? n.fillStyle instanceof Color
                                                ? (this.fillStyle = n.fillStyle)
                                                : (this.fillStyle = pool
                                                      .pull("Color")
                                                      .parseCSS(n.fillStyle))
                                            : (this.fillStyle = pool.pull(
                                                  "Color",
                                                  0,
                                                  0,
                                                  0
                                              )),
                                            void 0 !== n.strokeStyle
                                                ? n.strokeStyle instanceof Color
                                                    ? (this.strokeStyle =
                                                          n.strokeStyle)
                                                    : (this.strokeStyle = pool
                                                          .pull("Color")
                                                          .parseCSS(
                                                              n.strokeStyle
                                                          ))
                                                : (this.strokeStyle = pool.pull(
                                                      "Color",
                                                      0,
                                                      0,
                                                      0
                                                  )),
                                            (this.lineWidth = n.lineWidth || 1),
                                            (this.textAlign =
                                                n.textAlign || "left"),
                                            (this.textBaseline =
                                                n.textBaseline || "top"),
                                            (this.lineHeight =
                                                n.lineHeight || 1),
                                            (this.offScreenCanvas = !1),
                                            (this._text = []),
                                            (this.fontSize = 10),
                                            void 0 !== n.anchorPoint
                                                ? this.anchorPoint.setV(
                                                      n.anchorPoint
                                                  )
                                                : this.anchorPoint.set(0, 0),
                                            void 0 !== n.floating &&
                                                (this.floating = !!n.floating),
                                            this.setFont(n.font, n.size),
                                            !0 === n.bold && this.bold(),
                                            !0 === n.italic && this.italic(),
                                            !0 === n.offScreenCanvas &&
                                                ((this.offScreenCanvas = !0),
                                                (this.canvas = createCanvas(
                                                    2,
                                                    2,
                                                    !0
                                                )),
                                                (this.context =
                                                    this.canvas.getContext(
                                                        "2d"
                                                    ))),
                                            this.setText(n.text),
                                            this.update(0)
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        !0 === this.offScreenCanvas &&
                                            (renderer instanceof
                                                WebGLRenderer &&
                                                (renderer.currentCompositor.unbindTexture2D(
                                                    renderer.cache.get(
                                                        this.canvas
                                                    )
                                                ),
                                                renderer.cache.remove(
                                                    this.canvas
                                                )),
                                            (this.canvas.width =
                                                this.canvas.height =
                                                    0),
                                            (this.context = void 0),
                                            (this.canvas = void 0))
                                    },
                                },
                                {
                                    key: "bold",
                                    value: function () {
                                        return (
                                            (this.font = "bold " + this.font),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "italic",
                                    value: function () {
                                        return (
                                            (this.font = "italic " + this.font),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setFont",
                                    value: function (e, t) {
                                        var n = e.split(",").map(function (e) {
                                            return (
                                                (e = e.trim()),
                                                /(^".*"$)|(^'.*'$)/.test(e)
                                                    ? e
                                                    : '"' + e + '"'
                                            )
                                        })
                                        if ("number" == typeof t)
                                            (this.fontSize = t), (t += "px")
                                        else {
                                            var i = t.match(/([-+]?[\d.]*)(.*)/)
                                            ;(this.fontSize = parseFloat(i[1])),
                                                i[2]
                                                    ? (this.fontSize *=
                                                          toPX[
                                                              runits.indexOf(
                                                                  i[2]
                                                              )
                                                          ])
                                                    : (t += "px")
                                        }
                                        return (
                                            (this.height = this.fontSize),
                                            (this.font = t + " " + n.join(",")),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setText",
                                    value: function () {
                                        var e =
                                            arguments.length > 0 &&
                                            void 0 !== arguments[0]
                                                ? arguments[0]
                                                : ""
                                        return (
                                            this._text.toString() !==
                                                e.toString() &&
                                                (Array.isArray(e)
                                                    ? (this._text = e)
                                                    : (this._text = (
                                                          "" + e
                                                      ).split("\n")),
                                                (this.isDirty = !0)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "measureText",
                                    value: function (e, t, n) {
                                        var i,
                                            r = n || this.getBounds(),
                                            o = this.fontSize * this.lineHeight,
                                            s =
                                                void 0 !== t
                                                    ? ("" + t).split("\n")
                                                    : this._text
                                        ;(i =
                                            !0 === this.offScreenCanvas
                                                ? this.context
                                                : e.getFontContext()).save(),
                                            setContextStyle(i, this),
                                            (this.height = this.width = 0)
                                        for (var a = 0; a < s.length; a++)
                                            (this.width = Math.max(
                                                i.measureText(
                                                    trimRight("" + s[a])
                                                ).width,
                                                this.width
                                            )),
                                                (this.height += o)
                                        return (
                                            (r.width = Math.ceil(this.width)),
                                            (r.height = Math.ceil(this.height)),
                                            (r.x = Math.floor(
                                                "right" === this.textAlign
                                                    ? this.pos.x - this.width
                                                    : "center" ===
                                                      this.textAlign
                                                    ? this.pos.x -
                                                      this.width / 2
                                                    : this.pos.x
                                            )),
                                            (r.y = Math.floor(
                                                0 ===
                                                    this.textBaseline.search(
                                                        /^(top|hanging)$/
                                                    )
                                                    ? this.pos.y
                                                    : "middle" ===
                                                      this.textBaseline
                                                    ? this.pos.y - r.height / 2
                                                    : this.pos.y - r.height
                                            )),
                                            i.restore(),
                                            r
                                        )
                                    },
                                },
                                {
                                    key: "update",
                                    value: function () {
                                        if (!0 === this.isDirty) {
                                            var e = this.measureText(renderer)
                                            if (!0 === this.offScreenCanvas) {
                                                var t = Math.round(e.width),
                                                    n = Math.round(e.height)
                                                renderer instanceof
                                                    WebGLRenderer &&
                                                    (renderer.currentCompositor.unbindTexture2D(
                                                        renderer.cache.get(
                                                            this.canvas
                                                        )
                                                    ),
                                                    1 ===
                                                        renderer.WebGLVersion &&
                                                        ((t = nextPowerOfTwo(
                                                            e.width
                                                        )),
                                                        (n = nextPowerOfTwo(
                                                            e.height
                                                        )))),
                                                    this.canvas.width < t ||
                                                    this.canvas.height < n
                                                        ? ((this.canvas.width =
                                                              t),
                                                          (this.canvas.height =
                                                              n))
                                                        : this.context.clearRect(
                                                              0,
                                                              0,
                                                              this.canvas.width,
                                                              this.canvas.height
                                                          ),
                                                    this._drawFont(
                                                        this.context,
                                                        this._text,
                                                        this.pos.x - e.x,
                                                        this.pos.y - e.y,
                                                        !1
                                                    )
                                            }
                                        }
                                        return this.isDirty
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t, n, i, r) {
                                        void 0 === this.ancestor
                                            ? (this.setText(t),
                                              (this.pos.x === n &&
                                                  this.pos.y === i) ||
                                                  ((this.pos.x = n),
                                                  (this.pos.y = i),
                                                  (this.isDirty = !0)),
                                              this.update(0),
                                              e.save(),
                                              e.setGlobalAlpha(
                                                  e.globalAlpha() *
                                                      this.getOpacity()
                                              ))
                                            : ((n = this.pos.x),
                                              (i = this.pos.y)),
                                            !1 === e.settings.subPixel &&
                                                ((n = ~~n), (i = ~~i)),
                                            !0 === this.offScreenCanvas
                                                ? e.drawImage(
                                                      this.canvas,
                                                      this.getBounds().x,
                                                      this.getBounds().y
                                                  )
                                                : e.drawFont(
                                                      this._drawFont(
                                                          e.getFontContext(),
                                                          this._text,
                                                          n,
                                                          i,
                                                          r
                                                      )
                                                  ),
                                            void 0 === this.ancestor &&
                                                e.restore(),
                                            (this.isDirty = !1)
                                    },
                                },
                                {
                                    key: "drawStroke",
                                    value: function (e, t, n, i) {
                                        this.draw(e, t, n, i, !0)
                                    },
                                },
                                {
                                    key: "_drawFont",
                                    value: function (e, t, n, i) {
                                        var r =
                                            arguments.length > 4 &&
                                            void 0 !== arguments[4] &&
                                            arguments[4]
                                        setContextStyle(e, this, r)
                                        for (
                                            var o =
                                                    this.fontSize *
                                                    this.lineHeight,
                                                s = 0;
                                            s < t.length;
                                            s++
                                        ) {
                                            var a = trimRight("" + t[s])
                                            e[r ? "strokeText" : "fillText"](
                                                a,
                                                n,
                                                i
                                            ),
                                                (i += o)
                                        }
                                        return this.getBounds()
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        pool.push(this.fillStyle),
                                            pool.push(this.strokeStyle),
                                            (this.fillStyle = this.strokeStyle =
                                                void 0),
                                            (this._text.length = 0),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    measureTextWidth = function (e, t) {
                        for (
                            var n = t.split(""), i = 0, r = null, o = 0;
                            o < n.length;
                            o++
                        ) {
                            var s = n[o].charCodeAt(0),
                                a = e.fontData.glyphs[s],
                                l = r && r.kerning ? r.getKerning(s) : 0
                            ;(i += (a.xadvance + l) * e.fontScale.x), (r = a)
                        }
                        return i
                    },
                    measureTextHeight = function (e) {
                        return (
                            e.fontData.capHeight * e.lineHeight * e.fontScale.y
                        )
                    },
                    BitmapText = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(
                                    this,
                                    e,
                                    i,
                                    r.width || 0,
                                    r.height || 0
                                )).textAlign = r.textAlign || "left"),
                                (o.textBaseline = r.textBaseline || "top"),
                                (o.lineHeight = r.lineHeight || 1),
                                (o._text = []),
                                (o.fontScale = pool.pull("Vector2d", 1, 1)),
                                (o.fontImage =
                                    "object" === _typeof(r.font)
                                        ? r.font
                                        : loader.getImage(r.font)),
                                "string" != typeof r.fontData
                                    ? (o.fontData = pool.pull(
                                          "BitmapTextData",
                                          loader.getBinary(r.font)
                                      ))
                                    : (o.fontData = pool.pull(
                                          "BitmapTextData",
                                          r.fontData.includes("info face")
                                              ? r.fontData
                                              : loader.getBinary(r.fontData)
                                      )),
                                void 0 !== r.floating &&
                                    (o.floating = !!r.floating),
                                "number" == typeof r.size &&
                                    1 !== r.size &&
                                    o.resize(r.size),
                                void 0 !== r.fillStyle &&
                                    (r.fillStyle instanceof Color
                                        ? o.fillStyle.setColor(r.fillStyle)
                                        : o.fillStyle.parseCSS(r.fillStyle)),
                                void 0 !== r.anchorPoint
                                    ? o.anchorPoint.set(
                                          r.anchorPoint.x,
                                          r.anchorPoint.y
                                      )
                                    : o.anchorPoint.set(0, 0),
                                o.setText(r.text),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "set",
                                    value: function (e, t) {
                                        return (
                                            (this.textAlign = e),
                                            t && this.resize(t),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "setText",
                                    value: function (e) {
                                        return (
                                            void 0 === e && (e = ""),
                                            this._text.toString() !==
                                                e.toString() &&
                                                (Array.isArray(e)
                                                    ? (this._text = e)
                                                    : (this._text = (
                                                          "" + e
                                                      ).split("\n")),
                                                (this.isDirty = !0)),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "fillStyle",
                                    get: function () {
                                        return this.tint
                                    },
                                    set: function (e) {
                                        this.tint = e
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function (e) {
                                        return (
                                            this.fontScale.set(e, e),
                                            (this.isDirty = !0),
                                            this
                                        )
                                    },
                                },
                                {
                                    key: "measureText",
                                    value: function (e, t) {
                                        e = e || this._text
                                        var n = measureTextHeight(this),
                                            i = t || this.getBounds(),
                                            r =
                                                "string" == typeof e
                                                    ? ("" + e).split("\n")
                                                    : e
                                        i.height = i.width = 0
                                        for (var o = 0; o < r.length; o++)
                                            (i.width = Math.max(
                                                measureTextWidth(this, r[o]),
                                                i.width
                                            )),
                                                (i.height += n)
                                        return i
                                    },
                                },
                                {
                                    key: "update",
                                    value: function () {
                                        return (
                                            !0 === this.isDirty &&
                                                this.measureText(),
                                            this.isDirty
                                        )
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t, n, i) {
                                        var r = e.globalAlpha()
                                        void 0 === this.ancestor
                                            ? (this.setText(t),
                                              this.update(0),
                                              e.setGlobalAlpha(
                                                  r * this.getOpacity()
                                              ))
                                            : ((n = this.pos.x),
                                              (i = this.pos.y))
                                        for (
                                            var o = n,
                                                s = measureTextHeight(this),
                                                a = 0,
                                                l = 0;
                                            l < this._text.length;
                                            l++
                                        ) {
                                            n = o
                                            var u = trimRight(this._text[l]),
                                                h = measureTextWidth(this, u)
                                            switch (this.textAlign) {
                                                case "right":
                                                    n -= h
                                                    break
                                                case "center":
                                                    n -= 0.5 * h
                                            }
                                            switch (this.textBaseline) {
                                                case "middle":
                                                    i -= 0.5 * s
                                                    break
                                                case "ideographic":
                                                case "alphabetic":
                                                case "bottom":
                                                    i -= s
                                            }
                                            !0 === this.isDirty &&
                                                void 0 === this.ancestor &&
                                                (0 === l && (this.pos.y = i),
                                                a < h &&
                                                    ((a = h), (this.pos.x = n)))
                                            for (
                                                var c = null,
                                                    d = 0,
                                                    f = u.length;
                                                d < f;
                                                d++
                                            ) {
                                                var p = u.charCodeAt(d),
                                                    v = this.fontData.glyphs[p],
                                                    g = v.width,
                                                    y = v.height,
                                                    _ =
                                                        c && c.kerning
                                                            ? c.getKerning(p)
                                                            : 0
                                                0 !== g &&
                                                    0 !== y &&
                                                    e.drawImage(
                                                        this.fontImage,
                                                        v.x,
                                                        v.y,
                                                        g,
                                                        y,
                                                        n + v.xoffset,
                                                        i +
                                                            v.yoffset *
                                                                this.fontScale
                                                                    .y,
                                                        g * this.fontScale.x,
                                                        y * this.fontScale.y
                                                    ),
                                                    (n +=
                                                        (v.xadvance + _) *
                                                        this.fontScale.x),
                                                    (c = v)
                                            }
                                            i += s
                                        }
                                        void 0 === this.ancestor &&
                                            e.setGlobalAlpha(r),
                                            (this.isDirty = !1)
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        pool.push(this.fontScale),
                                            (this.fontScale = void 0),
                                            pool.push(this.fontData),
                                            (this.fontData = void 0),
                                            (this._text.length = 0),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    LOG2_PAGE_SIZE = 9,
                    PAGE_SIZE = 1 << LOG2_PAGE_SIZE,
                    Glyph = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                (this.id = 0),
                                (this.x = 0),
                                (this.y = 0),
                                (this.width = 0),
                                (this.height = 0),
                                (this.u = 0),
                                (this.v = 0),
                                (this.u2 = 0),
                                (this.v2 = 0),
                                (this.xoffset = 0),
                                (this.yoffset = 0),
                                (this.xadvance = 0),
                                (this.fixedWidth = !1)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "getKerning",
                                    value: function (e) {
                                        if (this.kerning) {
                                            var t =
                                                this.kerning[
                                                    e >>> LOG2_PAGE_SIZE
                                                ]
                                            if (t)
                                                return (
                                                    t[e & (PAGE_SIZE - 1)] || 0
                                                )
                                        }
                                        return 0
                                    },
                                },
                                {
                                    key: "setKerning",
                                    value: function (e, t) {
                                        this.kerning || (this.kerning = {})
                                        var n =
                                            this.kerning[e >>> LOG2_PAGE_SIZE]
                                        void 0 === n &&
                                            ((this.kerning[
                                                e >>> LOG2_PAGE_SIZE
                                            ] = {}),
                                            (n =
                                                this.kerning[
                                                    e >>> LOG2_PAGE_SIZE
                                                ])),
                                            (n[e & (PAGE_SIZE - 1)] = t)
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    capChars = [
                        "M",
                        "N",
                        "B",
                        "D",
                        "C",
                        "E",
                        "F",
                        "K",
                        "A",
                        "G",
                        "H",
                        "I",
                        "J",
                        "L",
                        "O",
                        "P",
                        "Q",
                        "R",
                        "S",
                        "T",
                        "U",
                        "V",
                        "W",
                        "X",
                        "Y",
                        "Z",
                    ]
                function getValueFromPair(e, t) {
                    var n = e.match(t)
                    if (!n)
                        throw new Error(
                            "Could not find pattern " + t + " in string: " + e
                        )
                    return n[0].split("=")[1]
                }
                function getFirstGlyph(e) {
                    for (var t = Object.keys(e), n = 0; n < t.length; n++)
                        if (t[n] > 32) return e[t[n]]
                    return null
                }
                function createSpaceGlyph(e) {
                    var t = " ".charCodeAt(0),
                        n = e[t]
                    n ||
                        (((n = new Glyph()).id = t),
                        (n.xadvance = getFirstGlyph(e).xadvance),
                        (e[t] = n))
                }
                var BitmapTextData = (function () {
                        function e() {
                            _classCallCheck(this, e),
                                this.onResetEvent.apply(this, arguments)
                        }
                        return (
                            _createClass(e, [
                                {
                                    key: "onResetEvent",
                                    value: function (e) {
                                        ;(this.padTop = 0),
                                            (this.padRight = 0),
                                            (this.padBottom = 0),
                                            (this.padLeft = 0),
                                            (this.lineHeight = 0),
                                            (this.capHeight = 1),
                                            (this.descent = 0),
                                            (this.glyphs = {}),
                                            this.parse(e)
                                    },
                                },
                                {
                                    key: "parse",
                                    value: function (e) {
                                        if (!e)
                                            throw new Error(
                                                "File containing font data was empty, cannot load the bitmap font."
                                            )
                                        var t = e.split(/\r\n|\n/),
                                            n = e.match(
                                                /padding\=\d+,\d+,\d+,\d+/g
                                            )
                                        if (!n)
                                            throw new Error(
                                                "Padding not found in first line"
                                            )
                                        var i = n[0].split("=")[1].split(",")
                                        ;(this.padTop = parseFloat(i[0])),
                                            (this.padLeft = parseFloat(i[1])),
                                            (this.padBottom = parseFloat(i[2])),
                                            (this.padRight = parseFloat(i[3])),
                                            (this.lineHeight = parseFloat(
                                                getValueFromPair(
                                                    t[1],
                                                    /lineHeight\=\d+/g
                                                )
                                            ))
                                        var r,
                                            o = parseFloat(
                                                getValueFromPair(
                                                    t[1],
                                                    /base\=\d+/g
                                                )
                                            ),
                                            s = this.padTop + this.padBottom,
                                            a = null
                                        for (r = 4; r < t.length; r++) {
                                            var l = t[r],
                                                u = l.split(/=|\s+/)
                                            if (l && !/^kernings/.test(l))
                                                if (/^kerning\s/.test(l)) {
                                                    var h = parseFloat(u[2]),
                                                        c = parseFloat(u[4]),
                                                        d = parseFloat(u[6])
                                                    null !=
                                                        (a = this.glyphs[h]) &&
                                                        a.setKerning(c, d)
                                                } else {
                                                    a = new Glyph()
                                                    var f = parseFloat(u[2])
                                                    ;(a.id = f),
                                                        (a.x = parseFloat(
                                                            u[4]
                                                        )),
                                                        (a.y = parseFloat(
                                                            u[6]
                                                        )),
                                                        (a.width = parseFloat(
                                                            u[8]
                                                        )),
                                                        (a.height = parseFloat(
                                                            u[10]
                                                        )),
                                                        (a.xoffset = parseFloat(
                                                            u[12]
                                                        )),
                                                        (a.yoffset = parseFloat(
                                                            u[14]
                                                        )),
                                                        (a.xadvance =
                                                            parseFloat(u[16])),
                                                        a.width > 0 &&
                                                            a.height > 0 &&
                                                            (this.descent =
                                                                Math.min(
                                                                    o +
                                                                        a.yoffset,
                                                                    this.descent
                                                                )),
                                                        (this.glyphs[f] = a)
                                                }
                                        }
                                        ;(this.descent += this.padBottom),
                                            createSpaceGlyph(this.glyphs)
                                        var p = null
                                        for (r = 0; r < capChars.length; r++) {
                                            var v = capChars[r]
                                            if (
                                                (p =
                                                    this.glyphs[
                                                        v.charCodeAt(0)
                                                    ])
                                            )
                                                break
                                        }
                                        if (p) this.capHeight = p.height
                                        else
                                            for (var g in this.glyphs)
                                                if (
                                                    this.glyphs.hasOwnProperty(
                                                        g
                                                    )
                                                ) {
                                                    if (
                                                        0 ===
                                                            (a = this.glyphs[g])
                                                                .height ||
                                                        0 === a.width
                                                    )
                                                        continue
                                                    this.capHeight = Math.max(
                                                        this.capHeight,
                                                        a.height
                                                    )
                                                }
                                        this.capHeight -= s
                                    },
                                },
                            ]),
                            e
                        )
                    })(),
                    ImageLayer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(this, e, i, r)).floating = !0),
                                o.offset.set(e, i),
                                (o.ratio = pool.pull("Vector2d", 1, 1)),
                                void 0 !== r.ratio &&
                                    (isNumeric(r.ratio)
                                        ? o.ratio.set(r.ratio, +r.ratio)
                                        : o.ratio.setV(r.ratio)),
                                void 0 === r.anchorPoint
                                    ? o.anchorPoint.set(0, 0)
                                    : "number" == typeof r.anchorPoint
                                    ? o.anchorPoint.set(
                                          r.anchorPoint,
                                          r.anchorPoint
                                      )
                                    : o.anchorPoint.setV(r.anchorPoint),
                                (o.repeat = r.repeat || "repeat"),
                                on(
                                    WEBGL_ONCONTEXT_RESTORED,
                                    o.createPattern,
                                    _assertThisInitialized(o)
                                ),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "repeat",
                                    get: function () {
                                        return this._repeat
                                    },
                                    set: function (e) {
                                        switch (
                                            ((this._repeat = e), this._repeat)
                                        ) {
                                            case "no-repeat":
                                                ;(this.repeatX = !1),
                                                    (this.repeatY = !1)
                                                break
                                            case "repeat-x":
                                                ;(this.repeatX = !0),
                                                    (this.repeatY = !1)
                                                break
                                            case "repeat-y":
                                                ;(this.repeatX = !1),
                                                    (this.repeatY = !0)
                                                break
                                            default:
                                                ;(this.repeatX = !0),
                                                    (this.repeatY = !0)
                                        }
                                        this.resize(
                                            viewport.width,
                                            viewport.height
                                        ),
                                            this.createPattern()
                                    },
                                },
                                {
                                    key: "onActivateEvent",
                                    value: function () {
                                        var e = this
                                        on(
                                            VIEWPORT_ONCHANGE,
                                            this.updateLayer,
                                            this
                                        ),
                                            on(
                                                VIEWPORT_ONRESIZE,
                                                this.resize,
                                                this
                                            ),
                                            once(LEVEL_LOADED, function () {
                                                e.updateLayer(viewport.pos)
                                            }),
                                            !0 !== this.ancestor.root &&
                                                this.updateLayer(viewport.pos)
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function (e, t) {
                                        _get(
                                            _getPrototypeOf(n.prototype),
                                            "resize",
                                            this
                                        ).call(
                                            this,
                                            this.repeatX ? 1 / 0 : e,
                                            this.repeatY ? 1 / 0 : t
                                        )
                                    },
                                },
                                {
                                    key: "createPattern",
                                    value: function () {
                                        this._pattern = renderer.createPattern(
                                            this.image,
                                            this._repeat
                                        )
                                    },
                                },
                                {
                                    key: "updateLayer",
                                    value: function (e) {
                                        var t = this.ratio.x,
                                            n = this.ratio.y
                                        if (0 !== t || 0 !== n) {
                                            var i = this.width,
                                                r = this.height,
                                                o = viewport.bounds.width,
                                                s = viewport.bounds.height,
                                                a = this.anchorPoint.x,
                                                l = this.anchorPoint.y,
                                                u =
                                                    a *
                                                        (t - 1) *
                                                        (o - viewport.width) +
                                                    this.offset.x -
                                                    t * e.x,
                                                h =
                                                    l *
                                                        (n - 1) *
                                                        (s - viewport.height) +
                                                    this.offset.y -
                                                    n * e.y
                                            this.repeatX
                                                ? (this.pos.x = u % i)
                                                : (this.pos.x = u),
                                                this.repeatY
                                                    ? (this.pos.y = h % r)
                                                    : (this.pos.y = h),
                                                (this.isDirty = !0)
                                        }
                                    },
                                },
                                {
                                    key: "preDraw",
                                    value: function (e) {
                                        e.save(),
                                            e.setGlobalAlpha(
                                                e.globalAlpha() *
                                                    this.getOpacity()
                                            ),
                                            e.setTint(this.tint)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e) {
                                        var t = this.width,
                                            n = this.height,
                                            i = viewport.bounds.width,
                                            r = viewport.bounds.height,
                                            o = this.anchorPoint.x,
                                            s = this.anchorPoint.y,
                                            a = this.pos.x,
                                            l = this.pos.y
                                        0 === this.ratio.x &&
                                            0 === this.ratio.y &&
                                            ((a += o * (i - t)),
                                            (l += s * (r - n))),
                                            e.translate(a, l),
                                            e.drawPattern(
                                                this._pattern,
                                                0,
                                                0,
                                                2 * viewport.width,
                                                2 * viewport.height
                                            )
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        off(
                                            VIEWPORT_ONCHANGE,
                                            this.updateLayer
                                        ),
                                            off(VIEWPORT_ONRESIZE, this.resize)
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        pool.push(this.ratio),
                                            (this.ratio = void 0),
                                            off(
                                                WEBGL_ONCONTEXT_RESTORED,
                                                this.createPattern
                                            ),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Sprite),
                    NineSliceSprite = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            if (
                                (_classCallCheck(this, n),
                                (o = t.call(this, e, i, r)),
                                "number" != typeof r.width ||
                                    "number" != typeof r.height)
                            )
                                throw new Error(
                                    "height and width properties are mandatory"
                                )
                            return (o.width = r.width), (o.height = r.height), o
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "draw",
                                    value: function (e) {
                                        var t = this.current,
                                            n = this.pos.x,
                                            i = this.pos.y,
                                            r = t.width,
                                            o = t.height,
                                            s = t.offset,
                                            a = this.offset
                                        0 !== t.angle &&
                                            (e.translate(-n, -i),
                                            e.rotate(t.angle),
                                            (n -= o),
                                            (r = t.height),
                                            (o = t.width))
                                        var l = a.x + s.x,
                                            u = a.y + s.y,
                                            h = t.width / 4,
                                            c = t.height / 4
                                        e.drawImage(
                                            this.image,
                                            l,
                                            u,
                                            h,
                                            c,
                                            n,
                                            i,
                                            h,
                                            c
                                        ),
                                            e.drawImage(
                                                this.image,
                                                l + r - h,
                                                u,
                                                h,
                                                c,
                                                n + this.width - h,
                                                i,
                                                h,
                                                c
                                            ),
                                            e.drawImage(
                                                this.image,
                                                l,
                                                u + o - c,
                                                h,
                                                c,
                                                n,
                                                i + this.height - c,
                                                h,
                                                c
                                            ),
                                            e.drawImage(
                                                this.image,
                                                l + r - h,
                                                u + o - c,
                                                h,
                                                c,
                                                n + this.width - h,
                                                i + this.height - c,
                                                h,
                                                c
                                            )
                                        var d = r - (h << 1),
                                            f = o - (c << 1),
                                            p = this.width - (h << 1),
                                            v = this.height - (c << 1)
                                        e.drawImage(
                                            this.image,
                                            l + h,
                                            u,
                                            d,
                                            c,
                                            n + h,
                                            i,
                                            p,
                                            c
                                        ),
                                            e.drawImage(
                                                this.image,
                                                l + h,
                                                u + o - c,
                                                d,
                                                c,
                                                n + h,
                                                i + this.height - c,
                                                p,
                                                c
                                            ),
                                            e.drawImage(
                                                this.image,
                                                l,
                                                u + c,
                                                h,
                                                f,
                                                n,
                                                i + c,
                                                h,
                                                v
                                            ),
                                            e.drawImage(
                                                this.image,
                                                l + r - h,
                                                u + c,
                                                h,
                                                f,
                                                n + this.width - h,
                                                i + c,
                                                h,
                                                v
                                            ),
                                            e.drawImage(
                                                this.image,
                                                l + h,
                                                u + c,
                                                d,
                                                f,
                                                n + h,
                                                i + c,
                                                p,
                                                v
                                            )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Sprite),
                    GUI_Object = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(this, e, i, r)).isClickable = !0),
                                (o.holdThreshold = 250),
                                (o.isHoldable = !1),
                                (o.hover = !1),
                                (o.holdTimeout = null),
                                (o.released = !0),
                                (o.floating = !0),
                                (o.isKinematic = !1),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "clicked",
                                    value: function (e) {
                                        if (0 === e.button && this.isClickable)
                                            return (
                                                (this.dirty = !0),
                                                (this.released = !1),
                                                this.isHoldable &&
                                                    (null !==
                                                        this.holdTimeout &&
                                                        timer$1.clearTimeout(
                                                            this.holdTimeout
                                                        ),
                                                    (this.holdTimeout =
                                                        timer$1.setTimeout(
                                                            this.hold.bind(
                                                                this
                                                            ),
                                                            this.holdThreshold,
                                                            !1
                                                        )),
                                                    (this.released = !1)),
                                                this.onClick(e)
                                            )
                                    },
                                },
                                {
                                    key: "onClick",
                                    value: function () {
                                        return !1
                                    },
                                },
                                {
                                    key: "enter",
                                    value: function (e) {
                                        return (
                                            (this.hover = !0),
                                            (this.dirty = !0),
                                            this.onOver(e)
                                        )
                                    },
                                },
                                { key: "onOver", value: function () {} },
                                {
                                    key: "leave",
                                    value: function (e) {
                                        return (
                                            (this.hover = !1),
                                            (this.dirty = !0),
                                            this.release(e),
                                            this.onOut(e)
                                        )
                                    },
                                },
                                { key: "onOut", value: function () {} },
                                {
                                    key: "release",
                                    value: function (e) {
                                        if (!1 === this.released)
                                            return (
                                                (this.released = !0),
                                                (this.dirty = !0),
                                                timer$1.clearTimeout(
                                                    this.holdTimeout
                                                ),
                                                this.onRelease(e)
                                            )
                                    },
                                },
                                {
                                    key: "onRelease",
                                    value: function () {
                                        return !1
                                    },
                                },
                                {
                                    key: "hold",
                                    value: function () {
                                        timer$1.clearTimeout(this.holdTimeout),
                                            (this.dirty = !0),
                                            this.released || this.onHold()
                                    },
                                },
                                { key: "onHold", value: function () {} },
                                {
                                    key: "onActivateEvent",
                                    value: function () {
                                        registerPointerEvent(
                                            "pointerdown",
                                            this,
                                            this.clicked.bind(this)
                                        ),
                                            registerPointerEvent(
                                                "pointerup",
                                                this,
                                                this.release.bind(this)
                                            ),
                                            registerPointerEvent(
                                                "pointercancel",
                                                this,
                                                this.release.bind(this)
                                            ),
                                            registerPointerEvent(
                                                "pointerenter",
                                                this,
                                                this.enter.bind(this)
                                            ),
                                            registerPointerEvent(
                                                "pointerleave",
                                                this,
                                                this.leave.bind(this)
                                            )
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        releasePointerEvent(
                                            "pointerdown",
                                            this
                                        ),
                                            releasePointerEvent(
                                                "pointerup",
                                                this
                                            ),
                                            releasePointerEvent(
                                                "pointercancel",
                                                this
                                            ),
                                            releasePointerEvent(
                                                "pointerenter",
                                                this
                                            ),
                                            releasePointerEvent(
                                                "pointerleave",
                                                this
                                            ),
                                            timer$1.clearTimeout(
                                                this.holdTimeout
                                            )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Sprite),
                    Collectable = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(this, e, i, r)).name = r.name),
                                (o.type = r.type),
                                (o.id = r.id),
                                (o.body = new Body(
                                    _assertThisInitialized(o),
                                    r.shapes ||
                                        new Rect(0, 0, o.width, o.height)
                                )),
                                (o.body.collisionType =
                                    collision.types.COLLECTABLE_OBJECT),
                                o.body.setCollisionMask(
                                    collision.types.PLAYER_OBJECT
                                ),
                                o.body.setStatic(!0),
                                r.anchorPoint
                                    ? o.anchorPoint.set(
                                          r.anchorPoint.x,
                                          r.anchorPoint.y
                                      )
                                    : o.anchorPoint.set(0, 0),
                                o
                            )
                        }
                        return _createClass(n)
                    })(Sprite),
                    Trigger = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                (o = t.call(
                                    this,
                                    e,
                                    i,
                                    r.width || 0,
                                    r.height || 0
                                )).anchorPoint.set(0, 0),
                                (o.fade = r.fade),
                                (o.duration = r.duration),
                                (o.fading = !1),
                                (o.name = "Trigger"),
                                (o.type = r.type),
                                (o.id = r.id),
                                (o.gotolevel = r.to),
                                (o.triggerSettings = { event: "level" }),
                                [
                                    "type",
                                    "container",
                                    "onLoaded",
                                    "flatten",
                                    "setViewportBounds",
                                    "to",
                                ].forEach(
                                    function (e) {
                                        void 0 !== r[e] &&
                                            (this.triggerSettings[e] = r[e])
                                    }.bind(_assertThisInitialized(o))
                                ),
                                (o.body = new Body(
                                    _assertThisInitialized(o),
                                    r.shapes ||
                                        new Rect(0, 0, o.width, o.height)
                                )),
                                (o.body.collisionType =
                                    collision.types.ACTION_OBJECT),
                                o.body.setCollisionMask(
                                    collision.types.PLAYER_OBJECT
                                ),
                                o.body.setStatic(!0),
                                o.resize(
                                    o.body.getBounds().width,
                                    o.body.getBounds().height
                                ),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "getTriggerSettings",
                                    value: function () {
                                        return (
                                            "string" ==
                                                typeof this.triggerSettings
                                                    .container &&
                                                (this.triggerSettings.container =
                                                    world.getChildByName(
                                                        this.triggerSettings
                                                            .container
                                                    )[0]),
                                            this.triggerSettings
                                        )
                                    },
                                },
                                {
                                    key: "onFadeComplete",
                                    value: function () {
                                        level.load(
                                            this.gotolevel,
                                            this.getTriggerSettings()
                                        ),
                                            viewport.fadeOut(
                                                this.fade,
                                                this.duration
                                            )
                                    },
                                },
                                {
                                    key: "triggerEvent",
                                    value: function () {
                                        var e = this.getTriggerSettings()
                                        if ("level" !== e.event)
                                            throw new Error(
                                                "Trigger invalid type"
                                            )
                                        ;(this.gotolevel = e.to),
                                            this.fade && this.duration
                                                ? this.fading ||
                                                  ((this.fading = !0),
                                                  viewport.fadeIn(
                                                      this.fade,
                                                      this.duration,
                                                      this.onFadeComplete.bind(
                                                          this
                                                      )
                                                  ))
                                                : level.load(this.gotolevel, e)
                                    },
                                },
                                {
                                    key: "onCollision",
                                    value: function () {
                                        return (
                                            "Trigger" === this.name &&
                                                this.triggerEvent.apply(this),
                                            !1
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    ParticleContainer = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            return (
                                _classCallCheck(this, n),
                                ((i = t.call(
                                    this,
                                    viewport.pos.x,
                                    viewport.pos.y,
                                    viewport.width,
                                    viewport.height
                                )).autoSort = !1),
                                (i._updateCount = 0),
                                (i._dt = 0),
                                (i._emitter = e),
                                (i.autoTransform = !1),
                                i.anchorPoint.set(0, 0),
                                (i.isKinematic = !0),
                                i
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "update",
                                    value: function (e) {
                                        if (
                                            (++this._updateCount >
                                                this._emitter.framesToSkip &&
                                                (this._updateCount = 0),
                                            this._updateCount > 0)
                                        )
                                            return (this._dt += e), !1
                                        ;(e += this._dt), (this._dt = 0)
                                        for (
                                            var t = this.children.length - 1;
                                            t >= 0;
                                            --t
                                        ) {
                                            var n = this.children[t]
                                            ;(n.inViewport = viewport.isVisible(
                                                n,
                                                this.floating
                                            )),
                                                n.update(e) ||
                                                    this.removeChildNow(n)
                                        }
                                        return !0
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        if (this.children.length > 0) {
                                            var i,
                                                r = e.getContext()
                                            this._emitter.textureAdditive &&
                                                ((i =
                                                    r.globalCompositeOperation),
                                                (r.globalCompositeOperation =
                                                    "lighter")),
                                                _get(
                                                    _getPrototypeOf(
                                                        n.prototype
                                                    ),
                                                    "draw",
                                                    this
                                                ).call(this, e, t),
                                                this._emitter.textureAdditive &&
                                                    (r.globalCompositeOperation =
                                                        i)
                                        }
                                    },
                                },
                            ]),
                            n
                        )
                    })(Container),
                    pixel =
                        ((canvas = createCanvas(1, 1)),
                        (context = canvas.getContext("2d")),
                        (context.fillStyle = "#fff"),
                        context.fillRect(0, 0, 1, 1),
                        canvas),
                    canvas,
                    context,
                    ParticleEmitterSettings = {
                        width: 0,
                        height: 0,
                        image: pixel,
                        totalParticles: 50,
                        angle: Math.PI / 2,
                        angleVariation: 0,
                        minLife: 1e3,
                        maxLife: 3e3,
                        speed: 2,
                        speedVariation: 1,
                        minRotation: 0,
                        maxRotation: 0,
                        minStartScale: 1,
                        maxStartScale: 1,
                        minEndScale: 0,
                        maxEndScale: 0,
                        gravity: 0,
                        wind: 0,
                        followTrajectory: !1,
                        textureAdditive: !1,
                        onlyInViewport: !0,
                        floating: !1,
                        maxParticles: 10,
                        frequency: 100,
                        duration: 1 / 0,
                        framesToSkip: 0,
                    },
                    ParticleEmitter = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(
                                    this,
                                    e,
                                    i,
                                    1 / 0,
                                    1 / 0
                                ))._stream = !1),
                                (o._frequencyTimer = 0),
                                (o._durationTimer = 0),
                                (o._enabled = !1),
                                (o.alwaysUpdate = !0),
                                (o.autoSort = !1),
                                (o.container = new ParticleContainer(
                                    _assertThisInitialized(o)
                                )),
                                Object.defineProperty(o.pos, "z", {
                                    get: function () {
                                        return this.container.pos.z
                                    }.bind(_assertThisInitialized(o)),
                                    set: function (e) {
                                        this.container.pos.z = e
                                    }.bind(_assertThisInitialized(o)),
                                    enumerable: !0,
                                    configurable: !0,
                                }),
                                Object.defineProperty(
                                    _assertThisInitialized(o),
                                    "floating",
                                    {
                                        get: function () {
                                            return this.container.floating
                                        },
                                        set: function (e) {
                                            this.container.floating = e
                                        },
                                        enumerable: !0,
                                        configurable: !0,
                                    }
                                ),
                                o.reset(r),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onActivateEvent",
                                    value: function () {
                                        this.ancestor.addChild(this.container),
                                            (this.container.pos.z = this.pos.z),
                                            this.ancestor.autoSort ||
                                                this.ancestor.sort()
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        this.ancestor.hasChild(
                                            this.container
                                        ) &&
                                            this.ancestor.removeChildNow(
                                                this.container
                                            )
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.reset()
                                    },
                                },
                                {
                                    key: "getRandomPointX",
                                    value: function () {
                                        return (
                                            this.pos.x +
                                            randomFloat(0, this.width)
                                        )
                                    },
                                },
                                {
                                    key: "getRandomPointY",
                                    value: function () {
                                        return (
                                            this.pos.y +
                                            randomFloat(0, this.height)
                                        )
                                    },
                                },
                                {
                                    key: "reset",
                                    value: function (e) {
                                        var t = ParticleEmitterSettings,
                                            n =
                                                "number" ==
                                                typeof (e = e || {}).width
                                                    ? e.width
                                                    : t.width,
                                            i =
                                                "number" == typeof e.height
                                                    ? e.height
                                                    : t.height
                                        this.resize(n, i),
                                            Object.assign(this, t, e),
                                            this.container.reset()
                                    },
                                },
                                {
                                    key: "addParticles",
                                    value: function (e) {
                                        for (var t = 0; t < ~~e; t++) {
                                            var n = pool.pull("Particle", this)
                                            this.container.addChild(n)
                                        }
                                    },
                                },
                                {
                                    key: "isRunning",
                                    value: function () {
                                        return this._enabled && this._stream
                                    },
                                },
                                {
                                    key: "streamParticles",
                                    value: function (e) {
                                        ;(this._enabled = !0),
                                            (this._stream = !0),
                                            (this.frequency = Math.max(
                                                this.frequency,
                                                1
                                            )),
                                            (this._durationTimer =
                                                "number" == typeof e
                                                    ? e
                                                    : this.duration)
                                    },
                                },
                                {
                                    key: "stopStream",
                                    value: function () {
                                        this._enabled = !1
                                    },
                                },
                                {
                                    key: "burstParticles",
                                    value: function (e) {
                                        ;(this._enabled = !0),
                                            (this._stream = !1),
                                            this.addParticles(
                                                "number" == typeof e
                                                    ? e
                                                    : this.totalParticles
                                            ),
                                            (this._enabled = !1)
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        if (this._enabled && this._stream) {
                                            if (
                                                this._durationTimer !== 1 / 0 &&
                                                ((this._durationTimer -= e),
                                                this._durationTimer <= 0)
                                            )
                                                return this.stopStream(), !1
                                            this._frequencyTimer += e
                                            var t =
                                                this.container.children.length
                                            t < this.totalParticles &&
                                                this._frequencyTimer >=
                                                    this.frequency &&
                                                (t + this.maxParticles <=
                                                this.totalParticles
                                                    ? this.addParticles(
                                                          this.maxParticles
                                                      )
                                                    : this.addParticles(
                                                          this.totalParticles -
                                                              t
                                                      ),
                                                (this._frequencyTimer = 0))
                                        }
                                        return !0
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    Particle = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e) {
                            var i
                            return (
                                _classCallCheck(this, n),
                                ((i = t.call(
                                    this,
                                    e.getRandomPointX(),
                                    e.getRandomPointY(),
                                    e.image.width,
                                    e.image.height
                                )).vel = new Vector2d()),
                                i.onResetEvent(e, !0),
                                i
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "onResetEvent",
                                    value: function (e) {
                                        var t =
                                            arguments.length > 1 &&
                                            void 0 !== arguments[1] &&
                                            arguments[1]
                                        !1 === t &&
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "onResetEvent",
                                                this
                                            ).call(
                                                this,
                                                e.getRandomPointX(),
                                                e.getRandomPointY(),
                                                e.image.width,
                                                e.image.height
                                            ),
                                            (this.alwaysUpdate = !0),
                                            (this.image = e.image)
                                        var i =
                                                e.angle +
                                                (e.angleVariation > 0
                                                    ? (randomFloat(0, 2) - 1) *
                                                      e.angleVariation
                                                    : 0),
                                            r =
                                                e.speed +
                                                (e.speedVariation > 0
                                                    ? (randomFloat(0, 2) - 1) *
                                                      e.speedVariation
                                                    : 0)
                                        this.vel.set(
                                            r * Math.cos(i),
                                            -r * Math.sin(i)
                                        ),
                                            (this.life = randomFloat(
                                                e.minLife,
                                                e.maxLife
                                            )),
                                            (this.startLife = this.life),
                                            (this.startScale = _clamp(
                                                randomFloat(
                                                    e.minStartScale,
                                                    e.maxStartScale
                                                ),
                                                e.minStartScale,
                                                e.maxStartScale
                                            )),
                                            (this.endScale = _clamp(
                                                randomFloat(
                                                    e.minEndScale,
                                                    e.maxEndScale
                                                ),
                                                e.minEndScale,
                                                e.maxEndScale
                                            )),
                                            (this.gravity = e.gravity),
                                            (this.wind = e.wind),
                                            (this.followTrajectory =
                                                e.followTrajectory),
                                            (this.onlyInViewport =
                                                e.onlyInViewport),
                                            (this.pos.z = e.z),
                                            (this._deltaInv =
                                                timer$1.maxfps / 1e3),
                                            e.followTrajectory ||
                                                (this.angle = randomFloat(
                                                    e.minRotation,
                                                    e.maxRotation
                                                ))
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        var t = e * this._deltaInv
                                        this.life =
                                            this.life > e ? this.life - e : 0
                                        var n = this.life / this.startLife,
                                            i = this.startScale
                                        this.startScale > this.endScale
                                            ? (i =
                                                  (i *= n) < this.endScale
                                                      ? this.endScale
                                                      : i)
                                            : this.startScale < this.endScale &&
                                              (i =
                                                  (i /= n) > this.endScale
                                                      ? this.endScale
                                                      : i),
                                            (this.alpha = n),
                                            (this.vel.x += this.wind * t),
                                            (this.vel.y += this.gravity * t)
                                        var r = this.followTrajectory
                                            ? Math.atan2(this.vel.y, this.vel.x)
                                            : this.angle
                                        return (
                                            (this.pos.x += this.vel.x * t),
                                            (this.pos.y += this.vel.y * t),
                                            this.currentTransform
                                                .setTransform(
                                                    i,
                                                    0,
                                                    0,
                                                    0,
                                                    i,
                                                    0,
                                                    this.pos.x,
                                                    this.pos.y,
                                                    1
                                                )
                                                .rotate(r),
                                            (this.inViewport ||
                                                !this.onlyInViewport) &&
                                                this.life > 0
                                        )
                                    },
                                },
                                {
                                    key: "preDraw",
                                    value: function (e) {
                                        e.save(),
                                            e.setGlobalAlpha(
                                                e.globalAlpha() * this.alpha
                                            ),
                                            e.transform(this.currentTransform)
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e) {
                                        var t = this.width,
                                            n = this.height
                                        e.drawImage(
                                            this.image,
                                            0,
                                            0,
                                            t,
                                            n,
                                            -t / 2,
                                            -n / 2,
                                            t,
                                            n
                                        )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    Entity = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            if (
                                (_classCallCheck(this, n),
                                "number" != typeof r.width ||
                                    "number" != typeof r.height)
                            )
                                throw new Error(
                                    "height and width properties are mandatory when passing settings parameters to an object entity"
                                )
                            return (
                                ((o = t.call(
                                    this,
                                    e,
                                    i,
                                    r.width,
                                    r.height
                                )).children = []),
                                r.image &&
                                    ((r.framewidth = r.framewidth || r.width),
                                    (r.frameheight = r.frameheight || r.height),
                                    (o.renderable = new Sprite(0, 0, r))),
                                r.anchorPoint
                                    ? o.anchorPoint.set(
                                          r.anchorPoint.x,
                                          r.anchorPoint.y
                                      )
                                    : o.anchorPoint.set(0, 0),
                                "string" == typeof r.name && (o.name = r.name),
                                (o.type = r.type || ""),
                                (o.id = r.id || ""),
                                (o.alive = !0),
                                void 0 === r.shapes &&
                                    (r.shapes = new Polygon(0, 0, [
                                        new Vector2d(0, 0),
                                        new Vector2d(o.width, 0),
                                        new Vector2d(o.width, o.height),
                                        new Vector2d(0, o.height),
                                    ])),
                                (o.body = new Body(
                                    _assertThisInitialized(o),
                                    r.shapes,
                                    o.onBodyUpdate.bind(
                                        _assertThisInitialized(o)
                                    )
                                )),
                                0 === o.width &&
                                    0 === o.height &&
                                    o.resize(
                                        o.body.getBounds().width,
                                        o.body.getBounds().height
                                    ),
                                o.body.setCollisionMask(r.collisionMask),
                                o.body.setCollisionType(r.collisionType),
                                (o.autoTransform = !1),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "renderable",
                                    get: function () {
                                        return this.children[0]
                                    },
                                    set: function (e) {
                                        if (!(e instanceof Renderable))
                                            throw new Error(
                                                e +
                                                    "should extend me.Renderable"
                                            )
                                        ;(this.children[0] = e),
                                            (this.children[0].ancestor = this)
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (e) {
                                        return (
                                            this.renderable &&
                                                (this.isDirty |=
                                                    this.renderable.update(e)),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "update",
                                                this
                                            ).call(this, e)
                                        )
                                    },
                                },
                                {
                                    key: "onBodyUpdate",
                                    value: function (e) {
                                        this.getBounds().addBounds(
                                            e.getBounds(),
                                            !0
                                        ),
                                            this.updateBoundsPos(
                                                this.pos.x,
                                                this.pos.y
                                            )
                                    },
                                },
                                {
                                    key: "preDraw",
                                    value: function (e) {
                                        e.save(),
                                            e.translate(
                                                this.pos.x +
                                                    this.body.getBounds().x,
                                                this.pos.y +
                                                    this.body.getBounds().y
                                            ),
                                            this.renderable instanceof
                                                Renderable &&
                                                e.translate(
                                                    this.anchorPoint.x *
                                                        this.body.getBounds()
                                                            .width,
                                                    this.anchorPoint.y *
                                                        this.body.getBounds()
                                                            .height
                                                )
                                    },
                                },
                                {
                                    key: "draw",
                                    value: function (e, t) {
                                        var n = this.renderable
                                        n instanceof Renderable &&
                                            (n.preDraw(e),
                                            n.draw(e, t),
                                            n.postDraw(e))
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.renderable &&
                                            (this.renderable.destroy.apply(
                                                this.renderable,
                                                arguments
                                            ),
                                            this.children.splice(0, 1)),
                                            _get(
                                                _getPrototypeOf(n.prototype),
                                                "destroy",
                                                this
                                            ).call(this, arguments)
                                    },
                                },
                                {
                                    key: "onDeactivateEvent",
                                    value: function () {
                                        this.renderable &&
                                            this.renderable.onDeactivateEvent &&
                                            this.renderable.onDeactivateEvent()
                                    },
                                },
                            ]),
                            n
                        )
                    })(Renderable),
                    DraggableEntity = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(this, e, i, r)).dragging = !1),
                                (o.dragId = null),
                                (o.grabOffset = new Vector2d(0, 0)),
                                (o.onPointerEvent = registerPointerEvent),
                                (o.removePointerEvent = releasePointerEvent),
                                o.initEvents(),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "initEvents",
                                    value: function () {
                                        ;(this.mouseDown = function (e) {
                                            this.translatePointerEvent(
                                                e,
                                                DRAGSTART
                                            )
                                        }),
                                            (this.mouseUp = function (e) {
                                                this.translatePointerEvent(
                                                    e,
                                                    DRAGEND
                                                )
                                            }),
                                            this.onPointerEvent(
                                                "pointerdown",
                                                this,
                                                this.mouseDown.bind(this)
                                            ),
                                            this.onPointerEvent(
                                                "pointerup",
                                                this,
                                                this.mouseUp.bind(this)
                                            ),
                                            this.onPointerEvent(
                                                "pointercancel",
                                                this,
                                                this.mouseUp.bind(this)
                                            ),
                                            on(
                                                POINTERMOVE,
                                                this.dragMove,
                                                this
                                            ),
                                            on(DRAGSTART, this.dragStart, this),
                                            on(DRAGEND, this.dragEnd, this)
                                    },
                                },
                                {
                                    key: "translatePointerEvent",
                                    value: function (e, t) {
                                        emit(t, e)
                                    },
                                },
                                {
                                    key: "dragStart",
                                    value: function (e) {
                                        if (!1 === this.dragging)
                                            return (
                                                (this.dragging = !0),
                                                this.grabOffset.set(
                                                    e.gameX,
                                                    e.gameY
                                                ),
                                                this.grabOffset.sub(this.pos),
                                                !1
                                            )
                                    },
                                },
                                {
                                    key: "dragMove",
                                    value: function (e) {
                                        !0 === this.dragging &&
                                            (this.pos.set(
                                                e.gameX,
                                                e.gameY,
                                                this.pos.z
                                            ),
                                            this.pos.sub(this.grabOffset))
                                    },
                                },
                                {
                                    key: "dragEnd",
                                    value: function () {
                                        if (!0 === this.dragging)
                                            return (this.dragging = !1), !1
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        off(POINTERMOVE, this.dragMove),
                                            off(DRAGSTART, this.dragStart),
                                            off(DRAGEND, this.dragEnd),
                                            this.removePointerEvent(
                                                "pointerdown",
                                                this
                                            ),
                                            this.removePointerEvent(
                                                "pointerup",
                                                this
                                            )
                                    },
                                },
                            ]),
                            n
                        )
                    })(Entity),
                    DroptargetEntity = (function (e) {
                        _inherits(n, e)
                        var t = _createSuper(n)
                        function n(e, i, r) {
                            var o
                            return (
                                _classCallCheck(this, n),
                                ((o = t.call(
                                    this,
                                    e,
                                    i,
                                    r
                                )).CHECKMETHOD_OVERLAP = "overlaps"),
                                (o.CHECKMETHOD_CONTAINS = "contains"),
                                (o.checkMethod = null),
                                on(
                                    DRAGEND,
                                    o.checkOnMe,
                                    _assertThisInitialized(o)
                                ),
                                (o.checkMethod = o[o.CHECKMETHOD_OVERLAP]),
                                o
                            )
                        }
                        return (
                            _createClass(n, [
                                {
                                    key: "setCheckMethod",
                                    value: function (e) {
                                        void 0 !== this[e] &&
                                            (this.checkMethod = this[e])
                                    },
                                },
                                {
                                    key: "checkOnMe",
                                    value: function (e, t) {
                                        t &&
                                            this.checkMethod(t.getBounds()) &&
                                            this.drop(t)
                                    },
                                },
                                { key: "drop", value: function () {} },
                                {
                                    key: "destroy",
                                    value: function () {
                                        off(DRAGEND, this.checkOnMe)
                                    },
                                },
                            ]),
                            n
                        )
                    })(Entity)
                function warning(e, t, n) {
                    var i =
                            "melonJS: %s is deprecated since version %s, please use %s",
                        r = new Error().stack
                    console.groupCollapsed
                        ? console.groupCollapsed(
                              "%c" + i,
                              "font-weight:normal;color:yellow;",
                              e,
                              n,
                              t
                          )
                        : console.warn(i, e, n, t),
                        void 0 !== r && console.warn(r),
                        console.groupCollapsed && console.groupEnd()
                }
                function apply() {}
                var deprecated = Object.freeze({
                        __proto__: null,
                        warning,
                        apply,
                    }),
                    version = "10.2.3",
                    initialized = !1,
                    skipAutoInit = !1
                function boot() {
                    !0 !== initialized &&
                        (pool.register("me.Entity", Entity),
                        pool.register("me.Collectable", Collectable),
                        pool.register("me.Trigger", Trigger),
                        pool.register("me.Tween", Tween, !0),
                        pool.register("me.Color", Color, !0),
                        pool.register("me.Particle", Particle, !0),
                        pool.register("me.Sprite", Sprite),
                        pool.register("me.NineSliceSprite", NineSliceSprite),
                        pool.register("me.Renderable", Renderable),
                        pool.register("me.Text", Text, !0),
                        pool.register("me.BitmapText", BitmapText),
                        pool.register("me.BitmapTextData", BitmapTextData, !0),
                        pool.register("me.ImageLayer", ImageLayer),
                        pool.register("me.ColorLayer", ColorLayer, !0),
                        pool.register("me.Vector2d", Vector2d, !0),
                        pool.register("me.Vector3d", Vector3d, !0),
                        pool.register(
                            "me.ObservableVector2d",
                            ObservableVector2d,
                            !0
                        ),
                        pool.register(
                            "me.ObservableVector3d",
                            ObservableVector3d,
                            !0
                        ),
                        pool.register("me.Matrix2d", Matrix2d, !0),
                        pool.register("me.Matrix3d", Matrix3d, !0),
                        pool.register("me.Rect", Rect, !0),
                        pool.register("me.Polygon", Polygon, !0),
                        pool.register("me.Line", Line, !0),
                        pool.register("me.Ellipse", Ellipse, !0),
                        pool.register("me.Bounds", Bounds$1, !0),
                        pool.register("Entity", Entity),
                        pool.register("Collectable", Collectable),
                        pool.register("Trigger", Trigger),
                        pool.register("Tween", Tween, !0),
                        pool.register("Color", Color, !0),
                        pool.register("Particle", Particle, !0),
                        pool.register("Sprite", Sprite),
                        pool.register("NineSliceSprite", NineSliceSprite),
                        pool.register("Renderable", Renderable),
                        pool.register("Text", Text, !0),
                        pool.register("BitmapText", BitmapText),
                        pool.register("BitmapTextData", BitmapTextData, !0),
                        pool.register("ImageLayer", ImageLayer),
                        pool.register("ColorLayer", ColorLayer, !0),
                        pool.register("Vector2d", Vector2d, !0),
                        pool.register("Vector3d", Vector3d, !0),
                        pool.register(
                            "ObservableVector2d",
                            ObservableVector2d,
                            !0
                        ),
                        pool.register(
                            "ObservableVector3d",
                            ObservableVector3d,
                            !0
                        ),
                        pool.register("Matrix2d", Matrix2d, !0),
                        pool.register("Matrix3d", Matrix3d, !0),
                        pool.register("Rect", Rect, !0),
                        pool.register("Polygon", Polygon, !0),
                        pool.register("Line", Line, !0),
                        pool.register("Ellipse", Ellipse, !0),
                        pool.register("Bounds", Bounds$1, !0),
                        emit(BOOT),
                        loader.setNocache(utils.getUriFragment().nocache || !1),
                        initKeyboardEvent(),
                        (initialized = !0))
                }
                device$1.onReady(function () {
                    boot()
                })
            },
            6266: (e, t, n) => {
                n(5767),
                    n(8132),
                    n(8388),
                    n(7470),
                    n(4882),
                    n(1520),
                    n(7476),
                    n(9622),
                    n(9375),
                    n(3533),
                    n(4672),
                    n(4157),
                    n(5095),
                    n(9892),
                    n(5115),
                    n(9176),
                    n(8838),
                    n(6253),
                    n(9730),
                    n(6059),
                    n(8377),
                    n(1084),
                    n(4299),
                    n(1246),
                    n(726),
                    n(1901),
                    n(5972),
                    n(3403),
                    n(2516),
                    n(9371),
                    n(6479),
                    n(1736),
                    n(1889),
                    n(5177),
                    n(6943),
                    n(6503),
                    n(6786),
                    n(932),
                    n(7526),
                    n(1591),
                    n(9073),
                    n(347),
                    n(579),
                    n(4669),
                    n(7710),
                    n(5789),
                    n(3514),
                    n(9978),
                    n(8472),
                    n(6946),
                    n(5068),
                    n(413),
                    n(191),
                    n(8306),
                    n(4564),
                    n(9115),
                    n(9539),
                    n(6620),
                    n(2850),
                    n(823),
                    n(7732),
                    n(856),
                    n(703),
                    n(1539),
                    n(5292),
                    n(6629),
                    n(3694),
                    n(7648),
                    n(7795),
                    n(4531),
                    n(3605),
                    n(6780),
                    n(9937),
                    n(511),
                    n(1822),
                    n(9977),
                    n(1031),
                    n(6331),
                    n(1560),
                    n(774),
                    n(522),
                    n(8295),
                    n(7842),
                    n(110),
                    n(75),
                    n(4336),
                    n(1802),
                    n(8837),
                    n(6773),
                    n(5745),
                    n(3057),
                    n(3750),
                    n(3369),
                    n(9564),
                    n(2e3),
                    n(8977),
                    n(2310),
                    n(4899),
                    n(1842),
                    n(6997),
                    n(3946),
                    n(8269),
                    n(6108),
                    n(6774),
                    n(1466),
                    n(9357),
                    n(6142),
                    n(1876),
                    n(851),
                    n(8416),
                    n(8184),
                    n(147),
                    n(9192),
                    n(142),
                    n(1786),
                    n(5368),
                    n(6964),
                    n(2152),
                    n(4821),
                    n(9103),
                    n(1303),
                    n(3318),
                    n(162),
                    n(3834),
                    n(1572),
                    n(2139),
                    n(685),
                    n(5535),
                    n(7347),
                    n(3049),
                    n(6633),
                    n(8989),
                    n(8270),
                    n(4510),
                    n(3984),
                    n(5769),
                    n(55),
                    n(6014),
                    (e.exports = n(5645))
            },
            911: (e, t, n) => {
                n(1268), (e.exports = n(5645).Array.flatMap)
            },
            990: (e, t, n) => {
                n(2773), (e.exports = n(5645).Array.includes)
            },
            5434: (e, t, n) => {
                n(3276), (e.exports = n(5645).Object.entries)
            },
            8051: (e, t, n) => {
                n(8351), (e.exports = n(5645).Object.getOwnPropertyDescriptors)
            },
            8250: (e, t, n) => {
                n(6409), (e.exports = n(5645).Object.values)
            },
            4952: (e, t, n) => {
                "use strict"
                n(851), n(9865), (e.exports = n(5645).Promise.finally)
            },
            6197: (e, t, n) => {
                n(2770), (e.exports = n(5645).String.padEnd)
            },
            4160: (e, t, n) => {
                n(1784), (e.exports = n(5645).String.padStart)
            },
            4039: (e, t, n) => {
                n(4325), (e.exports = n(5645).String.trimRight)
            },
            6728: (e, t, n) => {
                n(5869), (e.exports = n(5645).String.trimLeft)
            },
            3568: (e, t, n) => {
                n(9665), (e.exports = n(8787).f("asyncIterator"))
            },
            115: (e, t, n) => {
                n(4579), (e.exports = n(1327).global)
            },
            5663: e => {
                e.exports = function (e) {
                    if ("function" != typeof e)
                        throw TypeError(e + " is not a function!")
                    return e
                }
            },
            2159: (e, t, n) => {
                var i = n(6727)
                e.exports = function (e) {
                    if (!i(e)) throw TypeError(e + " is not an object!")
                    return e
                }
            },
            1327: e => {
                var t = (e.exports = { version: "2.6.12" })
                "number" == typeof __e && (__e = t)
            },
            9216: (e, t, n) => {
                var i = n(5663)
                e.exports = function (e, t, n) {
                    if ((i(e), void 0 === t)) return e
                    switch (n) {
                        case 1:
                            return function (n) {
                                return e.call(t, n)
                            }
                        case 2:
                            return function (n, i) {
                                return e.call(t, n, i)
                            }
                        case 3:
                            return function (n, i, r) {
                                return e.call(t, n, i, r)
                            }
                    }
                    return function () {
                        return e.apply(t, arguments)
                    }
                }
            },
            9666: (e, t, n) => {
                e.exports = !n(7929)(function () {
                    return (
                        7 !=
                        Object.defineProperty({}, "a", {
                            get: function () {
                                return 7
                            },
                        }).a
                    )
                })
            },
            7467: (e, t, n) => {
                var i = n(6727),
                    r = n(3938).document,
                    o = i(r) && i(r.createElement)
                e.exports = function (e) {
                    return o ? r.createElement(e) : {}
                }
            },
            3856: (e, t, n) => {
                var i = n(3938),
                    r = n(1327),
                    o = n(9216),
                    s = n(1818),
                    a = n(7069),
                    l = function (e, t, n) {
                        var u,
                            h,
                            c,
                            d = e & l.F,
                            f = e & l.G,
                            p = e & l.S,
                            v = e & l.P,
                            g = e & l.B,
                            y = e & l.W,
                            _ = f ? r : r[t] || (r[t] = {}),
                            m = _.prototype,
                            x = f ? i : p ? i[t] : (i[t] || {}).prototype
                        for (u in (f && (n = t), n))
                            ((h = !d && x && void 0 !== x[u]) && a(_, u)) ||
                                ((c = h ? x[u] : n[u]),
                                (_[u] =
                                    f && "function" != typeof x[u]
                                        ? n[u]
                                        : g && h
                                        ? o(c, i)
                                        : y && x[u] == c
                                        ? (function (e) {
                                              var t = function (t, n, i) {
                                                  if (this instanceof e) {
                                                      switch (
                                                          arguments.length
                                                      ) {
                                                          case 0:
                                                              return new e()
                                                          case 1:
                                                              return new e(t)
                                                          case 2:
                                                              return new e(t, n)
                                                      }
                                                      return new e(t, n, i)
                                                  }
                                                  return e.apply(
                                                      this,
                                                      arguments
                                                  )
                                              }
                                              return (
                                                  (t.prototype = e.prototype), t
                                              )
                                          })(c)
                                        : v && "function" == typeof c
                                        ? o(Function.call, c)
                                        : c),
                                v &&
                                    (((_.virtual || (_.virtual = {}))[u] = c),
                                    e & l.R && m && !m[u] && s(m, u, c)))
                    }
                ;(l.F = 1),
                    (l.G = 2),
                    (l.S = 4),
                    (l.P = 8),
                    (l.B = 16),
                    (l.W = 32),
                    (l.U = 64),
                    (l.R = 128),
                    (e.exports = l)
            },
            7929: e => {
                e.exports = function (e) {
                    try {
                        return !!e()
                    } catch (e) {
                        return !0
                    }
                }
            },
            3938: e => {
                var t = (e.exports =
                    "undefined" != typeof window && window.Math == Math
                        ? window
                        : "undefined" != typeof self && self.Math == Math
                        ? self
                        : Function("return this")())
                "number" == typeof __g && (__g = t)
            },
            7069: e => {
                var t = {}.hasOwnProperty
                e.exports = function (e, n) {
                    return t.call(e, n)
                }
            },
            1818: (e, t, n) => {
                var i = n(4743),
                    r = n(3101)
                e.exports = n(9666)
                    ? function (e, t, n) {
                          return i.f(e, t, r(1, n))
                      }
                    : function (e, t, n) {
                          return (e[t] = n), e
                      }
            },
            3758: (e, t, n) => {
                e.exports =
                    !n(9666) &&
                    !n(7929)(function () {
                        return (
                            7 !=
                            Object.defineProperty(n(7467)("div"), "a", {
                                get: function () {
                                    return 7
                                },
                            }).a
                        )
                    })
            },
            6727: e => {
                e.exports = function (e) {
                    return "object" == typeof e
                        ? null !== e
                        : "function" == typeof e
                }
            },
            4743: (e, t, n) => {
                var i = n(2159),
                    r = n(3758),
                    o = n(3206),
                    s = Object.defineProperty
                t.f = n(9666)
                    ? Object.defineProperty
                    : function (e, t, n) {
                          if ((i(e), (t = o(t, !0)), i(n), r))
                              try {
                                  return s(e, t, n)
                              } catch (e) {}
                          if ("get" in n || "set" in n)
                              throw TypeError("Accessors not supported!")
                          return "value" in n && (e[t] = n.value), e
                      }
            },
            3101: e => {
                e.exports = function (e, t) {
                    return {
                        enumerable: !(1 & e),
                        configurable: !(2 & e),
                        writable: !(4 & e),
                        value: t,
                    }
                }
            },
            3206: (e, t, n) => {
                var i = n(6727)
                e.exports = function (e, t) {
                    if (!i(e)) return e
                    var n, r
                    if (
                        t &&
                        "function" == typeof (n = e.toString) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    if (
                        "function" == typeof (n = e.valueOf) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    if (
                        !t &&
                        "function" == typeof (n = e.toString) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    throw TypeError("Can't convert object to primitive value")
                }
            },
            4579: (e, t, n) => {
                var i = n(3856)
                i(i.G, { global: n(3938) })
            },
            4963: e => {
                e.exports = function (e) {
                    if ("function" != typeof e)
                        throw TypeError(e + " is not a function!")
                    return e
                }
            },
            3365: (e, t, n) => {
                var i = n(2032)
                e.exports = function (e, t) {
                    if ("number" != typeof e && "Number" != i(e))
                        throw TypeError(t)
                    return +e
                }
            },
            7722: (e, t, n) => {
                var i = n(6314)("unscopables"),
                    r = Array.prototype
                null == r[i] && n(7728)(r, i, {}),
                    (e.exports = function (e) {
                        r[i][e] = !0
                    })
            },
            6793: (e, t, n) => {
                "use strict"
                var i = n(4496)(!0)
                e.exports = function (e, t, n) {
                    return t + (n ? i(e, t).length : 1)
                }
            },
            3328: e => {
                e.exports = function (e, t, n, i) {
                    if (!(e instanceof t) || (void 0 !== i && i in e))
                        throw TypeError(n + ": incorrect invocation!")
                    return e
                }
            },
            7007: (e, t, n) => {
                var i = n(5286)
                e.exports = function (e) {
                    if (!i(e)) throw TypeError(e + " is not an object!")
                    return e
                }
            },
            5216: (e, t, n) => {
                "use strict"
                var i = n(508),
                    r = n(2337),
                    o = n(875)
                e.exports =
                    [].copyWithin ||
                    function (e, t) {
                        var n = i(this),
                            s = o(n.length),
                            a = r(e, s),
                            l = r(t, s),
                            u = arguments.length > 2 ? arguments[2] : void 0,
                            h = Math.min(
                                (void 0 === u ? s : r(u, s)) - l,
                                s - a
                            ),
                            c = 1
                        for (
                            l < a &&
                            a < l + h &&
                            ((c = -1), (l += h - 1), (a += h - 1));
                            h-- > 0;

                        )
                            l in n ? (n[a] = n[l]) : delete n[a],
                                (a += c),
                                (l += c)
                        return n
                    }
            },
            6852: (e, t, n) => {
                "use strict"
                var i = n(508),
                    r = n(2337),
                    o = n(875)
                e.exports = function (e) {
                    for (
                        var t = i(this),
                            n = o(t.length),
                            s = arguments.length,
                            a = r(s > 1 ? arguments[1] : void 0, n),
                            l = s > 2 ? arguments[2] : void 0,
                            u = void 0 === l ? n : r(l, n);
                        u > a;

                    )
                        t[a++] = e
                    return t
                }
            },
            9315: (e, t, n) => {
                var i = n(2110),
                    r = n(875),
                    o = n(2337)
                e.exports = function (e) {
                    return function (t, n, s) {
                        var a,
                            l = i(t),
                            u = r(l.length),
                            h = o(s, u)
                        if (e && n != n) {
                            for (; u > h; ) if ((a = l[h++]) != a) return !0
                        } else
                            for (; u > h; h++)
                                if ((e || h in l) && l[h] === n)
                                    return e || h || 0
                        return !e && -1
                    }
                }
            },
            50: (e, t, n) => {
                var i = n(741),
                    r = n(9797),
                    o = n(508),
                    s = n(875),
                    a = n(6886)
                e.exports = function (e, t) {
                    var n = 1 == e,
                        l = 2 == e,
                        u = 3 == e,
                        h = 4 == e,
                        c = 6 == e,
                        d = 5 == e || c,
                        f = t || a
                    return function (t, a, p) {
                        for (
                            var v,
                                g,
                                y = o(t),
                                _ = r(y),
                                m = i(a, p, 3),
                                x = s(_.length),
                                w = 0,
                                b = n ? f(t, x) : l ? f(t, 0) : void 0;
                            x > w;
                            w++
                        )
                            if ((d || w in _) && ((g = m((v = _[w]), w, y)), e))
                                if (n) b[w] = g
                                else if (g)
                                    switch (e) {
                                        case 3:
                                            return !0
                                        case 5:
                                            return v
                                        case 6:
                                            return w
                                        case 2:
                                            b.push(v)
                                    }
                                else if (h) return !1
                        return c ? -1 : u || h ? h : b
                    }
                }
            },
            7628: (e, t, n) => {
                var i = n(4963),
                    r = n(508),
                    o = n(9797),
                    s = n(875)
                e.exports = function (e, t, n, a, l) {
                    i(t)
                    var u = r(e),
                        h = o(u),
                        c = s(u.length),
                        d = l ? c - 1 : 0,
                        f = l ? -1 : 1
                    if (n < 2)
                        for (;;) {
                            if (d in h) {
                                ;(a = h[d]), (d += f)
                                break
                            }
                            if (((d += f), l ? d < 0 : c <= d))
                                throw TypeError(
                                    "Reduce of empty array with no initial value"
                                )
                        }
                    for (; l ? d >= 0 : c > d; d += f)
                        d in h && (a = t(a, h[d], d, u))
                    return a
                }
            },
            2736: (e, t, n) => {
                var i = n(5286),
                    r = n(4302),
                    o = n(6314)("species")
                e.exports = function (e) {
                    var t
                    return (
                        r(e) &&
                            ("function" != typeof (t = e.constructor) ||
                                (t !== Array && !r(t.prototype)) ||
                                (t = void 0),
                            i(t) && null === (t = t[o]) && (t = void 0)),
                        void 0 === t ? Array : t
                    )
                }
            },
            6886: (e, t, n) => {
                var i = n(2736)
                e.exports = function (e, t) {
                    return new (i(e))(t)
                }
            },
            4398: (e, t, n) => {
                "use strict"
                var i = n(4963),
                    r = n(5286),
                    o = n(7242),
                    s = [].slice,
                    a = {},
                    l = function (e, t, n) {
                        if (!(t in a)) {
                            for (var i = [], r = 0; r < t; r++)
                                i[r] = "a[" + r + "]"
                            a[t] = Function(
                                "F,a",
                                "return new F(" + i.join(",") + ")"
                            )
                        }
                        return a[t](e, n)
                    }
                e.exports =
                    Function.bind ||
                    function (e) {
                        var t = i(this),
                            n = s.call(arguments, 1),
                            a = function () {
                                var i = n.concat(s.call(arguments))
                                return this instanceof a
                                    ? l(t, i.length, i)
                                    : o(t, i, e)
                            }
                        return r(t.prototype) && (a.prototype = t.prototype), a
                    }
            },
            1488: (e, t, n) => {
                var i = n(2032),
                    r = n(6314)("toStringTag"),
                    o =
                        "Arguments" ==
                        i(
                            (function () {
                                return arguments
                            })()
                        )
                e.exports = function (e) {
                    var t, n, s
                    return void 0 === e
                        ? "Undefined"
                        : null === e
                        ? "Null"
                        : "string" ==
                          typeof (n = (function (e, t) {
                              try {
                                  return e[t]
                              } catch (e) {}
                          })((t = Object(e)), r))
                        ? n
                        : o
                        ? i(t)
                        : "Object" == (s = i(t)) &&
                          "function" == typeof t.callee
                        ? "Arguments"
                        : s
                }
            },
            2032: e => {
                var t = {}.toString
                e.exports = function (e) {
                    return t.call(e).slice(8, -1)
                }
            },
            9824: (e, t, n) => {
                "use strict"
                var i = n(9275).f,
                    r = n(2503),
                    o = n(4408),
                    s = n(741),
                    a = n(3328),
                    l = n(3531),
                    u = n(2923),
                    h = n(5436),
                    c = n(2974),
                    d = n(7057),
                    f = n(4728).fastKey,
                    p = n(1616),
                    v = d ? "_s" : "size",
                    g = function (e, t) {
                        var n,
                            i = f(t)
                        if ("F" !== i) return e._i[i]
                        for (n = e._f; n; n = n.n) if (n.k == t) return n
                    }
                e.exports = {
                    getConstructor: function (e, t, n, u) {
                        var h = e(function (e, i) {
                            a(e, h, t, "_i"),
                                (e._t = t),
                                (e._i = r(null)),
                                (e._f = void 0),
                                (e._l = void 0),
                                (e[v] = 0),
                                null != i && l(i, n, e[u], e)
                        })
                        return (
                            o(h.prototype, {
                                clear: function () {
                                    for (
                                        var e = p(this, t), n = e._i, i = e._f;
                                        i;
                                        i = i.n
                                    )
                                        (i.r = !0),
                                            i.p && (i.p = i.p.n = void 0),
                                            delete n[i.i]
                                    ;(e._f = e._l = void 0), (e[v] = 0)
                                },
                                delete: function (e) {
                                    var n = p(this, t),
                                        i = g(n, e)
                                    if (i) {
                                        var r = i.n,
                                            o = i.p
                                        delete n._i[i.i],
                                            (i.r = !0),
                                            o && (o.n = r),
                                            r && (r.p = o),
                                            n._f == i && (n._f = r),
                                            n._l == i && (n._l = o),
                                            n[v]--
                                    }
                                    return !!i
                                },
                                forEach: function (e) {
                                    p(this, t)
                                    for (
                                        var n,
                                            i = s(
                                                e,
                                                arguments.length > 1
                                                    ? arguments[1]
                                                    : void 0,
                                                3
                                            );
                                        (n = n ? n.n : this._f);

                                    )
                                        for (i(n.v, n.k, this); n && n.r; )
                                            n = n.p
                                },
                                has: function (e) {
                                    return !!g(p(this, t), e)
                                },
                            }),
                            d &&
                                i(h.prototype, "size", {
                                    get: function () {
                                        return p(this, t)[v]
                                    },
                                }),
                            h
                        )
                    },
                    def: function (e, t, n) {
                        var i,
                            r,
                            o = g(e, t)
                        return (
                            o
                                ? (o.v = n)
                                : ((e._l = o =
                                      {
                                          i: (r = f(t, !0)),
                                          k: t,
                                          v: n,
                                          p: (i = e._l),
                                          n: void 0,
                                          r: !1,
                                      }),
                                  e._f || (e._f = o),
                                  i && (i.n = o),
                                  e[v]++,
                                  "F" !== r && (e._i[r] = o)),
                            e
                        )
                    },
                    getEntry: g,
                    setStrong: function (e, t, n) {
                        u(
                            e,
                            t,
                            function (e, n) {
                                ;(this._t = p(e, t)),
                                    (this._k = n),
                                    (this._l = void 0)
                            },
                            function () {
                                for (
                                    var e = this, t = e._k, n = e._l;
                                    n && n.r;

                                )
                                    n = n.p
                                return e._t && (e._l = n = n ? n.n : e._t._f)
                                    ? h(
                                          0,
                                          "keys" == t
                                              ? n.k
                                              : "values" == t
                                              ? n.v
                                              : [n.k, n.v]
                                      )
                                    : ((e._t = void 0), h(1))
                            },
                            n ? "entries" : "values",
                            !n,
                            !0
                        ),
                            c(t)
                    },
                }
            },
            3657: (e, t, n) => {
                "use strict"
                var i = n(4408),
                    r = n(4728).getWeak,
                    o = n(7007),
                    s = n(5286),
                    a = n(3328),
                    l = n(3531),
                    u = n(50),
                    h = n(9181),
                    c = n(1616),
                    d = u(5),
                    f = u(6),
                    p = 0,
                    v = function (e) {
                        return e._l || (e._l = new g())
                    },
                    g = function () {
                        this.a = []
                    },
                    y = function (e, t) {
                        return d(e.a, function (e) {
                            return e[0] === t
                        })
                    }
                ;(g.prototype = {
                    get: function (e) {
                        var t = y(this, e)
                        if (t) return t[1]
                    },
                    has: function (e) {
                        return !!y(this, e)
                    },
                    set: function (e, t) {
                        var n = y(this, e)
                        n ? (n[1] = t) : this.a.push([e, t])
                    },
                    delete: function (e) {
                        var t = f(this.a, function (t) {
                            return t[0] === e
                        })
                        return ~t && this.a.splice(t, 1), !!~t
                    },
                }),
                    (e.exports = {
                        getConstructor: function (e, t, n, o) {
                            var u = e(function (e, i) {
                                a(e, u, t, "_i"),
                                    (e._t = t),
                                    (e._i = p++),
                                    (e._l = void 0),
                                    null != i && l(i, n, e[o], e)
                            })
                            return (
                                i(u.prototype, {
                                    delete: function (e) {
                                        if (!s(e)) return !1
                                        var n = r(e)
                                        return !0 === n
                                            ? v(c(this, t)).delete(e)
                                            : n &&
                                                  h(n, this._i) &&
                                                  delete n[this._i]
                                    },
                                    has: function (e) {
                                        if (!s(e)) return !1
                                        var n = r(e)
                                        return !0 === n
                                            ? v(c(this, t)).has(e)
                                            : n && h(n, this._i)
                                    },
                                }),
                                u
                            )
                        },
                        def: function (e, t, n) {
                            var i = r(o(t), !0)
                            return !0 === i ? v(e).set(t, n) : (i[e._i] = n), e
                        },
                        ufstore: v,
                    })
            },
            5795: (e, t, n) => {
                "use strict"
                var i = n(3816),
                    r = n(2985),
                    o = n(7234),
                    s = n(4408),
                    a = n(4728),
                    l = n(3531),
                    u = n(3328),
                    h = n(5286),
                    c = n(4253),
                    d = n(7462),
                    f = n(2943),
                    p = n(266)
                e.exports = function (e, t, n, v, g, y) {
                    var _ = i[e],
                        m = _,
                        x = g ? "set" : "add",
                        w = m && m.prototype,
                        b = {},
                        E = function (e) {
                            var t = w[e]
                            o(
                                w,
                                e,
                                "delete" == e || "has" == e
                                    ? function (e) {
                                          return (
                                              !(y && !h(e)) &&
                                              t.call(this, 0 === e ? 0 : e)
                                          )
                                      }
                                    : "get" == e
                                    ? function (e) {
                                          return y && !h(e)
                                              ? void 0
                                              : t.call(this, 0 === e ? 0 : e)
                                      }
                                    : "add" == e
                                    ? function (e) {
                                          return (
                                              t.call(this, 0 === e ? 0 : e),
                                              this
                                          )
                                      }
                                    : function (e, n) {
                                          return (
                                              t.call(this, 0 === e ? 0 : e, n),
                                              this
                                          )
                                      }
                            )
                        }
                    if (
                        "function" == typeof m &&
                        (y ||
                            (w.forEach &&
                                !c(function () {
                                    new m().entries().next()
                                })))
                    ) {
                        var T = new m(),
                            k = T[x](y ? {} : -0, 1) != T,
                            S = c(function () {
                                T.has(1)
                            }),
                            A = d(function (e) {
                                new m(e)
                            }),
                            C =
                                !y &&
                                c(function () {
                                    for (var e = new m(), t = 5; t--; )
                                        e[x](t, t)
                                    return !e.has(-0)
                                })
                        A ||
                            (((m = t(function (t, n) {
                                u(t, m, e)
                                var i = p(new _(), t, m)
                                return null != n && l(n, g, i[x], i), i
                            })).prototype = w),
                            (w.constructor = m)),
                            (S || C) && (E("delete"), E("has"), g && E("get")),
                            (C || k) && E(x),
                            y && w.clear && delete w.clear
                    } else
                        (m = v.getConstructor(t, e, g, x)),
                            s(m.prototype, n),
                            (a.NEED = !0)
                    return (
                        f(m, e),
                        (b[e] = m),
                        r(r.G + r.W + r.F * (m != _), b),
                        y || v.setStrong(m, e, g),
                        m
                    )
                }
            },
            5645: e => {
                var t = (e.exports = { version: "2.6.12" })
                "number" == typeof __e && (__e = t)
            },
            2811: (e, t, n) => {
                "use strict"
                var i = n(9275),
                    r = n(681)
                e.exports = function (e, t, n) {
                    t in e ? i.f(e, t, r(0, n)) : (e[t] = n)
                }
            },
            741: (e, t, n) => {
                var i = n(4963)
                e.exports = function (e, t, n) {
                    if ((i(e), void 0 === t)) return e
                    switch (n) {
                        case 1:
                            return function (n) {
                                return e.call(t, n)
                            }
                        case 2:
                            return function (n, i) {
                                return e.call(t, n, i)
                            }
                        case 3:
                            return function (n, i, r) {
                                return e.call(t, n, i, r)
                            }
                    }
                    return function () {
                        return e.apply(t, arguments)
                    }
                }
            },
            3537: (e, t, n) => {
                "use strict"
                var i = n(4253),
                    r = Date.prototype.getTime,
                    o = Date.prototype.toISOString,
                    s = function (e) {
                        return e > 9 ? e : "0" + e
                    }
                e.exports =
                    i(function () {
                        return (
                            "0385-07-25T07:06:39.999Z" !=
                            o.call(new Date(-50000000000001))
                        )
                    }) ||
                    !i(function () {
                        o.call(new Date(NaN))
                    })
                        ? function () {
                              if (!isFinite(r.call(this)))
                                  throw RangeError("Invalid time value")
                              var e = this,
                                  t = e.getUTCFullYear(),
                                  n = e.getUTCMilliseconds(),
                                  i = t < 0 ? "-" : t > 9999 ? "+" : ""
                              return (
                                  i +
                                  ("00000" + Math.abs(t)).slice(i ? -6 : -4) +
                                  "-" +
                                  s(e.getUTCMonth() + 1) +
                                  "-" +
                                  s(e.getUTCDate()) +
                                  "T" +
                                  s(e.getUTCHours()) +
                                  ":" +
                                  s(e.getUTCMinutes()) +
                                  ":" +
                                  s(e.getUTCSeconds()) +
                                  "." +
                                  (n > 99 ? n : "0" + s(n)) +
                                  "Z"
                              )
                          }
                        : o
            },
            870: (e, t, n) => {
                "use strict"
                var i = n(7007),
                    r = n(1689),
                    o = "number"
                e.exports = function (e) {
                    if ("string" !== e && e !== o && "default" !== e)
                        throw TypeError("Incorrect hint")
                    return r(i(this), e != o)
                }
            },
            1355: e => {
                e.exports = function (e) {
                    if (null == e) throw TypeError("Can't call method on  " + e)
                    return e
                }
            },
            7057: (e, t, n) => {
                e.exports = !n(4253)(function () {
                    return (
                        7 !=
                        Object.defineProperty({}, "a", {
                            get: function () {
                                return 7
                            },
                        }).a
                    )
                })
            },
            2457: (e, t, n) => {
                var i = n(5286),
                    r = n(3816).document,
                    o = i(r) && i(r.createElement)
                e.exports = function (e) {
                    return o ? r.createElement(e) : {}
                }
            },
            4430: e => {
                e.exports =
                    "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(
                        ","
                    )
            },
            5541: (e, t, n) => {
                var i = n(7184),
                    r = n(4548),
                    o = n(4682)
                e.exports = function (e) {
                    var t = i(e),
                        n = r.f
                    if (n)
                        for (var s, a = n(e), l = o.f, u = 0; a.length > u; )
                            l.call(e, (s = a[u++])) && t.push(s)
                    return t
                }
            },
            2985: (e, t, n) => {
                var i = n(3816),
                    r = n(5645),
                    o = n(7728),
                    s = n(7234),
                    a = n(741),
                    l = function (e, t, n) {
                        var u,
                            h,
                            c,
                            d,
                            f = e & l.F,
                            p = e & l.G,
                            v = e & l.S,
                            g = e & l.P,
                            y = e & l.B,
                            _ = p
                                ? i
                                : v
                                ? i[t] || (i[t] = {})
                                : (i[t] || {}).prototype,
                            m = p ? r : r[t] || (r[t] = {}),
                            x = m.prototype || (m.prototype = {})
                        for (u in (p && (n = t), n))
                            (c = ((h = !f && _ && void 0 !== _[u]) ? _ : n)[u]),
                                (d =
                                    y && h
                                        ? a(c, i)
                                        : g && "function" == typeof c
                                        ? a(Function.call, c)
                                        : c),
                                _ && s(_, u, c, e & l.U),
                                m[u] != c && o(m, u, d),
                                g && x[u] != c && (x[u] = c)
                    }
                ;(i.core = r),
                    (l.F = 1),
                    (l.G = 2),
                    (l.S = 4),
                    (l.P = 8),
                    (l.B = 16),
                    (l.W = 32),
                    (l.U = 64),
                    (l.R = 128),
                    (e.exports = l)
            },
            8852: (e, t, n) => {
                var i = n(6314)("match")
                e.exports = function (e) {
                    var t = /./
                    try {
                        "/./"[e](t)
                    } catch (n) {
                        try {
                            return (t[i] = !1), !"/./"[e](t)
                        } catch (e) {}
                    }
                    return !0
                }
            },
            4253: e => {
                e.exports = function (e) {
                    try {
                        return !!e()
                    } catch (e) {
                        return !0
                    }
                }
            },
            8082: (e, t, n) => {
                "use strict"
                n(8269)
                var i = n(7234),
                    r = n(7728),
                    o = n(4253),
                    s = n(1355),
                    a = n(6314),
                    l = n(1165),
                    u = a("species"),
                    h = !o(function () {
                        var e = /./
                        return (
                            (e.exec = function () {
                                var e = []
                                return (e.groups = { a: "7" }), e
                            }),
                            "7" !== "".replace(e, "$<a>")
                        )
                    }),
                    c = (function () {
                        var e = /(?:)/,
                            t = e.exec
                        e.exec = function () {
                            return t.apply(this, arguments)
                        }
                        var n = "ab".split(e)
                        return 2 === n.length && "a" === n[0] && "b" === n[1]
                    })()
                e.exports = function (e, t, n) {
                    var d = a(e),
                        f = !o(function () {
                            var t = {}
                            return (
                                (t[d] = function () {
                                    return 7
                                }),
                                7 != ""[e](t)
                            )
                        }),
                        p = f
                            ? !o(function () {
                                  var t = !1,
                                      n = /a/
                                  return (
                                      (n.exec = function () {
                                          return (t = !0), null
                                      }),
                                      "split" === e &&
                                          ((n.constructor = {}),
                                          (n.constructor[u] = function () {
                                              return n
                                          })),
                                      n[d](""),
                                      !t
                                  )
                              })
                            : void 0
                    if (
                        !f ||
                        !p ||
                        ("replace" === e && !h) ||
                        ("split" === e && !c)
                    ) {
                        var v = /./[d],
                            g = n(s, d, ""[e], function (e, t, n, i, r) {
                                return t.exec === l
                                    ? f && !r
                                        ? { done: !0, value: v.call(t, n, i) }
                                        : { done: !0, value: e.call(n, t, i) }
                                    : { done: !1 }
                            }),
                            y = g[0],
                            _ = g[1]
                        i(String.prototype, e, y),
                            r(
                                RegExp.prototype,
                                d,
                                2 == t
                                    ? function (e, t) {
                                          return _.call(e, this, t)
                                      }
                                    : function (e) {
                                          return _.call(e, this)
                                      }
                            )
                    }
                }
            },
            3218: (e, t, n) => {
                "use strict"
                var i = n(7007)
                e.exports = function () {
                    var e = i(this),
                        t = ""
                    return (
                        e.global && (t += "g"),
                        e.ignoreCase && (t += "i"),
                        e.multiline && (t += "m"),
                        e.unicode && (t += "u"),
                        e.sticky && (t += "y"),
                        t
                    )
                }
            },
            3325: (e, t, n) => {
                "use strict"
                var i = n(4302),
                    r = n(5286),
                    o = n(875),
                    s = n(741),
                    a = n(6314)("isConcatSpreadable")
                e.exports = function e(t, n, l, u, h, c, d, f) {
                    for (
                        var p, v, g = h, y = 0, _ = !!d && s(d, f, 3);
                        y < u;

                    ) {
                        if (y in l) {
                            if (
                                ((p = _ ? _(l[y], y, n) : l[y]),
                                (v = !1),
                                r(p) &&
                                    (v = void 0 !== (v = p[a]) ? !!v : i(p)),
                                v && c > 0)
                            )
                                g = e(t, n, p, o(p.length), g, c - 1) - 1
                            else {
                                if (g >= 9007199254740991) throw TypeError()
                                t[g] = p
                            }
                            g++
                        }
                        y++
                    }
                    return g
                }
            },
            3531: (e, t, n) => {
                var i = n(741),
                    r = n(8851),
                    o = n(6555),
                    s = n(7007),
                    a = n(875),
                    l = n(9002),
                    u = {},
                    h = {},
                    c = (e.exports = function (e, t, n, c, d) {
                        var f,
                            p,
                            v,
                            g,
                            y = d
                                ? function () {
                                      return e
                                  }
                                : l(e),
                            _ = i(n, c, t ? 2 : 1),
                            m = 0
                        if ("function" != typeof y)
                            throw TypeError(e + " is not iterable!")
                        if (o(y)) {
                            for (f = a(e.length); f > m; m++)
                                if (
                                    (g = t
                                        ? _(s((p = e[m]))[0], p[1])
                                        : _(e[m])) === u ||
                                    g === h
                                )
                                    return g
                        } else
                            for (v = y.call(e); !(p = v.next()).done; )
                                if ((g = r(v, _, p.value, t)) === u || g === h)
                                    return g
                    })
                ;(c.BREAK = u), (c.RETURN = h)
            },
            18: (e, t, n) => {
                e.exports = n(3825)(
                    "native-function-to-string",
                    Function.toString
                )
            },
            3816: e => {
                var t = (e.exports =
                    "undefined" != typeof window && window.Math == Math
                        ? window
                        : "undefined" != typeof self && self.Math == Math
                        ? self
                        : Function("return this")())
                "number" == typeof __g && (__g = t)
            },
            9181: e => {
                var t = {}.hasOwnProperty
                e.exports = function (e, n) {
                    return t.call(e, n)
                }
            },
            7728: (e, t, n) => {
                var i = n(9275),
                    r = n(681)
                e.exports = n(7057)
                    ? function (e, t, n) {
                          return i.f(e, t, r(1, n))
                      }
                    : function (e, t, n) {
                          return (e[t] = n), e
                      }
            },
            639: (e, t, n) => {
                var i = n(3816).document
                e.exports = i && i.documentElement
            },
            1734: (e, t, n) => {
                e.exports =
                    !n(7057) &&
                    !n(4253)(function () {
                        return (
                            7 !=
                            Object.defineProperty(n(2457)("div"), "a", {
                                get: function () {
                                    return 7
                                },
                            }).a
                        )
                    })
            },
            266: (e, t, n) => {
                var i = n(5286),
                    r = n(7375).set
                e.exports = function (e, t, n) {
                    var o,
                        s = t.constructor
                    return (
                        s !== n &&
                            "function" == typeof s &&
                            (o = s.prototype) !== n.prototype &&
                            i(o) &&
                            r &&
                            r(e, o),
                        e
                    )
                }
            },
            7242: e => {
                e.exports = function (e, t, n) {
                    var i = void 0 === n
                    switch (t.length) {
                        case 0:
                            return i ? e() : e.call(n)
                        case 1:
                            return i ? e(t[0]) : e.call(n, t[0])
                        case 2:
                            return i ? e(t[0], t[1]) : e.call(n, t[0], t[1])
                        case 3:
                            return i
                                ? e(t[0], t[1], t[2])
                                : e.call(n, t[0], t[1], t[2])
                        case 4:
                            return i
                                ? e(t[0], t[1], t[2], t[3])
                                : e.call(n, t[0], t[1], t[2], t[3])
                    }
                    return e.apply(n, t)
                }
            },
            9797: (e, t, n) => {
                var i = n(2032)
                e.exports = Object("z").propertyIsEnumerable(0)
                    ? Object
                    : function (e) {
                          return "String" == i(e) ? e.split("") : Object(e)
                      }
            },
            6555: (e, t, n) => {
                var i = n(2803),
                    r = n(6314)("iterator"),
                    o = Array.prototype
                e.exports = function (e) {
                    return void 0 !== e && (i.Array === e || o[r] === e)
                }
            },
            4302: (e, t, n) => {
                var i = n(2032)
                e.exports =
                    Array.isArray ||
                    function (e) {
                        return "Array" == i(e)
                    }
            },
            8367: (e, t, n) => {
                var i = n(5286),
                    r = Math.floor
                e.exports = function (e) {
                    return !i(e) && isFinite(e) && r(e) === e
                }
            },
            5286: e => {
                e.exports = function (e) {
                    return "object" == typeof e
                        ? null !== e
                        : "function" == typeof e
                }
            },
            5364: (e, t, n) => {
                var i = n(5286),
                    r = n(2032),
                    o = n(6314)("match")
                e.exports = function (e) {
                    var t
                    return (
                        i(e) && (void 0 !== (t = e[o]) ? !!t : "RegExp" == r(e))
                    )
                }
            },
            8851: (e, t, n) => {
                var i = n(7007)
                e.exports = function (e, t, n, r) {
                    try {
                        return r ? t(i(n)[0], n[1]) : t(n)
                    } catch (t) {
                        var o = e.return
                        throw (void 0 !== o && i(o.call(e)), t)
                    }
                }
            },
            9988: (e, t, n) => {
                "use strict"
                var i = n(2503),
                    r = n(681),
                    o = n(2943),
                    s = {}
                n(7728)(s, n(6314)("iterator"), function () {
                    return this
                }),
                    (e.exports = function (e, t, n) {
                        ;(e.prototype = i(s, { next: r(1, n) })),
                            o(e, t + " Iterator")
                    })
            },
            2923: (e, t, n) => {
                "use strict"
                var i = n(4461),
                    r = n(2985),
                    o = n(7234),
                    s = n(7728),
                    a = n(2803),
                    l = n(9988),
                    u = n(2943),
                    h = n(468),
                    c = n(6314)("iterator"),
                    d = !([].keys && "next" in [].keys()),
                    f = "keys",
                    p = "values",
                    v = function () {
                        return this
                    }
                e.exports = function (e, t, n, g, y, _, m) {
                    l(n, t, g)
                    var x,
                        w,
                        b,
                        E = function (e) {
                            if (!d && e in A) return A[e]
                            switch (e) {
                                case f:
                                case p:
                                    return function () {
                                        return new n(this, e)
                                    }
                            }
                            return function () {
                                return new n(this, e)
                            }
                        },
                        T = t + " Iterator",
                        k = y == p,
                        S = !1,
                        A = e.prototype,
                        C = A[c] || A["@@iterator"] || (y && A[y]),
                        O = C || E(y),
                        P = y ? (k ? E("entries") : O) : void 0,
                        R = ("Array" == t && A.entries) || C
                    if (
                        (R &&
                            (b = h(R.call(new e()))) !== Object.prototype &&
                            b.next &&
                            (u(b, T, !0),
                            i || "function" == typeof b[c] || s(b, c, v)),
                        k &&
                            C &&
                            C.name !== p &&
                            ((S = !0),
                            (O = function () {
                                return C.call(this)
                            })),
                        (i && !m) || (!d && !S && A[c]) || s(A, c, O),
                        (a[t] = O),
                        (a[T] = v),
                        y)
                    )
                        if (
                            ((x = {
                                values: k ? O : E(p),
                                keys: _ ? O : E(f),
                                entries: P,
                            }),
                            m)
                        )
                            for (w in x) w in A || o(A, w, x[w])
                        else r(r.P + r.F * (d || S), t, x)
                    return x
                }
            },
            7462: (e, t, n) => {
                var i = n(6314)("iterator"),
                    r = !1
                try {
                    var o = [7][i]()
                    ;(o.return = function () {
                        r = !0
                    }),
                        Array.from(o, function () {
                            throw 2
                        })
                } catch (e) {}
                e.exports = function (e, t) {
                    if (!t && !r) return !1
                    var n = !1
                    try {
                        var o = [7],
                            s = o[i]()
                        ;(s.next = function () {
                            return { done: (n = !0) }
                        }),
                            (o[i] = function () {
                                return s
                            }),
                            e(o)
                    } catch (e) {}
                    return n
                }
            },
            5436: e => {
                e.exports = function (e, t) {
                    return { value: t, done: !!e }
                }
            },
            2803: e => {
                e.exports = {}
            },
            4461: e => {
                e.exports = !1
            },
            3086: e => {
                var t = Math.expm1
                e.exports =
                    !t ||
                    t(10) > 22025.465794806718 ||
                    t(10) < 22025.465794806718 ||
                    -2e-17 != t(-2e-17)
                        ? function (e) {
                              return 0 == (e = +e)
                                  ? e
                                  : e > -1e-6 && e < 1e-6
                                  ? e + (e * e) / 2
                                  : Math.exp(e) - 1
                          }
                        : t
            },
            4934: (e, t, n) => {
                var i = n(1801),
                    r = Math.pow,
                    o = r(2, -52),
                    s = r(2, -23),
                    a = r(2, 127) * (2 - s),
                    l = r(2, -126)
                e.exports =
                    Math.fround ||
                    function (e) {
                        var t,
                            n,
                            r = Math.abs(e),
                            u = i(e)
                        return r < l
                            ? u * (r / l / s + 1 / o - 1 / o) * l * s
                            : (n = (t = (1 + s / o) * r) - (t - r)) > a ||
                              n != n
                            ? u * (1 / 0)
                            : u * n
                    }
            },
            6206: e => {
                e.exports =
                    Math.log1p ||
                    function (e) {
                        return (e = +e) > -1e-8 && e < 1e-8
                            ? e - (e * e) / 2
                            : Math.log(1 + e)
                    }
            },
            1801: e => {
                e.exports =
                    Math.sign ||
                    function (e) {
                        return 0 == (e = +e) || e != e ? e : e < 0 ? -1 : 1
                    }
            },
            4728: (e, t, n) => {
                var i = n(3953)("meta"),
                    r = n(5286),
                    o = n(9181),
                    s = n(9275).f,
                    a = 0,
                    l =
                        Object.isExtensible ||
                        function () {
                            return !0
                        },
                    u = !n(4253)(function () {
                        return l(Object.preventExtensions({}))
                    }),
                    h = function (e) {
                        s(e, i, { value: { i: "O" + ++a, w: {} } })
                    },
                    c = (e.exports = {
                        KEY: i,
                        NEED: !1,
                        fastKey: function (e, t) {
                            if (!r(e))
                                return "symbol" == typeof e
                                    ? e
                                    : ("string" == typeof e ? "S" : "P") + e
                            if (!o(e, i)) {
                                if (!l(e)) return "F"
                                if (!t) return "E"
                                h(e)
                            }
                            return e[i].i
                        },
                        getWeak: function (e, t) {
                            if (!o(e, i)) {
                                if (!l(e)) return !0
                                if (!t) return !1
                                h(e)
                            }
                            return e[i].w
                        },
                        onFreeze: function (e) {
                            return u && c.NEED && l(e) && !o(e, i) && h(e), e
                        },
                    })
            },
            4351: (e, t, n) => {
                var i = n(3816),
                    r = n(4193).set,
                    o = i.MutationObserver || i.WebKitMutationObserver,
                    s = i.process,
                    a = i.Promise,
                    l = "process" == n(2032)(s)
                e.exports = function () {
                    var e,
                        t,
                        n,
                        u = function () {
                            var i, r
                            for (l && (i = s.domain) && i.exit(); e; ) {
                                ;(r = e.fn), (e = e.next)
                                try {
                                    r()
                                } catch (i) {
                                    throw (e ? n() : (t = void 0), i)
                                }
                            }
                            ;(t = void 0), i && i.enter()
                        }
                    if (l)
                        n = function () {
                            s.nextTick(u)
                        }
                    else if (!o || (i.navigator && i.navigator.standalone))
                        if (a && a.resolve) {
                            var h = a.resolve(void 0)
                            n = function () {
                                h.then(u)
                            }
                        } else
                            n = function () {
                                r.call(i, u)
                            }
                    else {
                        var c = !0,
                            d = document.createTextNode("")
                        new o(u).observe(d, { characterData: !0 }),
                            (n = function () {
                                d.data = c = !c
                            })
                    }
                    return function (i) {
                        var r = { fn: i, next: void 0 }
                        t && (t.next = r), e || ((e = r), n()), (t = r)
                    }
                }
            },
            3499: (e, t, n) => {
                "use strict"
                var i = n(4963)
                function r(e) {
                    var t, n
                    ;(this.promise = new e(function (e, i) {
                        if (void 0 !== t || void 0 !== n)
                            throw TypeError("Bad Promise constructor")
                        ;(t = e), (n = i)
                    })),
                        (this.resolve = i(t)),
                        (this.reject = i(n))
                }
                e.exports.f = function (e) {
                    return new r(e)
                }
            },
            5345: (e, t, n) => {
                "use strict"
                var i = n(7057),
                    r = n(7184),
                    o = n(4548),
                    s = n(4682),
                    a = n(508),
                    l = n(9797),
                    u = Object.assign
                e.exports =
                    !u ||
                    n(4253)(function () {
                        var e = {},
                            t = {},
                            n = Symbol(),
                            i = "abcdefghijklmnopqrst"
                        return (
                            (e[n] = 7),
                            i.split("").forEach(function (e) {
                                t[e] = e
                            }),
                            7 != u({}, e)[n] ||
                                Object.keys(u({}, t)).join("") != i
                        )
                    })
                        ? function (e, t) {
                              for (
                                  var n = a(e),
                                      u = arguments.length,
                                      h = 1,
                                      c = o.f,
                                      d = s.f;
                                  u > h;

                              )
                                  for (
                                      var f,
                                          p = l(arguments[h++]),
                                          v = c ? r(p).concat(c(p)) : r(p),
                                          g = v.length,
                                          y = 0;
                                      g > y;

                                  )
                                      (f = v[y++]),
                                          (i && !d.call(p, f)) || (n[f] = p[f])
                              return n
                          }
                        : u
            },
            2503: (e, t, n) => {
                var i = n(7007),
                    r = n(5588),
                    o = n(4430),
                    s = n(9335)("IE_PROTO"),
                    a = function () {},
                    l = function () {
                        var e,
                            t = n(2457)("iframe"),
                            i = o.length
                        for (
                            t.style.display = "none",
                                n(639).appendChild(t),
                                t.src = "javascript:",
                                (e = t.contentWindow.document).open(),
                                e.write("<script>document.F=Object</script>"),
                                e.close(),
                                l = e.F;
                            i--;

                        )
                            delete l.prototype[o[i]]
                        return l()
                    }
                e.exports =
                    Object.create ||
                    function (e, t) {
                        var n
                        return (
                            null !== e
                                ? ((a.prototype = i(e)),
                                  (n = new a()),
                                  (a.prototype = null),
                                  (n[s] = e))
                                : (n = l()),
                            void 0 === t ? n : r(n, t)
                        )
                    }
            },
            9275: (e, t, n) => {
                var i = n(7007),
                    r = n(1734),
                    o = n(1689),
                    s = Object.defineProperty
                t.f = n(7057)
                    ? Object.defineProperty
                    : function (e, t, n) {
                          if ((i(e), (t = o(t, !0)), i(n), r))
                              try {
                                  return s(e, t, n)
                              } catch (e) {}
                          if ("get" in n || "set" in n)
                              throw TypeError("Accessors not supported!")
                          return "value" in n && (e[t] = n.value), e
                      }
            },
            5588: (e, t, n) => {
                var i = n(9275),
                    r = n(7007),
                    o = n(7184)
                e.exports = n(7057)
                    ? Object.defineProperties
                    : function (e, t) {
                          r(e)
                          for (var n, s = o(t), a = s.length, l = 0; a > l; )
                              i.f(e, (n = s[l++]), t[n])
                          return e
                      }
            },
            8693: (e, t, n) => {
                var i = n(4682),
                    r = n(681),
                    o = n(2110),
                    s = n(1689),
                    a = n(9181),
                    l = n(1734),
                    u = Object.getOwnPropertyDescriptor
                t.f = n(7057)
                    ? u
                    : function (e, t) {
                          if (((e = o(e)), (t = s(t, !0)), l))
                              try {
                                  return u(e, t)
                              } catch (e) {}
                          if (a(e, t)) return r(!i.f.call(e, t), e[t])
                      }
            },
            9327: (e, t, n) => {
                var i = n(2110),
                    r = n(616).f,
                    o = {}.toString,
                    s =
                        "object" == typeof window &&
                        window &&
                        Object.getOwnPropertyNames
                            ? Object.getOwnPropertyNames(window)
                            : []
                e.exports.f = function (e) {
                    return s && "[object Window]" == o.call(e)
                        ? (function (e) {
                              try {
                                  return r(e)
                              } catch (e) {
                                  return s.slice()
                              }
                          })(e)
                        : r(i(e))
                }
            },
            616: (e, t, n) => {
                var i = n(189),
                    r = n(4430).concat("length", "prototype")
                t.f =
                    Object.getOwnPropertyNames ||
                    function (e) {
                        return i(e, r)
                    }
            },
            4548: (e, t) => {
                t.f = Object.getOwnPropertySymbols
            },
            468: (e, t, n) => {
                var i = n(9181),
                    r = n(508),
                    o = n(9335)("IE_PROTO"),
                    s = Object.prototype
                e.exports =
                    Object.getPrototypeOf ||
                    function (e) {
                        return (
                            (e = r(e)),
                            i(e, o)
                                ? e[o]
                                : "function" == typeof e.constructor &&
                                  e instanceof e.constructor
                                ? e.constructor.prototype
                                : e instanceof Object
                                ? s
                                : null
                        )
                    }
            },
            189: (e, t, n) => {
                var i = n(9181),
                    r = n(2110),
                    o = n(9315)(!1),
                    s = n(9335)("IE_PROTO")
                e.exports = function (e, t) {
                    var n,
                        a = r(e),
                        l = 0,
                        u = []
                    for (n in a) n != s && i(a, n) && u.push(n)
                    for (; t.length > l; )
                        i(a, (n = t[l++])) && (~o(u, n) || u.push(n))
                    return u
                }
            },
            7184: (e, t, n) => {
                var i = n(189),
                    r = n(4430)
                e.exports =
                    Object.keys ||
                    function (e) {
                        return i(e, r)
                    }
            },
            4682: (e, t) => {
                t.f = {}.propertyIsEnumerable
            },
            3160: (e, t, n) => {
                var i = n(2985),
                    r = n(5645),
                    o = n(4253)
                e.exports = function (e, t) {
                    var n = (r.Object || {})[e] || Object[e],
                        s = {}
                    ;(s[e] = t(n)),
                        i(
                            i.S +
                                i.F *
                                    o(function () {
                                        n(1)
                                    }),
                            "Object",
                            s
                        )
                }
            },
            1131: (e, t, n) => {
                var i = n(7057),
                    r = n(7184),
                    o = n(2110),
                    s = n(4682).f
                e.exports = function (e) {
                    return function (t) {
                        for (
                            var n,
                                a = o(t),
                                l = r(a),
                                u = l.length,
                                h = 0,
                                c = [];
                            u > h;

                        )
                            (n = l[h++]),
                                (i && !s.call(a, n)) ||
                                    c.push(e ? [n, a[n]] : a[n])
                        return c
                    }
                }
            },
            7643: (e, t, n) => {
                var i = n(616),
                    r = n(4548),
                    o = n(7007),
                    s = n(3816).Reflect
                e.exports =
                    (s && s.ownKeys) ||
                    function (e) {
                        var t = i.f(o(e)),
                            n = r.f
                        return n ? t.concat(n(e)) : t
                    }
            },
            7743: (e, t, n) => {
                var i = n(3816).parseFloat,
                    r = n(9599).trim
                e.exports =
                    1 / i(n(4644) + "-0") != -1 / 0
                        ? function (e) {
                              var t = r(String(e), 3),
                                  n = i(t)
                              return 0 === n && "-" == t.charAt(0) ? -0 : n
                          }
                        : i
            },
            5960: (e, t, n) => {
                var i = n(3816).parseInt,
                    r = n(9599).trim,
                    o = n(4644),
                    s = /^[-+]?0[xX]/
                e.exports =
                    8 !== i(o + "08") || 22 !== i(o + "0x16")
                        ? function (e, t) {
                              var n = r(String(e), 3)
                              return i(n, t >>> 0 || (s.test(n) ? 16 : 10))
                          }
                        : i
            },
            188: e => {
                e.exports = function (e) {
                    try {
                        return { e: !1, v: e() }
                    } catch (e) {
                        return { e: !0, v: e }
                    }
                }
            },
            94: (e, t, n) => {
                var i = n(7007),
                    r = n(5286),
                    o = n(3499)
                e.exports = function (e, t) {
                    if ((i(e), r(t) && t.constructor === e)) return t
                    var n = o.f(e)
                    return (0, n.resolve)(t), n.promise
                }
            },
            681: e => {
                e.exports = function (e, t) {
                    return {
                        enumerable: !(1 & e),
                        configurable: !(2 & e),
                        writable: !(4 & e),
                        value: t,
                    }
                }
            },
            4408: (e, t, n) => {
                var i = n(7234)
                e.exports = function (e, t, n) {
                    for (var r in t) i(e, r, t[r], n)
                    return e
                }
            },
            7234: (e, t, n) => {
                var i = n(3816),
                    r = n(7728),
                    o = n(9181),
                    s = n(3953)("src"),
                    a = n(18),
                    l = "toString",
                    u = ("" + a).split(l)
                ;(n(5645).inspectSource = function (e) {
                    return a.call(e)
                }),
                    (e.exports = function (e, t, n, a) {
                        var l = "function" == typeof n
                        l && (o(n, "name") || r(n, "name", t)),
                            e[t] !== n &&
                                (l &&
                                    (o(n, s) ||
                                        r(
                                            n,
                                            s,
                                            e[t] ? "" + e[t] : u.join(String(t))
                                        )),
                                e === i
                                    ? (e[t] = n)
                                    : a
                                    ? e[t]
                                        ? (e[t] = n)
                                        : r(e, t, n)
                                    : (delete e[t], r(e, t, n)))
                    })(Function.prototype, l, function () {
                        return (
                            ("function" == typeof this && this[s]) ||
                            a.call(this)
                        )
                    })
            },
            7787: (e, t, n) => {
                "use strict"
                var i = n(1488),
                    r = RegExp.prototype.exec
                e.exports = function (e, t) {
                    var n = e.exec
                    if ("function" == typeof n) {
                        var o = n.call(e, t)
                        if ("object" != typeof o)
                            throw new TypeError(
                                "RegExp exec method returned something other than an Object or null"
                            )
                        return o
                    }
                    if ("RegExp" !== i(e))
                        throw new TypeError(
                            "RegExp#exec called on incompatible receiver"
                        )
                    return r.call(e, t)
                }
            },
            1165: (e, t, n) => {
                "use strict"
                var i,
                    r,
                    o = n(3218),
                    s = RegExp.prototype.exec,
                    a = String.prototype.replace,
                    l = s,
                    u =
                        ((i = /a/),
                        (r = /b*/g),
                        s.call(i, "a"),
                        s.call(r, "a"),
                        0 !== i.lastIndex || 0 !== r.lastIndex),
                    h = void 0 !== /()??/.exec("")[1]
                ;(u || h) &&
                    (l = function (e) {
                        var t,
                            n,
                            i,
                            r,
                            l = this
                        return (
                            h &&
                                (n = new RegExp(
                                    "^" + l.source + "$(?!\\s)",
                                    o.call(l)
                                )),
                            u && (t = l.lastIndex),
                            (i = s.call(l, e)),
                            u &&
                                i &&
                                (l.lastIndex = l.global
                                    ? i.index + i[0].length
                                    : t),
                            h &&
                                i &&
                                i.length > 1 &&
                                a.call(i[0], n, function () {
                                    for (r = 1; r < arguments.length - 2; r++)
                                        void 0 === arguments[r] &&
                                            (i[r] = void 0)
                                }),
                            i
                        )
                    }),
                    (e.exports = l)
            },
            7195: e => {
                e.exports =
                    Object.is ||
                    function (e, t) {
                        return e === t
                            ? 0 !== e || 1 / e == 1 / t
                            : e != e && t != t
                    }
            },
            7375: (e, t, n) => {
                var i = n(5286),
                    r = n(7007),
                    o = function (e, t) {
                        if ((r(e), !i(t) && null !== t))
                            throw TypeError(t + ": can't set as prototype!")
                    }
                e.exports = {
                    set:
                        Object.setPrototypeOf ||
                        ("__proto__" in {}
                            ? (function (e, t, i) {
                                  try {
                                      ;(i = n(741)(
                                          Function.call,
                                          n(8693).f(
                                              Object.prototype,
                                              "__proto__"
                                          ).set,
                                          2
                                      ))(e, []),
                                          (t = !(e instanceof Array))
                                  } catch (e) {
                                      t = !0
                                  }
                                  return function (e, n) {
                                      return (
                                          o(e, n),
                                          t ? (e.__proto__ = n) : i(e, n),
                                          e
                                      )
                                  }
                              })({}, !1)
                            : void 0),
                    check: o,
                }
            },
            2974: (e, t, n) => {
                "use strict"
                var i = n(3816),
                    r = n(9275),
                    o = n(7057),
                    s = n(6314)("species")
                e.exports = function (e) {
                    var t = i[e]
                    o &&
                        t &&
                        !t[s] &&
                        r.f(t, s, {
                            configurable: !0,
                            get: function () {
                                return this
                            },
                        })
                }
            },
            2943: (e, t, n) => {
                var i = n(9275).f,
                    r = n(9181),
                    o = n(6314)("toStringTag")
                e.exports = function (e, t, n) {
                    e &&
                        !r((e = n ? e : e.prototype), o) &&
                        i(e, o, { configurable: !0, value: t })
                }
            },
            9335: (e, t, n) => {
                var i = n(3825)("keys"),
                    r = n(3953)
                e.exports = function (e) {
                    return i[e] || (i[e] = r(e))
                }
            },
            3825: (e, t, n) => {
                var i = n(5645),
                    r = n(3816),
                    o = "__core-js_shared__",
                    s = r[o] || (r[o] = {})
                ;(e.exports = function (e, t) {
                    return s[e] || (s[e] = void 0 !== t ? t : {})
                })("versions", []).push({
                    version: i.version,
                    mode: n(4461) ? "pure" : "global",
                    copyright: "© 2020 Denis Pushkarev (zloirock.ru)",
                })
            },
            8364: (e, t, n) => {
                var i = n(7007),
                    r = n(4963),
                    o = n(6314)("species")
                e.exports = function (e, t) {
                    var n,
                        s = i(e).constructor
                    return void 0 === s || null == (n = i(s)[o]) ? t : r(n)
                }
            },
            7717: (e, t, n) => {
                "use strict"
                var i = n(4253)
                e.exports = function (e, t) {
                    return (
                        !!e &&
                        i(function () {
                            t ? e.call(null, function () {}, 1) : e.call(null)
                        })
                    )
                }
            },
            4496: (e, t, n) => {
                var i = n(1467),
                    r = n(1355)
                e.exports = function (e) {
                    return function (t, n) {
                        var o,
                            s,
                            a = String(r(t)),
                            l = i(n),
                            u = a.length
                        return l < 0 || l >= u
                            ? e
                                ? ""
                                : void 0
                            : (o = a.charCodeAt(l)) < 55296 ||
                              o > 56319 ||
                              l + 1 === u ||
                              (s = a.charCodeAt(l + 1)) < 56320 ||
                              s > 57343
                            ? e
                                ? a.charAt(l)
                                : o
                            : e
                            ? a.slice(l, l + 2)
                            : s - 56320 + ((o - 55296) << 10) + 65536
                    }
                }
            },
            2094: (e, t, n) => {
                var i = n(5364),
                    r = n(1355)
                e.exports = function (e, t, n) {
                    if (i(t))
                        throw TypeError(
                            "String#" + n + " doesn't accept regex!"
                        )
                    return String(r(e))
                }
            },
            9395: (e, t, n) => {
                var i = n(2985),
                    r = n(4253),
                    o = n(1355),
                    s = /"/g,
                    a = function (e, t, n, i) {
                        var r = String(o(e)),
                            a = "<" + t
                        return (
                            "" !== n &&
                                (a +=
                                    " " +
                                    n +
                                    '="' +
                                    String(i).replace(s, "&quot;") +
                                    '"'),
                            a + ">" + r + "</" + t + ">"
                        )
                    }
                e.exports = function (e, t) {
                    var n = {}
                    ;(n[e] = t(a)),
                        i(
                            i.P +
                                i.F *
                                    r(function () {
                                        var t = ""[e]('"')
                                        return (
                                            t !== t.toLowerCase() ||
                                            t.split('"').length > 3
                                        )
                                    }),
                            "String",
                            n
                        )
                }
            },
            5442: (e, t, n) => {
                var i = n(875),
                    r = n(8595),
                    o = n(1355)
                e.exports = function (e, t, n, s) {
                    var a = String(o(e)),
                        l = a.length,
                        u = void 0 === n ? " " : String(n),
                        h = i(t)
                    if (h <= l || "" == u) return a
                    var c = h - l,
                        d = r.call(u, Math.ceil(c / u.length))
                    return (
                        d.length > c && (d = d.slice(0, c)), s ? d + a : a + d
                    )
                }
            },
            8595: (e, t, n) => {
                "use strict"
                var i = n(1467),
                    r = n(1355)
                e.exports = function (e) {
                    var t = String(r(this)),
                        n = "",
                        o = i(e)
                    if (o < 0 || o == 1 / 0)
                        throw RangeError("Count can't be negative")
                    for (; o > 0; (o >>>= 1) && (t += t)) 1 & o && (n += t)
                    return n
                }
            },
            9599: (e, t, n) => {
                var i = n(2985),
                    r = n(1355),
                    o = n(4253),
                    s = n(4644),
                    a = "[" + s + "]",
                    l = RegExp("^" + a + a + "*"),
                    u = RegExp(a + a + "*$"),
                    h = function (e, t, n) {
                        var r = {},
                            a = o(function () {
                                return !!s[e]() || "​" != "​"[e]()
                            }),
                            l = (r[e] = a ? t(c) : s[e])
                        n && (r[n] = l), i(i.P + i.F * a, "String", r)
                    },
                    c = (h.trim = function (e, t) {
                        return (
                            (e = String(r(e))),
                            1 & t && (e = e.replace(l, "")),
                            2 & t && (e = e.replace(u, "")),
                            e
                        )
                    })
                e.exports = h
            },
            4644: e => {
                e.exports = "\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"
            },
            4193: (e, t, n) => {
                var i,
                    r,
                    o,
                    s = n(741),
                    a = n(7242),
                    l = n(639),
                    u = n(2457),
                    h = n(3816),
                    c = h.process,
                    d = h.setImmediate,
                    f = h.clearImmediate,
                    p = h.MessageChannel,
                    v = h.Dispatch,
                    g = 0,
                    y = {},
                    _ = function () {
                        var e = +this
                        if (y.hasOwnProperty(e)) {
                            var t = y[e]
                            delete y[e], t()
                        }
                    },
                    m = function (e) {
                        _.call(e.data)
                    }
                ;(d && f) ||
                    ((d = function (e) {
                        for (var t = [], n = 1; arguments.length > n; )
                            t.push(arguments[n++])
                        return (
                            (y[++g] = function () {
                                a("function" == typeof e ? e : Function(e), t)
                            }),
                            i(g),
                            g
                        )
                    }),
                    (f = function (e) {
                        delete y[e]
                    }),
                    "process" == n(2032)(c)
                        ? (i = function (e) {
                              c.nextTick(s(_, e, 1))
                          })
                        : v && v.now
                        ? (i = function (e) {
                              v.now(s(_, e, 1))
                          })
                        : p
                        ? ((o = (r = new p()).port2),
                          (r.port1.onmessage = m),
                          (i = s(o.postMessage, o, 1)))
                        : h.addEventListener &&
                          "function" == typeof postMessage &&
                          !h.importScripts
                        ? ((i = function (e) {
                              h.postMessage(e + "", "*")
                          }),
                          h.addEventListener("message", m, !1))
                        : (i =
                              "onreadystatechange" in u("script")
                                  ? function (e) {
                                        l.appendChild(
                                            u("script")
                                        ).onreadystatechange = function () {
                                            l.removeChild(this), _.call(e)
                                        }
                                    }
                                  : function (e) {
                                        setTimeout(s(_, e, 1), 0)
                                    })),
                    (e.exports = { set: d, clear: f })
            },
            2337: (e, t, n) => {
                var i = n(1467),
                    r = Math.max,
                    o = Math.min
                e.exports = function (e, t) {
                    return (e = i(e)) < 0 ? r(e + t, 0) : o(e, t)
                }
            },
            4843: (e, t, n) => {
                var i = n(1467),
                    r = n(875)
                e.exports = function (e) {
                    if (void 0 === e) return 0
                    var t = i(e),
                        n = r(t)
                    if (t !== n) throw RangeError("Wrong length!")
                    return n
                }
            },
            1467: e => {
                var t = Math.ceil,
                    n = Math.floor
                e.exports = function (e) {
                    return isNaN((e = +e)) ? 0 : (e > 0 ? n : t)(e)
                }
            },
            2110: (e, t, n) => {
                var i = n(9797),
                    r = n(1355)
                e.exports = function (e) {
                    return i(r(e))
                }
            },
            875: (e, t, n) => {
                var i = n(1467),
                    r = Math.min
                e.exports = function (e) {
                    return e > 0 ? r(i(e), 9007199254740991) : 0
                }
            },
            508: (e, t, n) => {
                var i = n(1355)
                e.exports = function (e) {
                    return Object(i(e))
                }
            },
            1689: (e, t, n) => {
                var i = n(5286)
                e.exports = function (e, t) {
                    if (!i(e)) return e
                    var n, r
                    if (
                        t &&
                        "function" == typeof (n = e.toString) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    if (
                        "function" == typeof (n = e.valueOf) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    if (
                        !t &&
                        "function" == typeof (n = e.toString) &&
                        !i((r = n.call(e)))
                    )
                        return r
                    throw TypeError("Can't convert object to primitive value")
                }
            },
            8440: (e, t, n) => {
                "use strict"
                if (n(7057)) {
                    var i = n(4461),
                        r = n(3816),
                        o = n(4253),
                        s = n(2985),
                        a = n(9383),
                        l = n(1125),
                        u = n(741),
                        h = n(3328),
                        c = n(681),
                        d = n(7728),
                        f = n(4408),
                        p = n(1467),
                        v = n(875),
                        g = n(4843),
                        y = n(2337),
                        _ = n(1689),
                        m = n(9181),
                        x = n(1488),
                        w = n(5286),
                        b = n(508),
                        E = n(6555),
                        T = n(2503),
                        k = n(468),
                        S = n(616).f,
                        A = n(9002),
                        C = n(3953),
                        O = n(6314),
                        P = n(50),
                        R = n(9315),
                        I = n(8364),
                        M = n(6997),
                        L = n(2803),
                        D = n(7462),
                        N = n(2974),
                        B = n(6852),
                        F = n(5216),
                        V = n(9275),
                        z = n(8693),
                        G = V.f,
                        U = z.f,
                        j = r.RangeError,
                        X = r.TypeError,
                        H = r.Uint8Array,
                        W = "ArrayBuffer",
                        Y = "SharedArrayBuffer",
                        q = "BYTES_PER_ELEMENT",
                        $ = Array.prototype,
                        Z = l.ArrayBuffer,
                        K = l.DataView,
                        J = P(0),
                        Q = P(2),
                        ee = P(3),
                        te = P(4),
                        ne = P(5),
                        ie = P(6),
                        re = R(!0),
                        oe = R(!1),
                        se = M.values,
                        ae = M.keys,
                        le = M.entries,
                        ue = $.lastIndexOf,
                        he = $.reduce,
                        ce = $.reduceRight,
                        de = $.join,
                        fe = $.sort,
                        pe = $.slice,
                        ve = $.toString,
                        ge = $.toLocaleString,
                        ye = O("iterator"),
                        _e = O("toStringTag"),
                        me = C("typed_constructor"),
                        xe = C("def_constructor"),
                        we = a.CONSTR,
                        be = a.TYPED,
                        Ee = a.VIEW,
                        Te = "Wrong length!",
                        ke = P(1, function (e, t) {
                            return Pe(I(e, e[xe]), t)
                        }),
                        Se = o(function () {
                            return 1 === new H(new Uint16Array([1]).buffer)[0]
                        }),
                        Ae =
                            !!H &&
                            !!H.prototype.set &&
                            o(function () {
                                new H(1).set({})
                            }),
                        Ce = function (e, t) {
                            var n = p(e)
                            if (n < 0 || n % t) throw j("Wrong offset!")
                            return n
                        },
                        Oe = function (e) {
                            if (w(e) && be in e) return e
                            throw X(e + " is not a typed array!")
                        },
                        Pe = function (e, t) {
                            if (!w(e) || !(me in e))
                                throw X("It is not a typed array constructor!")
                            return new e(t)
                        },
                        Re = function (e, t) {
                            return Ie(I(e, e[xe]), t)
                        },
                        Ie = function (e, t) {
                            for (var n = 0, i = t.length, r = Pe(e, i); i > n; )
                                r[n] = t[n++]
                            return r
                        },
                        Me = function (e, t, n) {
                            G(e, t, {
                                get: function () {
                                    return this._d[n]
                                },
                            })
                        },
                        Le = function (e) {
                            var t,
                                n,
                                i,
                                r,
                                o,
                                s,
                                a = b(e),
                                l = arguments.length,
                                h = l > 1 ? arguments[1] : void 0,
                                c = void 0 !== h,
                                d = A(a)
                            if (null != d && !E(d)) {
                                for (
                                    s = d.call(a), i = [], t = 0;
                                    !(o = s.next()).done;
                                    t++
                                )
                                    i.push(o.value)
                                a = i
                            }
                            for (
                                c && l > 2 && (h = u(h, arguments[2], 2)),
                                    t = 0,
                                    n = v(a.length),
                                    r = Pe(this, n);
                                n > t;
                                t++
                            )
                                r[t] = c ? h(a[t], t) : a[t]
                            return r
                        },
                        De = function () {
                            for (
                                var e = 0,
                                    t = arguments.length,
                                    n = Pe(this, t);
                                t > e;

                            )
                                n[e] = arguments[e++]
                            return n
                        },
                        Ne =
                            !!H &&
                            o(function () {
                                ge.call(new H(1))
                            }),
                        Be = function () {
                            return ge.apply(
                                Ne ? pe.call(Oe(this)) : Oe(this),
                                arguments
                            )
                        },
                        Fe = {
                            copyWithin: function (e, t) {
                                return F.call(
                                    Oe(this),
                                    e,
                                    t,
                                    arguments.length > 2 ? arguments[2] : void 0
                                )
                            },
                            every: function (e) {
                                return te(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            fill: function (e) {
                                return B.apply(Oe(this), arguments)
                            },
                            filter: function (e) {
                                return Re(
                                    this,
                                    Q(
                                        Oe(this),
                                        e,
                                        arguments.length > 1
                                            ? arguments[1]
                                            : void 0
                                    )
                                )
                            },
                            find: function (e) {
                                return ne(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            findIndex: function (e) {
                                return ie(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            forEach: function (e) {
                                J(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            indexOf: function (e) {
                                return oe(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            includes: function (e) {
                                return re(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            join: function (e) {
                                return de.apply(Oe(this), arguments)
                            },
                            lastIndexOf: function (e) {
                                return ue.apply(Oe(this), arguments)
                            },
                            map: function (e) {
                                return ke(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            reduce: function (e) {
                                return he.apply(Oe(this), arguments)
                            },
                            reduceRight: function (e) {
                                return ce.apply(Oe(this), arguments)
                            },
                            reverse: function () {
                                for (
                                    var e,
                                        t = this,
                                        n = Oe(t).length,
                                        i = Math.floor(n / 2),
                                        r = 0;
                                    r < i;

                                )
                                    (e = t[r]), (t[r++] = t[--n]), (t[n] = e)
                                return t
                            },
                            some: function (e) {
                                return ee(
                                    Oe(this),
                                    e,
                                    arguments.length > 1 ? arguments[1] : void 0
                                )
                            },
                            sort: function (e) {
                                return fe.call(Oe(this), e)
                            },
                            subarray: function (e, t) {
                                var n = Oe(this),
                                    i = n.length,
                                    r = y(e, i)
                                return new (I(n, n[xe]))(
                                    n.buffer,
                                    n.byteOffset + r * n.BYTES_PER_ELEMENT,
                                    v((void 0 === t ? i : y(t, i)) - r)
                                )
                            },
                        },
                        Ve = function (e, t) {
                            return Re(this, pe.call(Oe(this), e, t))
                        },
                        ze = function (e) {
                            Oe(this)
                            var t = Ce(arguments[1], 1),
                                n = this.length,
                                i = b(e),
                                r = v(i.length),
                                o = 0
                            if (r + t > n) throw j(Te)
                            for (; o < r; ) this[t + o] = i[o++]
                        },
                        Ge = {
                            entries: function () {
                                return le.call(Oe(this))
                            },
                            keys: function () {
                                return ae.call(Oe(this))
                            },
                            values: function () {
                                return se.call(Oe(this))
                            },
                        },
                        Ue = function (e, t) {
                            return (
                                w(e) &&
                                e[be] &&
                                "symbol" != typeof t &&
                                t in e &&
                                String(+t) == String(t)
                            )
                        },
                        je = function (e, t) {
                            return Ue(e, (t = _(t, !0))) ? c(2, e[t]) : U(e, t)
                        },
                        Xe = function (e, t, n) {
                            return !(
                                Ue(e, (t = _(t, !0))) &&
                                w(n) &&
                                m(n, "value")
                            ) ||
                                m(n, "get") ||
                                m(n, "set") ||
                                n.configurable ||
                                (m(n, "writable") && !n.writable) ||
                                (m(n, "enumerable") && !n.enumerable)
                                ? G(e, t, n)
                                : ((e[t] = n.value), e)
                        }
                    we || ((z.f = je), (V.f = Xe)),
                        s(s.S + s.F * !we, "Object", {
                            getOwnPropertyDescriptor: je,
                            defineProperty: Xe,
                        }),
                        o(function () {
                            ve.call({})
                        }) &&
                            (ve = ge =
                                function () {
                                    return de.call(this)
                                })
                    var He = f({}, Fe)
                    f(He, Ge),
                        d(He, ye, Ge.values),
                        f(He, {
                            slice: Ve,
                            set: ze,
                            constructor: function () {},
                            toString: ve,
                            toLocaleString: Be,
                        }),
                        Me(He, "buffer", "b"),
                        Me(He, "byteOffset", "o"),
                        Me(He, "byteLength", "l"),
                        Me(He, "length", "e"),
                        G(He, _e, {
                            get: function () {
                                return this[be]
                            },
                        }),
                        (e.exports = function (e, t, n, l) {
                            var u = e + ((l = !!l) ? "Clamped" : "") + "Array",
                                c = "get" + e,
                                f = "set" + e,
                                p = r[u],
                                y = p || {},
                                _ = p && k(p),
                                m = !p || !a.ABV,
                                b = {},
                                E = p && p.prototype,
                                A = function (e, n) {
                                    G(e, n, {
                                        get: function () {
                                            return (function (e, n) {
                                                var i = e._d
                                                return i.v[c](n * t + i.o, Se)
                                            })(this, n)
                                        },
                                        set: function (e) {
                                            return (function (e, n, i) {
                                                var r = e._d
                                                l &&
                                                    (i =
                                                        (i = Math.round(i)) < 0
                                                            ? 0
                                                            : i > 255
                                                            ? 255
                                                            : 255 & i),
                                                    r.v[f](n * t + r.o, i, Se)
                                            })(this, n, e)
                                        },
                                        enumerable: !0,
                                    })
                                }
                            m
                                ? ((p = n(function (e, n, i, r) {
                                      h(e, p, u, "_d")
                                      var o,
                                          s,
                                          a,
                                          l,
                                          c = 0,
                                          f = 0
                                      if (w(n)) {
                                          if (
                                              !(
                                                  n instanceof Z ||
                                                  (l = x(n)) == W ||
                                                  l == Y
                                              )
                                          )
                                              return be in n
                                                  ? Ie(p, n)
                                                  : Le.call(p, n)
                                          ;(o = n), (f = Ce(i, t))
                                          var y = n.byteLength
                                          if (void 0 === r) {
                                              if (y % t) throw j(Te)
                                              if ((s = y - f) < 0) throw j(Te)
                                          } else if ((s = v(r) * t) + f > y)
                                              throw j(Te)
                                          a = s / t
                                      } else (a = g(n)), (o = new Z((s = a * t)))
                                      for (
                                          d(e, "_d", {
                                              b: o,
                                              o: f,
                                              l: s,
                                              e: a,
                                              v: new K(o),
                                          });
                                          c < a;

                                      )
                                          A(e, c++)
                                  })),
                                  (E = p.prototype = T(He)),
                                  d(E, "constructor", p))
                                : (o(function () {
                                      p(1)
                                  }) &&
                                      o(function () {
                                          new p(-1)
                                      }) &&
                                      D(function (e) {
                                          new p(),
                                              new p(null),
                                              new p(1.5),
                                              new p(e)
                                      }, !0)) ||
                                  ((p = n(function (e, n, i, r) {
                                      var o
                                      return (
                                          h(e, p, u),
                                          w(n)
                                              ? n instanceof Z ||
                                                (o = x(n)) == W ||
                                                o == Y
                                                  ? void 0 !== r
                                                      ? new y(n, Ce(i, t), r)
                                                      : void 0 !== i
                                                      ? new y(n, Ce(i, t))
                                                      : new y(n)
                                                  : be in n
                                                  ? Ie(p, n)
                                                  : Le.call(p, n)
                                              : new y(g(n))
                                      )
                                  })),
                                  J(
                                      _ !== Function.prototype
                                          ? S(y).concat(S(_))
                                          : S(y),
                                      function (e) {
                                          e in p || d(p, e, y[e])
                                      }
                                  ),
                                  (p.prototype = E),
                                  i || (E.constructor = p))
                            var C = E[ye],
                                O =
                                    !!C &&
                                    ("values" == C.name || null == C.name),
                                P = Ge.values
                            d(p, me, !0),
                                d(E, be, u),
                                d(E, Ee, !0),
                                d(E, xe, p),
                                (l ? new p(1)[_e] == u : _e in E) ||
                                    G(E, _e, {
                                        get: function () {
                                            return u
                                        },
                                    }),
                                (b[u] = p),
                                s(s.G + s.W + s.F * (p != y), b),
                                s(s.S, u, { BYTES_PER_ELEMENT: t }),
                                s(
                                    s.S +
                                        s.F *
                                            o(function () {
                                                y.of.call(p, 1)
                                            }),
                                    u,
                                    { from: Le, of: De }
                                ),
                                q in E || d(E, q, t),
                                s(s.P, u, Fe),
                                N(u),
                                s(s.P + s.F * Ae, u, { set: ze }),
                                s(s.P + s.F * !O, u, Ge),
                                i || E.toString == ve || (E.toString = ve),
                                s(
                                    s.P +
                                        s.F *
                                            o(function () {
                                                new p(1).slice()
                                            }),
                                    u,
                                    { slice: Ve }
                                ),
                                s(
                                    s.P +
                                        s.F *
                                            (o(function () {
                                                return (
                                                    [1, 2].toLocaleString() !=
                                                    new p([
                                                        1, 2,
                                                    ]).toLocaleString()
                                                )
                                            }) ||
                                                !o(function () {
                                                    E.toLocaleString.call([
                                                        1, 2,
                                                    ])
                                                })),
                                    u,
                                    { toLocaleString: Be }
                                ),
                                (L[u] = O ? C : P),
                                i || O || d(E, ye, P)
                        })
                } else e.exports = function () {}
            },
            1125: (e, t, n) => {
                "use strict"
                var i = n(3816),
                    r = n(7057),
                    o = n(4461),
                    s = n(9383),
                    a = n(7728),
                    l = n(4408),
                    u = n(4253),
                    h = n(3328),
                    c = n(1467),
                    d = n(875),
                    f = n(4843),
                    p = n(616).f,
                    v = n(9275).f,
                    g = n(6852),
                    y = n(2943),
                    _ = "ArrayBuffer",
                    m = "DataView",
                    x = "Wrong index!",
                    w = i.ArrayBuffer,
                    b = i.DataView,
                    E = i.Math,
                    T = i.RangeError,
                    k = i.Infinity,
                    S = w,
                    A = E.abs,
                    C = E.pow,
                    O = E.floor,
                    P = E.log,
                    R = E.LN2,
                    I = "buffer",
                    M = "byteLength",
                    L = "byteOffset",
                    D = r ? "_b" : I,
                    N = r ? "_l" : M,
                    B = r ? "_o" : L
                function F(e, t, n) {
                    var i,
                        r,
                        o,
                        s = new Array(n),
                        a = 8 * n - t - 1,
                        l = (1 << a) - 1,
                        u = l >> 1,
                        h = 23 === t ? C(2, -24) - C(2, -77) : 0,
                        c = 0,
                        d = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0
                    for (
                        (e = A(e)) != e || e === k
                            ? ((r = e != e ? 1 : 0), (i = l))
                            : ((i = O(P(e) / R)),
                              e * (o = C(2, -i)) < 1 && (i--, (o *= 2)),
                              (e += i + u >= 1 ? h / o : h * C(2, 1 - u)) * o >=
                                  2 && (i++, (o /= 2)),
                              i + u >= l
                                  ? ((r = 0), (i = l))
                                  : i + u >= 1
                                  ? ((r = (e * o - 1) * C(2, t)), (i += u))
                                  : ((r = e * C(2, u - 1) * C(2, t)), (i = 0)));
                        t >= 8;
                        s[c++] = 255 & r, r /= 256, t -= 8
                    );
                    for (
                        i = (i << t) | r, a += t;
                        a > 0;
                        s[c++] = 255 & i, i /= 256, a -= 8
                    );
                    return (s[--c] |= 128 * d), s
                }
                function V(e, t, n) {
                    var i,
                        r = 8 * n - t - 1,
                        o = (1 << r) - 1,
                        s = o >> 1,
                        a = r - 7,
                        l = n - 1,
                        u = e[l--],
                        h = 127 & u
                    for (u >>= 7; a > 0; h = 256 * h + e[l], l--, a -= 8);
                    for (
                        i = h & ((1 << -a) - 1), h >>= -a, a += t;
                        a > 0;
                        i = 256 * i + e[l], l--, a -= 8
                    );
                    if (0 === h) h = 1 - s
                    else {
                        if (h === o) return i ? NaN : u ? -k : k
                        ;(i += C(2, t)), (h -= s)
                    }
                    return (u ? -1 : 1) * i * C(2, h - t)
                }
                function z(e) {
                    return (e[3] << 24) | (e[2] << 16) | (e[1] << 8) | e[0]
                }
                function G(e) {
                    return [255 & e]
                }
                function U(e) {
                    return [255 & e, (e >> 8) & 255]
                }
                function j(e) {
                    return [
                        255 & e,
                        (e >> 8) & 255,
                        (e >> 16) & 255,
                        (e >> 24) & 255,
                    ]
                }
                function X(e) {
                    return F(e, 52, 8)
                }
                function H(e) {
                    return F(e, 23, 4)
                }
                function W(e, t, n) {
                    v(e.prototype, t, {
                        get: function () {
                            return this[n]
                        },
                    })
                }
                function Y(e, t, n, i) {
                    var r = f(+n)
                    if (r + t > e[N]) throw T(x)
                    var o = e[D]._b,
                        s = r + e[B],
                        a = o.slice(s, s + t)
                    return i ? a : a.reverse()
                }
                function q(e, t, n, i, r, o) {
                    var s = f(+n)
                    if (s + t > e[N]) throw T(x)
                    for (
                        var a = e[D]._b, l = s + e[B], u = i(+r), h = 0;
                        h < t;
                        h++
                    )
                        a[l + h] = u[o ? h : t - h - 1]
                }
                if (s.ABV) {
                    if (
                        !u(function () {
                            w(1)
                        }) ||
                        !u(function () {
                            new w(-1)
                        }) ||
                        u(function () {
                            return new w(), new w(1.5), new w(NaN), w.name != _
                        })
                    ) {
                        for (
                            var $,
                                Z = ((w = function (e) {
                                    return h(this, w), new S(f(e))
                                }).prototype = S.prototype),
                                K = p(S),
                                J = 0;
                            K.length > J;

                        )
                            ($ = K[J++]) in w || a(w, $, S[$])
                        o || (Z.constructor = w)
                    }
                    var Q = new b(new w(2)),
                        ee = b.prototype.setInt8
                    Q.setInt8(0, 2147483648),
                        Q.setInt8(1, 2147483649),
                        (!Q.getInt8(0) && Q.getInt8(1)) ||
                            l(
                                b.prototype,
                                {
                                    setInt8: function (e, t) {
                                        ee.call(this, e, (t << 24) >> 24)
                                    },
                                    setUint8: function (e, t) {
                                        ee.call(this, e, (t << 24) >> 24)
                                    },
                                },
                                !0
                            )
                } else
                    (w = function (e) {
                        h(this, w, _)
                        var t = f(e)
                        ;(this._b = g.call(new Array(t), 0)), (this[N] = t)
                    }),
                        (b = function (e, t, n) {
                            h(this, b, m), h(e, w, m)
                            var i = e[N],
                                r = c(t)
                            if (r < 0 || r > i) throw T("Wrong offset!")
                            if (r + (n = void 0 === n ? i - r : d(n)) > i)
                                throw T("Wrong length!")
                            ;(this[D] = e), (this[B] = r), (this[N] = n)
                        }),
                        r &&
                            (W(w, M, "_l"),
                            W(b, I, "_b"),
                            W(b, M, "_l"),
                            W(b, L, "_o")),
                        l(b.prototype, {
                            getInt8: function (e) {
                                return (Y(this, 1, e)[0] << 24) >> 24
                            },
                            getUint8: function (e) {
                                return Y(this, 1, e)[0]
                            },
                            getInt16: function (e) {
                                var t = Y(this, 2, e, arguments[1])
                                return (((t[1] << 8) | t[0]) << 16) >> 16
                            },
                            getUint16: function (e) {
                                var t = Y(this, 2, e, arguments[1])
                                return (t[1] << 8) | t[0]
                            },
                            getInt32: function (e) {
                                return z(Y(this, 4, e, arguments[1]))
                            },
                            getUint32: function (e) {
                                return z(Y(this, 4, e, arguments[1])) >>> 0
                            },
                            getFloat32: function (e) {
                                return V(Y(this, 4, e, arguments[1]), 23, 4)
                            },
                            getFloat64: function (e) {
                                return V(Y(this, 8, e, arguments[1]), 52, 8)
                            },
                            setInt8: function (e, t) {
                                q(this, 1, e, G, t)
                            },
                            setUint8: function (e, t) {
                                q(this, 1, e, G, t)
                            },
                            setInt16: function (e, t) {
                                q(this, 2, e, U, t, arguments[2])
                            },
                            setUint16: function (e, t) {
                                q(this, 2, e, U, t, arguments[2])
                            },
                            setInt32: function (e, t) {
                                q(this, 4, e, j, t, arguments[2])
                            },
                            setUint32: function (e, t) {
                                q(this, 4, e, j, t, arguments[2])
                            },
                            setFloat32: function (e, t) {
                                q(this, 4, e, H, t, arguments[2])
                            },
                            setFloat64: function (e, t) {
                                q(this, 8, e, X, t, arguments[2])
                            },
                        })
                y(w, _),
                    y(b, m),
                    a(b.prototype, s.VIEW, !0),
                    (t.ArrayBuffer = w),
                    (t.DataView = b)
            },
            9383: (e, t, n) => {
                for (
                    var i,
                        r = n(3816),
                        o = n(7728),
                        s = n(3953),
                        a = s("typed_array"),
                        l = s("view"),
                        u = !(!r.ArrayBuffer || !r.DataView),
                        h = u,
                        c = 0,
                        d =
                            "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(
                                ","
                            );
                    c < 9;

                )
                    (i = r[d[c++]])
                        ? (o(i.prototype, a, !0), o(i.prototype, l, !0))
                        : (h = !1)
                e.exports = { ABV: u, CONSTR: h, TYPED: a, VIEW: l }
            },
            3953: e => {
                var t = 0,
                    n = Math.random()
                e.exports = function (e) {
                    return "Symbol(".concat(
                        void 0 === e ? "" : e,
                        ")_",
                        (++t + n).toString(36)
                    )
                }
            },
            575: (e, t, n) => {
                var i = n(3816).navigator
                e.exports = (i && i.userAgent) || ""
            },
            1616: (e, t, n) => {
                var i = n(5286)
                e.exports = function (e, t) {
                    if (!i(e) || e._t !== t)
                        throw TypeError(
                            "Incompatible receiver, " + t + " required!"
                        )
                    return e
                }
            },
            6074: (e, t, n) => {
                var i = n(3816),
                    r = n(5645),
                    o = n(4461),
                    s = n(8787),
                    a = n(9275).f
                e.exports = function (e) {
                    var t = r.Symbol || (r.Symbol = o ? {} : i.Symbol || {})
                    "_" == e.charAt(0) || e in t || a(t, e, { value: s.f(e) })
                }
            },
            8787: (e, t, n) => {
                t.f = n(6314)
            },
            6314: (e, t, n) => {
                var i = n(3825)("wks"),
                    r = n(3953),
                    o = n(3816).Symbol,
                    s = "function" == typeof o
                ;(e.exports = function (e) {
                    return (
                        i[e] ||
                        (i[e] = (s && o[e]) || (s ? o : r)("Symbol." + e))
                    )
                }).store = i
            },
            9002: (e, t, n) => {
                var i = n(1488),
                    r = n(6314)("iterator"),
                    o = n(2803)
                e.exports = n(5645).getIteratorMethod = function (e) {
                    if (null != e) return e[r] || e["@@iterator"] || o[i(e)]
                }
            },
            2e3: (e, t, n) => {
                var i = n(2985)
                i(i.P, "Array", { copyWithin: n(5216) }), n(7722)("copyWithin")
            },
            5745: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(4)
                i(i.P + i.F * !n(7717)([].every, !0), "Array", {
                    every: function (e) {
                        return r(this, e, arguments[1])
                    },
                })
            },
            8977: (e, t, n) => {
                var i = n(2985)
                i(i.P, "Array", { fill: n(6852) }), n(7722)("fill")
            },
            8837: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(2)
                i(i.P + i.F * !n(7717)([].filter, !0), "Array", {
                    filter: function (e) {
                        return r(this, e, arguments[1])
                    },
                })
            },
            4899: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(6),
                    o = "findIndex",
                    s = !0
                o in [] &&
                    Array(1)[o](function () {
                        s = !1
                    }),
                    i(i.P + i.F * s, "Array", {
                        findIndex: function (e) {
                            return r(
                                this,
                                e,
                                arguments.length > 1 ? arguments[1] : void 0
                            )
                        },
                    }),
                    n(7722)(o)
            },
            2310: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(5),
                    o = "find",
                    s = !0
                o in [] &&
                    Array(1).find(function () {
                        s = !1
                    }),
                    i(i.P + i.F * s, "Array", {
                        find: function (e) {
                            return r(
                                this,
                                e,
                                arguments.length > 1 ? arguments[1] : void 0
                            )
                        },
                    }),
                    n(7722)(o)
            },
            4336: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(0),
                    o = n(7717)([].forEach, !0)
                i(i.P + i.F * !o, "Array", {
                    forEach: function (e) {
                        return r(this, e, arguments[1])
                    },
                })
            },
            522: (e, t, n) => {
                "use strict"
                var i = n(741),
                    r = n(2985),
                    o = n(508),
                    s = n(8851),
                    a = n(6555),
                    l = n(875),
                    u = n(2811),
                    h = n(9002)
                r(
                    r.S +
                        r.F *
                            !n(7462)(function (e) {
                                Array.from(e)
                            }),
                    "Array",
                    {
                        from: function (e) {
                            var t,
                                n,
                                r,
                                c,
                                d = o(e),
                                f = "function" == typeof this ? this : Array,
                                p = arguments.length,
                                v = p > 1 ? arguments[1] : void 0,
                                g = void 0 !== v,
                                y = 0,
                                _ = h(d)
                            if (
                                (g &&
                                    (v = i(
                                        v,
                                        p > 2 ? arguments[2] : void 0,
                                        2
                                    )),
                                null == _ || (f == Array && a(_)))
                            )
                                for (n = new f((t = l(d.length))); t > y; y++)
                                    u(n, y, g ? v(d[y], y) : d[y])
                            else
                                for (
                                    c = _.call(d), n = new f();
                                    !(r = c.next()).done;
                                    y++
                                )
                                    u(
                                        n,
                                        y,
                                        g ? s(c, v, [r.value, y], !0) : r.value
                                    )
                            return (n.length = y), n
                        },
                    }
                )
            },
            3369: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(9315)(!1),
                    o = [].indexOf,
                    s = !!o && 1 / [1].indexOf(1, -0) < 0
                i(i.P + i.F * (s || !n(7717)(o)), "Array", {
                    indexOf: function (e) {
                        return s
                            ? o.apply(this, arguments) || 0
                            : r(this, e, arguments[1])
                    },
                })
            },
            774: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Array", { isArray: n(4302) })
            },
            6997: (e, t, n) => {
                "use strict"
                var i = n(7722),
                    r = n(5436),
                    o = n(2803),
                    s = n(2110)
                ;(e.exports = n(2923)(
                    Array,
                    "Array",
                    function (e, t) {
                        ;(this._t = s(e)), (this._i = 0), (this._k = t)
                    },
                    function () {
                        var e = this._t,
                            t = this._k,
                            n = this._i++
                        return !e || n >= e.length
                            ? ((this._t = void 0), r(1))
                            : r(
                                  0,
                                  "keys" == t
                                      ? n
                                      : "values" == t
                                      ? e[n]
                                      : [n, e[n]]
                              )
                    },
                    "values"
                )),
                    (o.Arguments = o.Array),
                    i("keys"),
                    i("values"),
                    i("entries")
            },
            7842: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(2110),
                    o = [].join
                i(i.P + i.F * (n(9797) != Object || !n(7717)(o)), "Array", {
                    join: function (e) {
                        return o.call(r(this), void 0 === e ? "," : e)
                    },
                })
            },
            9564: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(2110),
                    o = n(1467),
                    s = n(875),
                    a = [].lastIndexOf,
                    l = !!a && 1 / [1].lastIndexOf(1, -0) < 0
                i(i.P + i.F * (l || !n(7717)(a)), "Array", {
                    lastIndexOf: function (e) {
                        if (l) return a.apply(this, arguments) || 0
                        var t = r(this),
                            n = s(t.length),
                            i = n - 1
                        for (
                            arguments.length > 1 &&
                                (i = Math.min(i, o(arguments[1]))),
                                i < 0 && (i = n + i);
                            i >= 0;
                            i--
                        )
                            if (i in t && t[i] === e) return i || 0
                        return -1
                    },
                })
            },
            1802: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(1)
                i(i.P + i.F * !n(7717)([].map, !0), "Array", {
                    map: function (e) {
                        return r(this, e, arguments[1])
                    },
                })
            },
            8295: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(2811)
                i(
                    i.S +
                        i.F *
                            n(4253)(function () {
                                function e() {}
                                return !(Array.of.call(e) instanceof e)
                            }),
                    "Array",
                    {
                        of: function () {
                            for (
                                var e = 0,
                                    t = arguments.length,
                                    n = new (
                                        "function" == typeof this ? this : Array
                                    )(t);
                                t > e;

                            )
                                r(n, e, arguments[e++])
                            return (n.length = t), n
                        },
                    }
                )
            },
            3750: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(7628)
                i(i.P + i.F * !n(7717)([].reduceRight, !0), "Array", {
                    reduceRight: function (e) {
                        return r(this, e, arguments.length, arguments[1], !0)
                    },
                })
            },
            3057: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(7628)
                i(i.P + i.F * !n(7717)([].reduce, !0), "Array", {
                    reduce: function (e) {
                        return r(this, e, arguments.length, arguments[1], !1)
                    },
                })
            },
            110: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(639),
                    o = n(2032),
                    s = n(2337),
                    a = n(875),
                    l = [].slice
                i(
                    i.P +
                        i.F *
                            n(4253)(function () {
                                r && l.call(r)
                            }),
                    "Array",
                    {
                        slice: function (e, t) {
                            var n = a(this.length),
                                i = o(this)
                            if (((t = void 0 === t ? n : t), "Array" == i))
                                return l.call(this, e, t)
                            for (
                                var r = s(e, n),
                                    u = s(t, n),
                                    h = a(u - r),
                                    c = new Array(h),
                                    d = 0;
                                d < h;
                                d++
                            )
                                c[d] =
                                    "String" == i
                                        ? this.charAt(r + d)
                                        : this[r + d]
                            return c
                        },
                    }
                )
            },
            6773: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(50)(3)
                i(i.P + i.F * !n(7717)([].some, !0), "Array", {
                    some: function (e) {
                        return r(this, e, arguments[1])
                    },
                })
            },
            75: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(4963),
                    o = n(508),
                    s = n(4253),
                    a = [].sort,
                    l = [1, 2, 3]
                i(
                    i.P +
                        i.F *
                            (s(function () {
                                l.sort(void 0)
                            }) ||
                                !s(function () {
                                    l.sort(null)
                                }) ||
                                !n(7717)(a)),
                    "Array",
                    {
                        sort: function (e) {
                            return void 0 === e
                                ? a.call(o(this))
                                : a.call(o(this), r(e))
                        },
                    }
                )
            },
            1842: (e, t, n) => {
                n(2974)("Array")
            },
            1822: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Date", {
                    now: function () {
                        return new Date().getTime()
                    },
                })
            },
            1031: (e, t, n) => {
                var i = n(2985),
                    r = n(3537)
                i(i.P + i.F * (Date.prototype.toISOString !== r), "Date", {
                    toISOString: r,
                })
            },
            9977: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(508),
                    o = n(1689)
                i(
                    i.P +
                        i.F *
                            n(4253)(function () {
                                return (
                                    null !== new Date(NaN).toJSON() ||
                                    1 !==
                                        Date.prototype.toJSON.call({
                                            toISOString: function () {
                                                return 1
                                            },
                                        })
                                )
                            }),
                    "Date",
                    {
                        toJSON: function (e) {
                            var t = r(this),
                                n = o(t)
                            return "number" != typeof n || isFinite(n)
                                ? t.toISOString()
                                : null
                        },
                    }
                )
            },
            1560: (e, t, n) => {
                var i = n(6314)("toPrimitive"),
                    r = Date.prototype
                i in r || n(7728)(r, i, n(870))
            },
            6331: (e, t, n) => {
                var i = Date.prototype,
                    r = "Invalid Date",
                    o = i.toString,
                    s = i.getTime
                new Date(NaN) + "" != r &&
                    n(7234)(i, "toString", function () {
                        var e = s.call(this)
                        return e == e ? o.call(this) : r
                    })
            },
            9730: (e, t, n) => {
                var i = n(2985)
                i(i.P, "Function", { bind: n(4398) })
            },
            8377: (e, t, n) => {
                "use strict"
                var i = n(5286),
                    r = n(468),
                    o = n(6314)("hasInstance"),
                    s = Function.prototype
                o in s ||
                    n(9275).f(s, o, {
                        value: function (e) {
                            if ("function" != typeof this || !i(e)) return !1
                            if (!i(this.prototype)) return e instanceof this
                            for (; (e = r(e)); )
                                if (this.prototype === e) return !0
                            return !1
                        },
                    })
            },
            6059: (e, t, n) => {
                var i = n(9275).f,
                    r = Function.prototype,
                    o = /^\s*function ([^ (]*)/,
                    s = "name"
                s in r ||
                    (n(7057) &&
                        i(r, s, {
                            configurable: !0,
                            get: function () {
                                try {
                                    return ("" + this).match(o)[1]
                                } catch (e) {
                                    return ""
                                }
                            },
                        }))
            },
            8416: (e, t, n) => {
                "use strict"
                var i = n(9824),
                    r = n(1616),
                    o = "Map"
                e.exports = n(5795)(
                    o,
                    function (e) {
                        return function () {
                            return e(
                                this,
                                arguments.length > 0 ? arguments[0] : void 0
                            )
                        }
                    },
                    {
                        get: function (e) {
                            var t = i.getEntry(r(this, o), e)
                            return t && t.v
                        },
                        set: function (e, t) {
                            return i.def(r(this, o), 0 === e ? 0 : e, t)
                        },
                    },
                    i,
                    !0
                )
            },
            6503: (e, t, n) => {
                var i = n(2985),
                    r = n(6206),
                    o = Math.sqrt,
                    s = Math.acosh
                i(
                    i.S +
                        i.F *
                            !(
                                s &&
                                710 == Math.floor(s(Number.MAX_VALUE)) &&
                                s(1 / 0) == 1 / 0
                            ),
                    "Math",
                    {
                        acosh: function (e) {
                            return (e = +e) < 1
                                ? NaN
                                : e > 94906265.62425156
                                ? Math.log(e) + Math.LN2
                                : r(e - 1 + o(e - 1) * o(e + 1))
                        },
                    }
                )
            },
            6786: (e, t, n) => {
                var i = n(2985),
                    r = Math.asinh
                i(i.S + i.F * !(r && 1 / r(0) > 0), "Math", {
                    asinh: function e(t) {
                        return isFinite((t = +t)) && 0 != t
                            ? t < 0
                                ? -e(-t)
                                : Math.log(t + Math.sqrt(t * t + 1))
                            : t
                    },
                })
            },
            932: (e, t, n) => {
                var i = n(2985),
                    r = Math.atanh
                i(i.S + i.F * !(r && 1 / r(-0) < 0), "Math", {
                    atanh: function (e) {
                        return 0 == (e = +e)
                            ? e
                            : Math.log((1 + e) / (1 - e)) / 2
                    },
                })
            },
            7526: (e, t, n) => {
                var i = n(2985),
                    r = n(1801)
                i(i.S, "Math", {
                    cbrt: function (e) {
                        return r((e = +e)) * Math.pow(Math.abs(e), 1 / 3)
                    },
                })
            },
            1591: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", {
                    clz32: function (e) {
                        return (e >>>= 0)
                            ? 31 - Math.floor(Math.log(e + 0.5) * Math.LOG2E)
                            : 32
                    },
                })
            },
            9073: (e, t, n) => {
                var i = n(2985),
                    r = Math.exp
                i(i.S, "Math", {
                    cosh: function (e) {
                        return (r((e = +e)) + r(-e)) / 2
                    },
                })
            },
            347: (e, t, n) => {
                var i = n(2985),
                    r = n(3086)
                i(i.S + i.F * (r != Math.expm1), "Math", { expm1: r })
            },
            579: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", { fround: n(4934) })
            },
            4669: (e, t, n) => {
                var i = n(2985),
                    r = Math.abs
                i(i.S, "Math", {
                    hypot: function (e, t) {
                        for (
                            var n, i, o = 0, s = 0, a = arguments.length, l = 0;
                            s < a;

                        )
                            l < (n = r(arguments[s++]))
                                ? ((o = o * (i = l / n) * i + 1), (l = n))
                                : (o += n > 0 ? (i = n / l) * i : n)
                        return l === 1 / 0 ? 1 / 0 : l * Math.sqrt(o)
                    },
                })
            },
            7710: (e, t, n) => {
                var i = n(2985),
                    r = Math.imul
                i(
                    i.S +
                        i.F *
                            n(4253)(function () {
                                return -5 != r(4294967295, 5) || 2 != r.length
                            }),
                    "Math",
                    {
                        imul: function (e, t) {
                            var n = 65535,
                                i = +e,
                                r = +t,
                                o = n & i,
                                s = n & r
                            return (
                                0 |
                                (o * s +
                                    ((((n & (i >>> 16)) * s +
                                        o * (n & (r >>> 16))) <<
                                        16) >>>
                                        0))
                            )
                        },
                    }
                )
            },
            5789: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", {
                    log10: function (e) {
                        return Math.log(e) * Math.LOG10E
                    },
                })
            },
            3514: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", { log1p: n(6206) })
            },
            9978: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", {
                    log2: function (e) {
                        return Math.log(e) / Math.LN2
                    },
                })
            },
            8472: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", { sign: n(1801) })
            },
            6946: (e, t, n) => {
                var i = n(2985),
                    r = n(3086),
                    o = Math.exp
                i(
                    i.S +
                        i.F *
                            n(4253)(function () {
                                return -2e-17 != !Math.sinh(-2e-17)
                            }),
                    "Math",
                    {
                        sinh: function (e) {
                            return Math.abs((e = +e)) < 1
                                ? (r(e) - r(-e)) / 2
                                : (o(e - 1) - o(-e - 1)) * (Math.E / 2)
                        },
                    }
                )
            },
            5068: (e, t, n) => {
                var i = n(2985),
                    r = n(3086),
                    o = Math.exp
                i(i.S, "Math", {
                    tanh: function (e) {
                        var t = r((e = +e)),
                            n = r(-e)
                        return t == 1 / 0
                            ? 1
                            : n == 1 / 0
                            ? -1
                            : (t - n) / (o(e) + o(-e))
                    },
                })
            },
            413: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Math", {
                    trunc: function (e) {
                        return (e > 0 ? Math.floor : Math.ceil)(e)
                    },
                })
            },
            1246: (e, t, n) => {
                "use strict"
                var i = n(3816),
                    r = n(9181),
                    o = n(2032),
                    s = n(266),
                    a = n(1689),
                    l = n(4253),
                    u = n(616).f,
                    h = n(8693).f,
                    c = n(9275).f,
                    d = n(9599).trim,
                    f = "Number",
                    p = i.Number,
                    v = p,
                    g = p.prototype,
                    y = o(n(2503)(g)) == f,
                    _ = "trim" in String.prototype,
                    m = function (e) {
                        var t = a(e, !1)
                        if ("string" == typeof t && t.length > 2) {
                            var n,
                                i,
                                r,
                                o = (t = _ ? t.trim() : d(t, 3)).charCodeAt(0)
                            if (43 === o || 45 === o) {
                                if (88 === (n = t.charCodeAt(2)) || 120 === n)
                                    return NaN
                            } else if (48 === o) {
                                switch (t.charCodeAt(1)) {
                                    case 66:
                                    case 98:
                                        ;(i = 2), (r = 49)
                                        break
                                    case 79:
                                    case 111:
                                        ;(i = 8), (r = 55)
                                        break
                                    default:
                                        return +t
                                }
                                for (
                                    var s, l = t.slice(2), u = 0, h = l.length;
                                    u < h;
                                    u++
                                )
                                    if ((s = l.charCodeAt(u)) < 48 || s > r)
                                        return NaN
                                return parseInt(l, i)
                            }
                        }
                        return +t
                    }
                if (!p(" 0o1") || !p("0b1") || p("+0x1")) {
                    p = function (e) {
                        var t = arguments.length < 1 ? 0 : e,
                            n = this
                        return n instanceof p &&
                            (y
                                ? l(function () {
                                      g.valueOf.call(n)
                                  })
                                : o(n) != f)
                            ? s(new v(m(t)), n, p)
                            : m(t)
                    }
                    for (
                        var x,
                            w = n(7057)
                                ? u(v)
                                : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(
                                      ","
                                  ),
                            b = 0;
                        w.length > b;
                        b++
                    )
                        r(v, (x = w[b])) && !r(p, x) && c(p, x, h(v, x))
                    ;(p.prototype = g), (g.constructor = p), n(7234)(i, f, p)
                }
            },
            5972: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Number", { EPSILON: Math.pow(2, -52) })
            },
            3403: (e, t, n) => {
                var i = n(2985),
                    r = n(3816).isFinite
                i(i.S, "Number", {
                    isFinite: function (e) {
                        return "number" == typeof e && r(e)
                    },
                })
            },
            2516: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Number", { isInteger: n(8367) })
            },
            9371: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Number", {
                    isNaN: function (e) {
                        return e != e
                    },
                })
            },
            6479: (e, t, n) => {
                var i = n(2985),
                    r = n(8367),
                    o = Math.abs
                i(i.S, "Number", {
                    isSafeInteger: function (e) {
                        return r(e) && o(e) <= 9007199254740991
                    },
                })
            },
            1736: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 })
            },
            1889: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Number", { MIN_SAFE_INTEGER: -9007199254740991 })
            },
            5177: (e, t, n) => {
                var i = n(2985),
                    r = n(7743)
                i(i.S + i.F * (Number.parseFloat != r), "Number", {
                    parseFloat: r,
                })
            },
            6943: (e, t, n) => {
                var i = n(2985),
                    r = n(5960)
                i(i.S + i.F * (Number.parseInt != r), "Number", { parseInt: r })
            },
            726: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(1467),
                    o = n(3365),
                    s = n(8595),
                    a = (1).toFixed,
                    l = Math.floor,
                    u = [0, 0, 0, 0, 0, 0],
                    h = "Number.toFixed: incorrect invocation!",
                    c = "0",
                    d = function (e, t) {
                        for (var n = -1, i = t; ++n < 6; )
                            (i += e * u[n]), (u[n] = i % 1e7), (i = l(i / 1e7))
                    },
                    f = function (e) {
                        for (var t = 6, n = 0; --t >= 0; )
                            (n += u[t]), (u[t] = l(n / e)), (n = (n % e) * 1e7)
                    },
                    p = function () {
                        for (var e = 6, t = ""; --e >= 0; )
                            if ("" !== t || 0 === e || 0 !== u[e]) {
                                var n = String(u[e])
                                t =
                                    "" === t
                                        ? n
                                        : t + s.call(c, 7 - n.length) + n
                            }
                        return t
                    },
                    v = function (e, t, n) {
                        return 0 === t
                            ? n
                            : t % 2 == 1
                            ? v(e, t - 1, n * e)
                            : v(e * e, t / 2, n)
                    }
                i(
                    i.P +
                        i.F *
                            ((!!a &&
                                ("0.000" !== (8e-5).toFixed(3) ||
                                    "1" !== (0.9).toFixed(0) ||
                                    "1.25" !== (1.255).toFixed(2) ||
                                    "1000000000000000128" !==
                                        (0xde0b6b3a7640080).toFixed(0))) ||
                                !n(4253)(function () {
                                    a.call({})
                                })),
                    "Number",
                    {
                        toFixed: function (e) {
                            var t,
                                n,
                                i,
                                a,
                                l = o(this, h),
                                u = r(e),
                                g = "",
                                y = c
                            if (u < 0 || u > 20) throw RangeError(h)
                            if (l != l) return "NaN"
                            if (l <= -1e21 || l >= 1e21) return String(l)
                            if ((l < 0 && ((g = "-"), (l = -l)), l > 1e-21))
                                if (
                                    ((t =
                                        (function (e) {
                                            for (var t = 0, n = e; n >= 4096; )
                                                (t += 12), (n /= 4096)
                                            for (; n >= 2; ) (t += 1), (n /= 2)
                                            return t
                                        })(l * v(2, 69, 1)) - 69),
                                    (n =
                                        t < 0
                                            ? l * v(2, -t, 1)
                                            : l / v(2, t, 1)),
                                    (n *= 4503599627370496),
                                    (t = 52 - t) > 0)
                                ) {
                                    for (d(0, n), i = u; i >= 7; )
                                        d(1e7, 0), (i -= 7)
                                    for (
                                        d(v(10, i, 1), 0), i = t - 1;
                                        i >= 23;

                                    )
                                        f(1 << 23), (i -= 23)
                                    f(1 << i), d(1, 1), f(2), (y = p())
                                } else
                                    d(0, n),
                                        d(1 << -t, 0),
                                        (y = p() + s.call(c, u))
                            return u > 0
                                ? g +
                                      ((a = y.length) <= u
                                          ? "0." + s.call(c, u - a) + y
                                          : y.slice(0, a - u) +
                                            "." +
                                            y.slice(a - u))
                                : g + y
                        },
                    }
                )
            },
            1901: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(4253),
                    o = n(3365),
                    s = (1).toPrecision
                i(
                    i.P +
                        i.F *
                            (r(function () {
                                return "1" !== s.call(1, void 0)
                            }) ||
                                !r(function () {
                                    s.call({})
                                })),
                    "Number",
                    {
                        toPrecision: function (e) {
                            var t = o(
                                this,
                                "Number#toPrecision: incorrect invocation!"
                            )
                            return void 0 === e ? s.call(t) : s.call(t, e)
                        },
                    }
                )
            },
            5115: (e, t, n) => {
                var i = n(2985)
                i(i.S + i.F, "Object", { assign: n(5345) })
            },
            8132: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Object", { create: n(2503) })
            },
            7470: (e, t, n) => {
                var i = n(2985)
                i(i.S + i.F * !n(7057), "Object", { defineProperties: n(5588) })
            },
            8388: (e, t, n) => {
                var i = n(2985)
                i(i.S + i.F * !n(7057), "Object", { defineProperty: n(9275).f })
            },
            9375: (e, t, n) => {
                var i = n(5286),
                    r = n(4728).onFreeze
                n(3160)("freeze", function (e) {
                    return function (t) {
                        return e && i(t) ? e(r(t)) : t
                    }
                })
            },
            4882: (e, t, n) => {
                var i = n(2110),
                    r = n(8693).f
                n(3160)("getOwnPropertyDescriptor", function () {
                    return function (e, t) {
                        return r(i(e), t)
                    }
                })
            },
            9622: (e, t, n) => {
                n(3160)("getOwnPropertyNames", function () {
                    return n(9327).f
                })
            },
            1520: (e, t, n) => {
                var i = n(508),
                    r = n(468)
                n(3160)("getPrototypeOf", function () {
                    return function (e) {
                        return r(i(e))
                    }
                })
            },
            9892: (e, t, n) => {
                var i = n(5286)
                n(3160)("isExtensible", function (e) {
                    return function (t) {
                        return !!i(t) && (!e || e(t))
                    }
                })
            },
            4157: (e, t, n) => {
                var i = n(5286)
                n(3160)("isFrozen", function (e) {
                    return function (t) {
                        return !i(t) || (!!e && e(t))
                    }
                })
            },
            5095: (e, t, n) => {
                var i = n(5286)
                n(3160)("isSealed", function (e) {
                    return function (t) {
                        return !i(t) || (!!e && e(t))
                    }
                })
            },
            9176: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Object", { is: n(7195) })
            },
            7476: (e, t, n) => {
                var i = n(508),
                    r = n(7184)
                n(3160)("keys", function () {
                    return function (e) {
                        return r(i(e))
                    }
                })
            },
            4672: (e, t, n) => {
                var i = n(5286),
                    r = n(4728).onFreeze
                n(3160)("preventExtensions", function (e) {
                    return function (t) {
                        return e && i(t) ? e(r(t)) : t
                    }
                })
            },
            3533: (e, t, n) => {
                var i = n(5286),
                    r = n(4728).onFreeze
                n(3160)("seal", function (e) {
                    return function (t) {
                        return e && i(t) ? e(r(t)) : t
                    }
                })
            },
            8838: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Object", { setPrototypeOf: n(7375).set })
            },
            6253: (e, t, n) => {
                "use strict"
                var i = n(1488),
                    r = {}
                ;(r[n(6314)("toStringTag")] = "z"),
                    r + "" != "[object z]" &&
                        n(7234)(
                            Object.prototype,
                            "toString",
                            function () {
                                return "[object " + i(this) + "]"
                            },
                            !0
                        )
            },
            4299: (e, t, n) => {
                var i = n(2985),
                    r = n(7743)
                i(i.G + i.F * (parseFloat != r), { parseFloat: r })
            },
            1084: (e, t, n) => {
                var i = n(2985),
                    r = n(5960)
                i(i.G + i.F * (parseInt != r), { parseInt: r })
            },
            851: (e, t, n) => {
                "use strict"
                var i,
                    r,
                    o,
                    s,
                    a = n(4461),
                    l = n(3816),
                    u = n(741),
                    h = n(1488),
                    c = n(2985),
                    d = n(5286),
                    f = n(4963),
                    p = n(3328),
                    v = n(3531),
                    g = n(8364),
                    y = n(4193).set,
                    _ = n(4351)(),
                    m = n(3499),
                    x = n(188),
                    w = n(575),
                    b = n(94),
                    E = "Promise",
                    T = l.TypeError,
                    k = l.process,
                    S = k && k.versions,
                    A = (S && S.v8) || "",
                    C = l.Promise,
                    O = "process" == h(k),
                    P = function () {},
                    R = (r = m.f),
                    I = !!(function () {
                        try {
                            var e = C.resolve(1),
                                t = ((e.constructor = {})[n(6314)("species")] =
                                    function (e) {
                                        e(P, P)
                                    })
                            return (
                                (O ||
                                    "function" ==
                                        typeof PromiseRejectionEvent) &&
                                e.then(P) instanceof t &&
                                0 !== A.indexOf("6.6") &&
                                -1 === w.indexOf("Chrome/66")
                            )
                        } catch (e) {}
                    })(),
                    M = function (e) {
                        var t
                        return (
                            !(!d(e) || "function" != typeof (t = e.then)) && t
                        )
                    },
                    L = function (e, t) {
                        if (!e._n) {
                            e._n = !0
                            var n = e._c
                            _(function () {
                                for (
                                    var i = e._v,
                                        r = 1 == e._s,
                                        o = 0,
                                        s = function (t) {
                                            var n,
                                                o,
                                                s,
                                                a = r ? t.ok : t.fail,
                                                l = t.resolve,
                                                u = t.reject,
                                                h = t.domain
                                            try {
                                                a
                                                    ? (r ||
                                                          (2 == e._h && B(e),
                                                          (e._h = 1)),
                                                      !0 === a
                                                          ? (n = i)
                                                          : (h && h.enter(),
                                                            (n = a(i)),
                                                            h &&
                                                                (h.exit(),
                                                                (s = !0))),
                                                      n === t.promise
                                                          ? u(
                                                                T(
                                                                    "Promise-chain cycle"
                                                                )
                                                            )
                                                          : (o = M(n))
                                                          ? o.call(n, l, u)
                                                          : l(n))
                                                    : u(i)
                                            } catch (e) {
                                                h && !s && h.exit(), u(e)
                                            }
                                        };
                                    n.length > o;

                                )
                                    s(n[o++])
                                ;(e._c = []), (e._n = !1), t && !e._h && D(e)
                            })
                        }
                    },
                    D = function (e) {
                        y.call(l, function () {
                            var t,
                                n,
                                i,
                                r = e._v,
                                o = N(e)
                            if (
                                (o &&
                                    ((t = x(function () {
                                        O
                                            ? k.emit("unhandledRejection", r, e)
                                            : (n = l.onunhandledrejection)
                                            ? n({ promise: e, reason: r })
                                            : (i = l.console) &&
                                              i.error &&
                                              i.error(
                                                  "Unhandled promise rejection",
                                                  r
                                              )
                                    })),
                                    (e._h = O || N(e) ? 2 : 1)),
                                (e._a = void 0),
                                o && t.e)
                            )
                                throw t.v
                        })
                    },
                    N = function (e) {
                        return 1 !== e._h && 0 === (e._a || e._c).length
                    },
                    B = function (e) {
                        y.call(l, function () {
                            var t
                            O
                                ? k.emit("rejectionHandled", e)
                                : (t = l.onrejectionhandled) &&
                                  t({ promise: e, reason: e._v })
                        })
                    },
                    F = function (e) {
                        var t = this
                        t._d ||
                            ((t._d = !0),
                            ((t = t._w || t)._v = e),
                            (t._s = 2),
                            t._a || (t._a = t._c.slice()),
                            L(t, !0))
                    },
                    V = function (e) {
                        var t,
                            n = this
                        if (!n._d) {
                            ;(n._d = !0), (n = n._w || n)
                            try {
                                if (n === e)
                                    throw T("Promise can't be resolved itself")
                                ;(t = M(e))
                                    ? _(function () {
                                          var i = { _w: n, _d: !1 }
                                          try {
                                              t.call(e, u(V, i, 1), u(F, i, 1))
                                          } catch (e) {
                                              F.call(i, e)
                                          }
                                      })
                                    : ((n._v = e), (n._s = 1), L(n, !1))
                            } catch (e) {
                                F.call({ _w: n, _d: !1 }, e)
                            }
                        }
                    }
                I ||
                    ((C = function (e) {
                        p(this, C, E, "_h"), f(e), i.call(this)
                        try {
                            e(u(V, this, 1), u(F, this, 1))
                        } catch (e) {
                            F.call(this, e)
                        }
                    }),
                    ((i = function (e) {
                        ;(this._c = []),
                            (this._a = void 0),
                            (this._s = 0),
                            (this._d = !1),
                            (this._v = void 0),
                            (this._h = 0),
                            (this._n = !1)
                    }).prototype = n(4408)(C.prototype, {
                        then: function (e, t) {
                            var n = R(g(this, C))
                            return (
                                (n.ok = "function" != typeof e || e),
                                (n.fail = "function" == typeof t && t),
                                (n.domain = O ? k.domain : void 0),
                                this._c.push(n),
                                this._a && this._a.push(n),
                                this._s && L(this, !1),
                                n.promise
                            )
                        },
                        catch: function (e) {
                            return this.then(void 0, e)
                        },
                    })),
                    (o = function () {
                        var e = new i()
                        ;(this.promise = e),
                            (this.resolve = u(V, e, 1)),
                            (this.reject = u(F, e, 1))
                    }),
                    (m.f = R =
                        function (e) {
                            return e === C || e === s ? new o(e) : r(e)
                        })),
                    c(c.G + c.W + c.F * !I, { Promise: C }),
                    n(2943)(C, E),
                    n(2974)(E),
                    (s = n(5645).Promise),
                    c(c.S + c.F * !I, E, {
                        reject: function (e) {
                            var t = R(this)
                            return (0, t.reject)(e), t.promise
                        },
                    }),
                    c(c.S + c.F * (a || !I), E, {
                        resolve: function (e) {
                            return b(a && this === s ? C : this, e)
                        },
                    }),
                    c(
                        c.S +
                            c.F *
                                !(
                                    I &&
                                    n(7462)(function (e) {
                                        C.all(e).catch(P)
                                    })
                                ),
                        E,
                        {
                            all: function (e) {
                                var t = this,
                                    n = R(t),
                                    i = n.resolve,
                                    r = n.reject,
                                    o = x(function () {
                                        var n = [],
                                            o = 0,
                                            s = 1
                                        v(e, !1, function (e) {
                                            var a = o++,
                                                l = !1
                                            n.push(void 0),
                                                s++,
                                                t.resolve(e).then(function (e) {
                                                    l ||
                                                        ((l = !0),
                                                        (n[a] = e),
                                                        --s || i(n))
                                                }, r)
                                        }),
                                            --s || i(n)
                                    })
                                return o.e && r(o.v), n.promise
                            },
                            race: function (e) {
                                var t = this,
                                    n = R(t),
                                    i = n.reject,
                                    r = x(function () {
                                        v(e, !1, function (e) {
                                            t.resolve(e).then(n.resolve, i)
                                        })
                                    })
                                return r.e && i(r.v), n.promise
                            },
                        }
                    )
            },
            1572: (e, t, n) => {
                var i = n(2985),
                    r = n(4963),
                    o = n(7007),
                    s = (n(3816).Reflect || {}).apply,
                    a = Function.apply
                i(
                    i.S +
                        i.F *
                            !n(4253)(function () {
                                s(function () {})
                            }),
                    "Reflect",
                    {
                        apply: function (e, t, n) {
                            var i = r(e),
                                l = o(n)
                            return s ? s(i, t, l) : a.call(i, t, l)
                        },
                    }
                )
            },
            2139: (e, t, n) => {
                var i = n(2985),
                    r = n(2503),
                    o = n(4963),
                    s = n(7007),
                    a = n(5286),
                    l = n(4253),
                    u = n(4398),
                    h = (n(3816).Reflect || {}).construct,
                    c = l(function () {
                        function e() {}
                        return !(h(function () {}, [], e) instanceof e)
                    }),
                    d = !l(function () {
                        h(function () {})
                    })
                i(i.S + i.F * (c || d), "Reflect", {
                    construct: function (e, t) {
                        o(e), s(t)
                        var n = arguments.length < 3 ? e : o(arguments[2])
                        if (d && !c) return h(e, t, n)
                        if (e == n) {
                            switch (t.length) {
                                case 0:
                                    return new e()
                                case 1:
                                    return new e(t[0])
                                case 2:
                                    return new e(t[0], t[1])
                                case 3:
                                    return new e(t[0], t[1], t[2])
                                case 4:
                                    return new e(t[0], t[1], t[2], t[3])
                            }
                            var i = [null]
                            return i.push.apply(i, t), new (u.apply(e, i))()
                        }
                        var l = n.prototype,
                            f = r(a(l) ? l : Object.prototype),
                            p = Function.apply.call(e, f, t)
                        return a(p) ? p : f
                    },
                })
            },
            685: (e, t, n) => {
                var i = n(9275),
                    r = n(2985),
                    o = n(7007),
                    s = n(1689)
                r(
                    r.S +
                        r.F *
                            n(4253)(function () {
                                Reflect.defineProperty(
                                    i.f({}, 1, { value: 1 }),
                                    1,
                                    { value: 2 }
                                )
                            }),
                    "Reflect",
                    {
                        defineProperty: function (e, t, n) {
                            o(e), (t = s(t, !0)), o(n)
                            try {
                                return i.f(e, t, n), !0
                            } catch (e) {
                                return !1
                            }
                        },
                    }
                )
            },
            5535: (e, t, n) => {
                var i = n(2985),
                    r = n(8693).f,
                    o = n(7007)
                i(i.S, "Reflect", {
                    deleteProperty: function (e, t) {
                        var n = r(o(e), t)
                        return !(n && !n.configurable) && delete e[t]
                    },
                })
            },
            7347: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(7007),
                    o = function (e) {
                        ;(this._t = r(e)), (this._i = 0)
                        var t,
                            n = (this._k = [])
                        for (t in e) n.push(t)
                    }
                n(9988)(o, "Object", function () {
                    var e,
                        t = this,
                        n = t._k
                    do {
                        if (t._i >= n.length) return { value: void 0, done: !0 }
                    } while (!((e = n[t._i++]) in t._t))
                    return { value: e, done: !1 }
                }),
                    i(i.S, "Reflect", {
                        enumerate: function (e) {
                            return new o(e)
                        },
                    })
            },
            6633: (e, t, n) => {
                var i = n(8693),
                    r = n(2985),
                    o = n(7007)
                r(r.S, "Reflect", {
                    getOwnPropertyDescriptor: function (e, t) {
                        return i.f(o(e), t)
                    },
                })
            },
            8989: (e, t, n) => {
                var i = n(2985),
                    r = n(468),
                    o = n(7007)
                i(i.S, "Reflect", {
                    getPrototypeOf: function (e) {
                        return r(o(e))
                    },
                })
            },
            3049: (e, t, n) => {
                var i = n(8693),
                    r = n(468),
                    o = n(9181),
                    s = n(2985),
                    a = n(5286),
                    l = n(7007)
                s(s.S, "Reflect", {
                    get: function e(t, n) {
                        var s,
                            u,
                            h = arguments.length < 3 ? t : arguments[2]
                        return l(t) === h
                            ? t[n]
                            : (s = i.f(t, n))
                            ? o(s, "value")
                                ? s.value
                                : void 0 !== s.get
                                ? s.get.call(h)
                                : void 0
                            : a((u = r(t)))
                            ? e(u, n, h)
                            : void 0
                    },
                })
            },
            8270: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Reflect", {
                    has: function (e, t) {
                        return t in e
                    },
                })
            },
            4510: (e, t, n) => {
                var i = n(2985),
                    r = n(7007),
                    o = Object.isExtensible
                i(i.S, "Reflect", {
                    isExtensible: function (e) {
                        return r(e), !o || o(e)
                    },
                })
            },
            3984: (e, t, n) => {
                var i = n(2985)
                i(i.S, "Reflect", { ownKeys: n(7643) })
            },
            5769: (e, t, n) => {
                var i = n(2985),
                    r = n(7007),
                    o = Object.preventExtensions
                i(i.S, "Reflect", {
                    preventExtensions: function (e) {
                        r(e)
                        try {
                            return o && o(e), !0
                        } catch (e) {
                            return !1
                        }
                    },
                })
            },
            6014: (e, t, n) => {
                var i = n(2985),
                    r = n(7375)
                r &&
                    i(i.S, "Reflect", {
                        setPrototypeOf: function (e, t) {
                            r.check(e, t)
                            try {
                                return r.set(e, t), !0
                            } catch (e) {
                                return !1
                            }
                        },
                    })
            },
            55: (e, t, n) => {
                var i = n(9275),
                    r = n(8693),
                    o = n(468),
                    s = n(9181),
                    a = n(2985),
                    l = n(681),
                    u = n(7007),
                    h = n(5286)
                a(a.S, "Reflect", {
                    set: function e(t, n, a) {
                        var c,
                            d,
                            f = arguments.length < 4 ? t : arguments[3],
                            p = r.f(u(t), n)
                        if (!p) {
                            if (h((d = o(t)))) return e(d, n, a, f)
                            p = l(0)
                        }
                        if (s(p, "value")) {
                            if (!1 === p.writable || !h(f)) return !1
                            if ((c = r.f(f, n))) {
                                if (c.get || c.set || !1 === c.writable)
                                    return !1
                                ;(c.value = a), i.f(f, n, c)
                            } else i.f(f, n, l(0, a))
                            return !0
                        }
                        return void 0 !== p.set && (p.set.call(f, a), !0)
                    },
                })
            },
            3946: (e, t, n) => {
                var i = n(3816),
                    r = n(266),
                    o = n(9275).f,
                    s = n(616).f,
                    a = n(5364),
                    l = n(3218),
                    u = i.RegExp,
                    h = u,
                    c = u.prototype,
                    d = /a/g,
                    f = /a/g,
                    p = new u(d) !== d
                if (
                    n(7057) &&
                    (!p ||
                        n(4253)(function () {
                            return (
                                (f[n(6314)("match")] = !1),
                                u(d) != d || u(f) == f || "/a/i" != u(d, "i")
                            )
                        }))
                ) {
                    u = function (e, t) {
                        var n = this instanceof u,
                            i = a(e),
                            o = void 0 === t
                        return !n && i && e.constructor === u && o
                            ? e
                            : r(
                                  p
                                      ? new h(i && !o ? e.source : e, t)
                                      : h(
                                            (i = e instanceof u) ? e.source : e,
                                            i && o ? l.call(e) : t
                                        ),
                                  n ? this : c,
                                  u
                              )
                    }
                    for (
                        var v = function (e) {
                                ;(e in u) ||
                                    o(u, e, {
                                        configurable: !0,
                                        get: function () {
                                            return h[e]
                                        },
                                        set: function (t) {
                                            h[e] = t
                                        },
                                    })
                            },
                            g = s(h),
                            y = 0;
                        g.length > y;

                    )
                        v(g[y++])
                    ;(c.constructor = u),
                        (u.prototype = c),
                        n(7234)(i, "RegExp", u)
                }
                n(2974)("RegExp")
            },
            8269: (e, t, n) => {
                "use strict"
                var i = n(1165)
                n(2985)(
                    { target: "RegExp", proto: !0, forced: i !== /./.exec },
                    { exec: i }
                )
            },
            6774: (e, t, n) => {
                n(7057) &&
                    "g" != /./g.flags &&
                    n(9275).f(RegExp.prototype, "flags", {
                        configurable: !0,
                        get: n(3218),
                    })
            },
            1466: (e, t, n) => {
                "use strict"
                var i = n(7007),
                    r = n(875),
                    o = n(6793),
                    s = n(7787)
                n(8082)("match", 1, function (e, t, n, a) {
                    return [
                        function (n) {
                            var i = e(this),
                                r = null == n ? void 0 : n[t]
                            return void 0 !== r
                                ? r.call(n, i)
                                : new RegExp(n)[t](String(i))
                        },
                        function (e) {
                            var t = a(n, e, this)
                            if (t.done) return t.value
                            var l = i(e),
                                u = String(this)
                            if (!l.global) return s(l, u)
                            var h = l.unicode
                            l.lastIndex = 0
                            for (
                                var c, d = [], f = 0;
                                null !== (c = s(l, u));

                            ) {
                                var p = String(c[0])
                                ;(d[f] = p),
                                    "" === p &&
                                        (l.lastIndex = o(u, r(l.lastIndex), h)),
                                    f++
                            }
                            return 0 === f ? null : d
                        },
                    ]
                })
            },
            9357: (e, t, n) => {
                "use strict"
                var i = n(7007),
                    r = n(508),
                    o = n(875),
                    s = n(1467),
                    a = n(6793),
                    l = n(7787),
                    u = Math.max,
                    h = Math.min,
                    c = Math.floor,
                    d = /\$([$&`']|\d\d?|<[^>]*>)/g,
                    f = /\$([$&`']|\d\d?)/g
                n(8082)("replace", 2, function (e, t, n, p) {
                    return [
                        function (i, r) {
                            var o = e(this),
                                s = null == i ? void 0 : i[t]
                            return void 0 !== s
                                ? s.call(i, o, r)
                                : n.call(String(o), i, r)
                        },
                        function (e, t) {
                            var r = p(n, e, this, t)
                            if (r.done) return r.value
                            var c = i(e),
                                d = String(this),
                                f = "function" == typeof t
                            f || (t = String(t))
                            var g = c.global
                            if (g) {
                                var y = c.unicode
                                c.lastIndex = 0
                            }
                            for (var _ = []; ; ) {
                                var m = l(c, d)
                                if (null === m) break
                                if ((_.push(m), !g)) break
                                "" === String(m[0]) &&
                                    (c.lastIndex = a(d, o(c.lastIndex), y))
                            }
                            for (
                                var x, w = "", b = 0, E = 0;
                                E < _.length;
                                E++
                            ) {
                                m = _[E]
                                for (
                                    var T = String(m[0]),
                                        k = u(h(s(m.index), d.length), 0),
                                        S = [],
                                        A = 1;
                                    A < m.length;
                                    A++
                                )
                                    S.push(
                                        void 0 === (x = m[A]) ? x : String(x)
                                    )
                                var C = m.groups
                                if (f) {
                                    var O = [T].concat(S, k, d)
                                    void 0 !== C && O.push(C)
                                    var P = String(t.apply(void 0, O))
                                } else P = v(T, d, k, S, C, t)
                                k >= b &&
                                    ((w += d.slice(b, k) + P),
                                    (b = k + T.length))
                            }
                            return w + d.slice(b)
                        },
                    ]
                    function v(e, t, i, o, s, a) {
                        var l = i + e.length,
                            u = o.length,
                            h = f
                        return (
                            void 0 !== s && ((s = r(s)), (h = d)),
                            n.call(a, h, function (n, r) {
                                var a
                                switch (r.charAt(0)) {
                                    case "$":
                                        return "$"
                                    case "&":
                                        return e
                                    case "`":
                                        return t.slice(0, i)
                                    case "'":
                                        return t.slice(l)
                                    case "<":
                                        a = s[r.slice(1, -1)]
                                        break
                                    default:
                                        var h = +r
                                        if (0 === h) return n
                                        if (h > u) {
                                            var d = c(h / 10)
                                            return 0 === d
                                                ? n
                                                : d <= u
                                                ? void 0 === o[d - 1]
                                                    ? r.charAt(1)
                                                    : o[d - 1] + r.charAt(1)
                                                : n
                                        }
                                        a = o[h - 1]
                                }
                                return void 0 === a ? "" : a
                            })
                        )
                    }
                })
            },
            6142: (e, t, n) => {
                "use strict"
                var i = n(7007),
                    r = n(7195),
                    o = n(7787)
                n(8082)("search", 1, function (e, t, n, s) {
                    return [
                        function (n) {
                            var i = e(this),
                                r = null == n ? void 0 : n[t]
                            return void 0 !== r
                                ? r.call(n, i)
                                : new RegExp(n)[t](String(i))
                        },
                        function (e) {
                            var t = s(n, e, this)
                            if (t.done) return t.value
                            var a = i(e),
                                l = String(this),
                                u = a.lastIndex
                            r(u, 0) || (a.lastIndex = 0)
                            var h = o(a, l)
                            return (
                                r(a.lastIndex, u) || (a.lastIndex = u),
                                null === h ? -1 : h.index
                            )
                        },
                    ]
                })
            },
            1876: (e, t, n) => {
                "use strict"
                var i = n(5364),
                    r = n(7007),
                    o = n(8364),
                    s = n(6793),
                    a = n(875),
                    l = n(7787),
                    u = n(1165),
                    h = n(4253),
                    c = Math.min,
                    d = [].push,
                    f = 4294967295,
                    p = !h(function () {
                        RegExp(f, "y")
                    })
                n(8082)("split", 2, function (e, t, n, h) {
                    var v
                    return (
                        (v =
                            "c" == "abbc".split(/(b)*/)[1] ||
                            4 != "test".split(/(?:)/, -1).length ||
                            2 != "ab".split(/(?:ab)*/).length ||
                            4 != ".".split(/(.?)(.?)/).length ||
                            ".".split(/()()/).length > 1 ||
                            "".split(/.?/).length
                                ? function (e, t) {
                                      var r = String(this)
                                      if (void 0 === e && 0 === t) return []
                                      if (!i(e)) return n.call(r, e, t)
                                      for (
                                          var o,
                                              s,
                                              a,
                                              l = [],
                                              h =
                                                  (e.ignoreCase ? "i" : "") +
                                                  (e.multiline ? "m" : "") +
                                                  (e.unicode ? "u" : "") +
                                                  (e.sticky ? "y" : ""),
                                              c = 0,
                                              p = void 0 === t ? f : t >>> 0,
                                              v = new RegExp(e.source, h + "g");
                                          (o = u.call(v, r)) &&
                                          !(
                                              (s = v.lastIndex) > c &&
                                              (l.push(r.slice(c, o.index)),
                                              o.length > 1 &&
                                                  o.index < r.length &&
                                                  d.apply(l, o.slice(1)),
                                              (a = o[0].length),
                                              (c = s),
                                              l.length >= p)
                                          );

                                      )
                                          v.lastIndex === o.index &&
                                              v.lastIndex++
                                      return (
                                          c === r.length
                                              ? (!a && v.test("")) || l.push("")
                                              : l.push(r.slice(c)),
                                          l.length > p ? l.slice(0, p) : l
                                      )
                                  }
                                : "0".split(void 0, 0).length
                                ? function (e, t) {
                                      return void 0 === e && 0 === t
                                          ? []
                                          : n.call(this, e, t)
                                  }
                                : n),
                        [
                            function (n, i) {
                                var r = e(this),
                                    o = null == n ? void 0 : n[t]
                                return void 0 !== o
                                    ? o.call(n, r, i)
                                    : v.call(String(r), n, i)
                            },
                            function (e, t) {
                                var i = h(v, e, this, t, v !== n)
                                if (i.done) return i.value
                                var u = r(e),
                                    d = String(this),
                                    g = o(u, RegExp),
                                    y = u.unicode,
                                    _ =
                                        (u.ignoreCase ? "i" : "") +
                                        (u.multiline ? "m" : "") +
                                        (u.unicode ? "u" : "") +
                                        (p ? "y" : "g"),
                                    m = new g(
                                        p ? u : "^(?:" + u.source + ")",
                                        _
                                    ),
                                    x = void 0 === t ? f : t >>> 0
                                if (0 === x) return []
                                if (0 === d.length)
                                    return null === l(m, d) ? [d] : []
                                for (var w = 0, b = 0, E = []; b < d.length; ) {
                                    m.lastIndex = p ? b : 0
                                    var T,
                                        k = l(m, p ? d : d.slice(b))
                                    if (
                                        null === k ||
                                        (T = c(
                                            a(m.lastIndex + (p ? 0 : b)),
                                            d.length
                                        )) === w
                                    )
                                        b = s(d, b, y)
                                    else {
                                        if (
                                            (E.push(d.slice(w, b)),
                                            E.length === x)
                                        )
                                            return E
                                        for (var S = 1; S <= k.length - 1; S++)
                                            if ((E.push(k[S]), E.length === x))
                                                return E
                                        b = w = T
                                    }
                                }
                                return E.push(d.slice(w)), E
                            },
                        ]
                    )
                })
            },
            6108: (e, t, n) => {
                "use strict"
                n(6774)
                var i = n(7007),
                    r = n(3218),
                    o = n(7057),
                    s = "toString",
                    a = /./.toString,
                    l = function (e) {
                        n(7234)(RegExp.prototype, s, e, !0)
                    }
                n(4253)(function () {
                    return "/a/b" != a.call({ source: "a", flags: "b" })
                })
                    ? l(function () {
                          var e = i(this)
                          return "/".concat(
                              e.source,
                              "/",
                              "flags" in e
                                  ? e.flags
                                  : !o && e instanceof RegExp
                                  ? r.call(e)
                                  : void 0
                          )
                      })
                    : a.name != s &&
                      l(function () {
                          return a.call(this)
                      })
            },
            8184: (e, t, n) => {
                "use strict"
                var i = n(9824),
                    r = n(1616)
                e.exports = n(5795)(
                    "Set",
                    function (e) {
                        return function () {
                            return e(
                                this,
                                arguments.length > 0 ? arguments[0] : void 0
                            )
                        }
                    },
                    {
                        add: function (e) {
                            return i.def(
                                r(this, "Set"),
                                (e = 0 === e ? 0 : e),
                                e
                            )
                        },
                    },
                    i
                )
            },
            856: (e, t, n) => {
                "use strict"
                n(9395)("anchor", function (e) {
                    return function (t) {
                        return e(this, "a", "name", t)
                    }
                })
            },
            703: (e, t, n) => {
                "use strict"
                n(9395)("big", function (e) {
                    return function () {
                        return e(this, "big", "", "")
                    }
                })
            },
            1539: (e, t, n) => {
                "use strict"
                n(9395)("blink", function (e) {
                    return function () {
                        return e(this, "blink", "", "")
                    }
                })
            },
            5292: (e, t, n) => {
                "use strict"
                n(9395)("bold", function (e) {
                    return function () {
                        return e(this, "b", "", "")
                    }
                })
            },
            9539: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(4496)(!1)
                i(i.P, "String", {
                    codePointAt: function (e) {
                        return r(this, e)
                    },
                })
            },
            6620: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(875),
                    o = n(2094),
                    s = "endsWith",
                    a = "".endsWith
                i(i.P + i.F * n(8852)(s), "String", {
                    endsWith: function (e) {
                        var t = o(this, e, s),
                            n = arguments.length > 1 ? arguments[1] : void 0,
                            i = r(t.length),
                            l = void 0 === n ? i : Math.min(r(n), i),
                            u = String(e)
                        return a
                            ? a.call(t, u, l)
                            : t.slice(l - u.length, l) === u
                    },
                })
            },
            6629: (e, t, n) => {
                "use strict"
                n(9395)("fixed", function (e) {
                    return function () {
                        return e(this, "tt", "", "")
                    }
                })
            },
            3694: (e, t, n) => {
                "use strict"
                n(9395)("fontcolor", function (e) {
                    return function (t) {
                        return e(this, "font", "color", t)
                    }
                })
            },
            7648: (e, t, n) => {
                "use strict"
                n(9395)("fontsize", function (e) {
                    return function (t) {
                        return e(this, "font", "size", t)
                    }
                })
            },
            191: (e, t, n) => {
                var i = n(2985),
                    r = n(2337),
                    o = String.fromCharCode,
                    s = String.fromCodePoint
                i(i.S + i.F * (!!s && 1 != s.length), "String", {
                    fromCodePoint: function (e) {
                        for (
                            var t, n = [], i = arguments.length, s = 0;
                            i > s;

                        ) {
                            if (((t = +arguments[s++]), r(t, 1114111) !== t))
                                throw RangeError(
                                    t + " is not a valid code point"
                                )
                            n.push(
                                t < 65536
                                    ? o(t)
                                    : o(
                                          55296 + ((t -= 65536) >> 10),
                                          (t % 1024) + 56320
                                      )
                            )
                        }
                        return n.join("")
                    },
                })
            },
            2850: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(2094),
                    o = "includes"
                i(i.P + i.F * n(8852)(o), "String", {
                    includes: function (e) {
                        return !!~r(this, e, o).indexOf(
                            e,
                            arguments.length > 1 ? arguments[1] : void 0
                        )
                    },
                })
            },
            7795: (e, t, n) => {
                "use strict"
                n(9395)("italics", function (e) {
                    return function () {
                        return e(this, "i", "", "")
                    }
                })
            },
            9115: (e, t, n) => {
                "use strict"
                var i = n(4496)(!0)
                n(2923)(
                    String,
                    "String",
                    function (e) {
                        ;(this._t = String(e)), (this._i = 0)
                    },
                    function () {
                        var e,
                            t = this._t,
                            n = this._i
                        return n >= t.length
                            ? { value: void 0, done: !0 }
                            : ((e = i(t, n)),
                              (this._i += e.length),
                              { value: e, done: !1 })
                    }
                )
            },
            4531: (e, t, n) => {
                "use strict"
                n(9395)("link", function (e) {
                    return function (t) {
                        return e(this, "a", "href", t)
                    }
                })
            },
            8306: (e, t, n) => {
                var i = n(2985),
                    r = n(2110),
                    o = n(875)
                i(i.S, "String", {
                    raw: function (e) {
                        for (
                            var t = r(e.raw),
                                n = o(t.length),
                                i = arguments.length,
                                s = [],
                                a = 0;
                            n > a;

                        )
                            s.push(String(t[a++])),
                                a < i && s.push(String(arguments[a]))
                        return s.join("")
                    },
                })
            },
            823: (e, t, n) => {
                var i = n(2985)
                i(i.P, "String", { repeat: n(8595) })
            },
            3605: (e, t, n) => {
                "use strict"
                n(9395)("small", function (e) {
                    return function () {
                        return e(this, "small", "", "")
                    }
                })
            },
            7732: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(875),
                    o = n(2094),
                    s = "startsWith",
                    a = "".startsWith
                i(i.P + i.F * n(8852)(s), "String", {
                    startsWith: function (e) {
                        var t = o(this, e, s),
                            n = r(
                                Math.min(
                                    arguments.length > 1
                                        ? arguments[1]
                                        : void 0,
                                    t.length
                                )
                            ),
                            i = String(e)
                        return a
                            ? a.call(t, i, n)
                            : t.slice(n, n + i.length) === i
                    },
                })
            },
            6780: (e, t, n) => {
                "use strict"
                n(9395)("strike", function (e) {
                    return function () {
                        return e(this, "strike", "", "")
                    }
                })
            },
            9937: (e, t, n) => {
                "use strict"
                n(9395)("sub", function (e) {
                    return function () {
                        return e(this, "sub", "", "")
                    }
                })
            },
            511: (e, t, n) => {
                "use strict"
                n(9395)("sup", function (e) {
                    return function () {
                        return e(this, "sup", "", "")
                    }
                })
            },
            4564: (e, t, n) => {
                "use strict"
                n(9599)("trim", function (e) {
                    return function () {
                        return e(this, 3)
                    }
                })
            },
            5767: (e, t, n) => {
                "use strict"
                var i = n(3816),
                    r = n(9181),
                    o = n(7057),
                    s = n(2985),
                    a = n(7234),
                    l = n(4728).KEY,
                    u = n(4253),
                    h = n(3825),
                    c = n(2943),
                    d = n(3953),
                    f = n(6314),
                    p = n(8787),
                    v = n(6074),
                    g = n(5541),
                    y = n(4302),
                    _ = n(7007),
                    m = n(5286),
                    x = n(508),
                    w = n(2110),
                    b = n(1689),
                    E = n(681),
                    T = n(2503),
                    k = n(9327),
                    S = n(8693),
                    A = n(4548),
                    C = n(9275),
                    O = n(7184),
                    P = S.f,
                    R = C.f,
                    I = k.f,
                    M = i.Symbol,
                    L = i.JSON,
                    D = L && L.stringify,
                    N = f("_hidden"),
                    B = f("toPrimitive"),
                    F = {}.propertyIsEnumerable,
                    V = h("symbol-registry"),
                    z = h("symbols"),
                    G = h("op-symbols"),
                    U = Object.prototype,
                    j = "function" == typeof M && !!A.f,
                    X = i.QObject,
                    H = !X || !X.prototype || !X.prototype.findChild,
                    W =
                        o &&
                        u(function () {
                            return (
                                7 !=
                                T(
                                    R({}, "a", {
                                        get: function () {
                                            return R(this, "a", { value: 7 }).a
                                        },
                                    })
                                ).a
                            )
                        })
                            ? function (e, t, n) {
                                  var i = P(U, t)
                                  i && delete U[t],
                                      R(e, t, n),
                                      i && e !== U && R(U, t, i)
                              }
                            : R,
                    Y = function (e) {
                        var t = (z[e] = T(M.prototype))
                        return (t._k = e), t
                    },
                    q =
                        j && "symbol" == typeof M.iterator
                            ? function (e) {
                                  return "symbol" == typeof e
                              }
                            : function (e) {
                                  return e instanceof M
                              },
                    $ = function (e, t, n) {
                        return (
                            e === U && $(G, t, n),
                            _(e),
                            (t = b(t, !0)),
                            _(n),
                            r(z, t)
                                ? (n.enumerable
                                      ? (r(e, N) && e[N][t] && (e[N][t] = !1),
                                        (n = T(n, { enumerable: E(0, !1) })))
                                      : (r(e, N) || R(e, N, E(1, {})),
                                        (e[N][t] = !0)),
                                  W(e, t, n))
                                : R(e, t, n)
                        )
                    },
                    Z = function (e, t) {
                        _(e)
                        for (
                            var n, i = g((t = w(t))), r = 0, o = i.length;
                            o > r;

                        )
                            $(e, (n = i[r++]), t[n])
                        return e
                    },
                    K = function (e) {
                        var t = F.call(this, (e = b(e, !0)))
                        return (
                            !(this === U && r(z, e) && !r(G, e)) &&
                            (!(
                                t ||
                                !r(this, e) ||
                                !r(z, e) ||
                                (r(this, N) && this[N][e])
                            ) ||
                                t)
                        )
                    },
                    J = function (e, t) {
                        if (
                            ((e = w(e)),
                            (t = b(t, !0)),
                            e !== U || !r(z, t) || r(G, t))
                        ) {
                            var n = P(e, t)
                            return (
                                !n ||
                                    !r(z, t) ||
                                    (r(e, N) && e[N][t]) ||
                                    (n.enumerable = !0),
                                n
                            )
                        }
                    },
                    Q = function (e) {
                        for (var t, n = I(w(e)), i = [], o = 0; n.length > o; )
                            r(z, (t = n[o++])) || t == N || t == l || i.push(t)
                        return i
                    },
                    ee = function (e) {
                        for (
                            var t,
                                n = e === U,
                                i = I(n ? G : w(e)),
                                o = [],
                                s = 0;
                            i.length > s;

                        )
                            !r(z, (t = i[s++])) ||
                                (n && !r(U, t)) ||
                                o.push(z[t])
                        return o
                    }
                j ||
                    (a(
                        (M = function () {
                            if (this instanceof M)
                                throw TypeError("Symbol is not a constructor!")
                            var e = d(
                                    arguments.length > 0 ? arguments[0] : void 0
                                ),
                                t = function (n) {
                                    this === U && t.call(G, n),
                                        r(this, N) &&
                                            r(this[N], e) &&
                                            (this[N][e] = !1),
                                        W(this, e, E(1, n))
                                }
                            return (
                                o && H && W(U, e, { configurable: !0, set: t }),
                                Y(e)
                            )
                        }).prototype,
                        "toString",
                        function () {
                            return this._k
                        }
                    ),
                    (S.f = J),
                    (C.f = $),
                    (n(616).f = k.f = Q),
                    (n(4682).f = K),
                    (A.f = ee),
                    o && !n(4461) && a(U, "propertyIsEnumerable", K, !0),
                    (p.f = function (e) {
                        return Y(f(e))
                    })),
                    s(s.G + s.W + s.F * !j, { Symbol: M })
                for (
                    var te =
                            "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(
                                ","
                            ),
                        ne = 0;
                    te.length > ne;

                )
                    f(te[ne++])
                for (var ie = O(f.store), re = 0; ie.length > re; ) v(ie[re++])
                s(s.S + s.F * !j, "Symbol", {
                    for: function (e) {
                        return r(V, (e += "")) ? V[e] : (V[e] = M(e))
                    },
                    keyFor: function (e) {
                        if (!q(e)) throw TypeError(e + " is not a symbol!")
                        for (var t in V) if (V[t] === e) return t
                    },
                    useSetter: function () {
                        H = !0
                    },
                    useSimple: function () {
                        H = !1
                    },
                }),
                    s(s.S + s.F * !j, "Object", {
                        create: function (e, t) {
                            return void 0 === t ? T(e) : Z(T(e), t)
                        },
                        defineProperty: $,
                        defineProperties: Z,
                        getOwnPropertyDescriptor: J,
                        getOwnPropertyNames: Q,
                        getOwnPropertySymbols: ee,
                    })
                var oe = u(function () {
                    A.f(1)
                })
                s(s.S + s.F * oe, "Object", {
                    getOwnPropertySymbols: function (e) {
                        return A.f(x(e))
                    },
                }),
                    L &&
                        s(
                            s.S +
                                s.F *
                                    (!j ||
                                        u(function () {
                                            var e = M()
                                            return (
                                                "[null]" != D([e]) ||
                                                "{}" != D({ a: e }) ||
                                                "{}" != D(Object(e))
                                            )
                                        })),
                            "JSON",
                            {
                                stringify: function (e) {
                                    for (
                                        var t, n, i = [e], r = 1;
                                        arguments.length > r;

                                    )
                                        i.push(arguments[r++])
                                    if (
                                        ((n = t = i[1]),
                                        (m(t) || void 0 !== e) && !q(e))
                                    )
                                        return (
                                            y(t) ||
                                                (t = function (e, t) {
                                                    if (
                                                        ("function" ==
                                                            typeof n &&
                                                            (t = n.call(
                                                                this,
                                                                e,
                                                                t
                                                            )),
                                                        !q(t))
                                                    )
                                                        return t
                                                }),
                                            (i[1] = t),
                                            D.apply(L, i)
                                        )
                                },
                            }
                        ),
                    M.prototype[B] ||
                        n(7728)(M.prototype, B, M.prototype.valueOf),
                    c(M, "Symbol"),
                    c(Math, "Math", !0),
                    c(i.JSON, "JSON", !0)
            },
            142: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(9383),
                    o = n(1125),
                    s = n(7007),
                    a = n(2337),
                    l = n(875),
                    u = n(5286),
                    h = n(3816).ArrayBuffer,
                    c = n(8364),
                    d = o.ArrayBuffer,
                    f = o.DataView,
                    p = r.ABV && h.isView,
                    v = d.prototype.slice,
                    g = r.VIEW,
                    y = "ArrayBuffer"
                i(i.G + i.W + i.F * (h !== d), { ArrayBuffer: d }),
                    i(i.S + i.F * !r.CONSTR, y, {
                        isView: function (e) {
                            return (p && p(e)) || (u(e) && g in e)
                        },
                    }),
                    i(
                        i.P +
                            i.U +
                            i.F *
                                n(4253)(function () {
                                    return !new d(2).slice(1, void 0).byteLength
                                }),
                        y,
                        {
                            slice: function (e, t) {
                                if (void 0 !== v && void 0 === t)
                                    return v.call(s(this), e)
                                for (
                                    var n = s(this).byteLength,
                                        i = a(e, n),
                                        r = a(void 0 === t ? n : t, n),
                                        o = new (c(this, d))(l(r - i)),
                                        u = new f(this),
                                        h = new f(o),
                                        p = 0;
                                    i < r;

                                )
                                    h.setUint8(p++, u.getUint8(i++))
                                return o
                            },
                        }
                    ),
                    n(2974)(y)
            },
            1786: (e, t, n) => {
                var i = n(2985)
                i(i.G + i.W + i.F * !n(9383).ABV, {
                    DataView: n(1125).DataView,
                })
            },
            162: (e, t, n) => {
                n(8440)("Float32", 4, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            3834: (e, t, n) => {
                n(8440)("Float64", 8, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            4821: (e, t, n) => {
                n(8440)("Int16", 2, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            1303: (e, t, n) => {
                n(8440)("Int32", 4, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            5368: (e, t, n) => {
                n(8440)("Int8", 1, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            9103: (e, t, n) => {
                n(8440)("Uint16", 2, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            3318: (e, t, n) => {
                n(8440)("Uint32", 4, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            6964: (e, t, n) => {
                n(8440)("Uint8", 1, function (e) {
                    return function (t, n, i) {
                        return e(this, t, n, i)
                    }
                })
            },
            2152: (e, t, n) => {
                n(8440)(
                    "Uint8",
                    1,
                    function (e) {
                        return function (t, n, i) {
                            return e(this, t, n, i)
                        }
                    },
                    !0
                )
            },
            147: (e, t, n) => {
                "use strict"
                var i,
                    r = n(3816),
                    o = n(50)(0),
                    s = n(7234),
                    a = n(4728),
                    l = n(5345),
                    u = n(3657),
                    h = n(5286),
                    c = n(1616),
                    d = n(1616),
                    f = !r.ActiveXObject && "ActiveXObject" in r,
                    p = "WeakMap",
                    v = a.getWeak,
                    g = Object.isExtensible,
                    y = u.ufstore,
                    _ = function (e) {
                        return function () {
                            return e(
                                this,
                                arguments.length > 0 ? arguments[0] : void 0
                            )
                        }
                    },
                    m = {
                        get: function (e) {
                            if (h(e)) {
                                var t = v(e)
                                return !0 === t
                                    ? y(c(this, p)).get(e)
                                    : t
                                    ? t[this._i]
                                    : void 0
                            }
                        },
                        set: function (e, t) {
                            return u.def(c(this, p), e, t)
                        },
                    },
                    x = (e.exports = n(5795)(p, _, m, u, !0, !0))
                d &&
                    f &&
                    (l((i = u.getConstructor(_, p)).prototype, m),
                    (a.NEED = !0),
                    o(["delete", "has", "get", "set"], function (e) {
                        var t = x.prototype,
                            n = t[e]
                        s(t, e, function (t, r) {
                            if (h(t) && !g(t)) {
                                this._f || (this._f = new i())
                                var o = this._f[e](t, r)
                                return "set" == e ? this : o
                            }
                            return n.call(this, t, r)
                        })
                    }))
            },
            9192: (e, t, n) => {
                "use strict"
                var i = n(3657),
                    r = n(1616),
                    o = "WeakSet"
                n(5795)(
                    o,
                    function (e) {
                        return function () {
                            return e(
                                this,
                                arguments.length > 0 ? arguments[0] : void 0
                            )
                        }
                    },
                    {
                        add: function (e) {
                            return i.def(r(this, o), e, !0)
                        },
                    },
                    i,
                    !1,
                    !0
                )
            },
            1268: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(3325),
                    o = n(508),
                    s = n(875),
                    a = n(4963),
                    l = n(6886)
                i(i.P, "Array", {
                    flatMap: function (e) {
                        var t,
                            n,
                            i = o(this)
                        return (
                            a(e),
                            (t = s(i.length)),
                            (n = l(i, 0)),
                            r(n, i, i, t, 0, 1, e, arguments[1]),
                            n
                        )
                    },
                }),
                    n(7722)("flatMap")
            },
            2773: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(9315)(!0)
                i(i.P, "Array", {
                    includes: function (e) {
                        return r(
                            this,
                            e,
                            arguments.length > 1 ? arguments[1] : void 0
                        )
                    },
                }),
                    n(7722)("includes")
            },
            3276: (e, t, n) => {
                var i = n(2985),
                    r = n(1131)(!0)
                i(i.S, "Object", {
                    entries: function (e) {
                        return r(e)
                    },
                })
            },
            8351: (e, t, n) => {
                var i = n(2985),
                    r = n(7643),
                    o = n(2110),
                    s = n(8693),
                    a = n(2811)
                i(i.S, "Object", {
                    getOwnPropertyDescriptors: function (e) {
                        for (
                            var t,
                                n,
                                i = o(e),
                                l = s.f,
                                u = r(i),
                                h = {},
                                c = 0;
                            u.length > c;

                        )
                            void 0 !== (n = l(i, (t = u[c++]))) && a(h, t, n)
                        return h
                    },
                })
            },
            6409: (e, t, n) => {
                var i = n(2985),
                    r = n(1131)(!1)
                i(i.S, "Object", {
                    values: function (e) {
                        return r(e)
                    },
                })
            },
            9865: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(5645),
                    o = n(3816),
                    s = n(8364),
                    a = n(94)
                i(i.P + i.R, "Promise", {
                    finally: function (e) {
                        var t = s(this, r.Promise || o.Promise),
                            n = "function" == typeof e
                        return this.then(
                            n
                                ? function (n) {
                                      return a(t, e()).then(function () {
                                          return n
                                      })
                                  }
                                : e,
                            n
                                ? function (n) {
                                      return a(t, e()).then(function () {
                                          throw n
                                      })
                                  }
                                : e
                        )
                    },
                })
            },
            2770: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(5442),
                    o = n(575),
                    s = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(
                        o
                    )
                i(i.P + i.F * s, "String", {
                    padEnd: function (e) {
                        return r(
                            this,
                            e,
                            arguments.length > 1 ? arguments[1] : void 0,
                            !1
                        )
                    },
                })
            },
            1784: (e, t, n) => {
                "use strict"
                var i = n(2985),
                    r = n(5442),
                    o = n(575),
                    s = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(
                        o
                    )
                i(i.P + i.F * s, "String", {
                    padStart: function (e) {
                        return r(
                            this,
                            e,
                            arguments.length > 1 ? arguments[1] : void 0,
                            !0
                        )
                    },
                })
            },
            5869: (e, t, n) => {
                "use strict"
                n(9599)(
                    "trimLeft",
                    function (e) {
                        return function () {
                            return e(this, 1)
                        }
                    },
                    "trimStart"
                )
            },
            4325: (e, t, n) => {
                "use strict"
                n(9599)(
                    "trimRight",
                    function (e) {
                        return function () {
                            return e(this, 2)
                        }
                    },
                    "trimEnd"
                )
            },
            9665: (e, t, n) => {
                n(6074)("asyncIterator")
            },
            1181: (e, t, n) => {
                for (
                    var i = n(6997),
                        r = n(7184),
                        o = n(7234),
                        s = n(3816),
                        a = n(7728),
                        l = n(2803),
                        u = n(6314),
                        h = u("iterator"),
                        c = u("toStringTag"),
                        d = l.Array,
                        f = {
                            CSSRuleList: !0,
                            CSSStyleDeclaration: !1,
                            CSSValueList: !1,
                            ClientRectList: !1,
                            DOMRectList: !1,
                            DOMStringList: !1,
                            DOMTokenList: !0,
                            DataTransferItemList: !1,
                            FileList: !1,
                            HTMLAllCollection: !1,
                            HTMLCollection: !1,
                            HTMLFormElement: !1,
                            HTMLSelectElement: !1,
                            MediaList: !0,
                            MimeTypeArray: !1,
                            NamedNodeMap: !1,
                            NodeList: !0,
                            PaintRequestList: !1,
                            Plugin: !1,
                            PluginArray: !1,
                            SVGLengthList: !1,
                            SVGNumberList: !1,
                            SVGPathSegList: !1,
                            SVGPointList: !1,
                            SVGStringList: !1,
                            SVGTransformList: !1,
                            SourceBufferList: !1,
                            StyleSheetList: !0,
                            TextTrackCueList: !1,
                            TextTrackList: !1,
                            TouchList: !1,
                        },
                        p = r(f),
                        v = 0;
                    v < p.length;
                    v++
                ) {
                    var g,
                        y = p[v],
                        _ = f[y],
                        m = s[y],
                        x = m && m.prototype
                    if (
                        x &&
                        (x[h] || a(x, h, d), x[c] || a(x, c, y), (l[y] = d), _)
                    )
                        for (g in i) x[g] || o(x, g, i[g], !0)
                }
            },
            4633: (e, t, n) => {
                var i = n(2985),
                    r = n(4193)
                i(i.G + i.B, { setImmediate: r.set, clearImmediate: r.clear })
            },
            2564: (e, t, n) => {
                var i = n(3816),
                    r = n(2985),
                    o = n(575),
                    s = [].slice,
                    a = /MSIE .\./.test(o),
                    l = function (e) {
                        return function (t, n) {
                            var i = arguments.length > 2,
                                r = !!i && s.call(arguments, 2)
                            return e(
                                i
                                    ? function () {
                                          ;("function" == typeof t
                                              ? t
                                              : Function(t)
                                          ).apply(this, r)
                                      }
                                    : t,
                                n
                            )
                        }
                    }
                r(r.G + r.B + r.F * a, {
                    setTimeout: l(i.setTimeout),
                    setInterval: l(i.setInterval),
                })
            },
            6337: (e, t, n) => {
                n(2564), n(4633), n(1181), (e.exports = n(5645))
            },
            1424: (e, t, n) => {
                "use strict"
                n.d(t, { Z: () => a })
                var i = n(8081),
                    r = n.n(i),
                    o = n(3645),
                    s = n.n(o)()(r())
                s.push([
                    e.id,
                    "body {\n\n    min-height: 100vh;\n    background-color: black;\n    color: white;\n\n    /* Allow mouse dragging. */\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n\n    /* disable touch panning/zooming */\n    -ms-touch-action: none;\n    touch-action: none;\n\n    /* Allow canvas to hit the edges of the browser viewport. */\n    margin: 0;\n}\n\n.main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n",
                    "",
                ])
                const a = s
            },
            3645: e => {
                "use strict"
                e.exports = function (e) {
                    var t = []
                    return (
                        (t.toString = function () {
                            return this.map(function (t) {
                                var n = "",
                                    i = void 0 !== t[5]
                                return (
                                    t[4] &&
                                        (n += "@supports (".concat(
                                            t[4],
                                            ") {"
                                        )),
                                    t[2] && (n += "@media ".concat(t[2], " {")),
                                    i &&
                                        (n += "@layer".concat(
                                            t[5].length > 0
                                                ? " ".concat(t[5])
                                                : "",
                                            " {"
                                        )),
                                    (n += e(t)),
                                    i && (n += "}"),
                                    t[2] && (n += "}"),
                                    t[4] && (n += "}"),
                                    n
                                )
                            }).join("")
                        }),
                        (t.i = function (e, n, i, r, o) {
                            "string" == typeof e && (e = [[null, e, void 0]])
                            var s = {}
                            if (i)
                                for (var a = 0; a < this.length; a++) {
                                    var l = this[a][0]
                                    null != l && (s[l] = !0)
                                }
                            for (var u = 0; u < e.length; u++) {
                                var h = [].concat(e[u])
                                ;(i && s[h[0]]) ||
                                    (void 0 !== o &&
                                        (void 0 === h[5] ||
                                            (h[1] = "@layer"
                                                .concat(
                                                    h[5].length > 0
                                                        ? " ".concat(h[5])
                                                        : "",
                                                    " {"
                                                )
                                                .concat(h[1], "}")),
                                        (h[5] = o)),
                                    n &&
                                        (h[2]
                                            ? ((h[1] = "@media "
                                                  .concat(h[2], " {")
                                                  .concat(h[1], "}")),
                                              (h[2] = n))
                                            : (h[2] = n)),
                                    r &&
                                        (h[4]
                                            ? ((h[1] = "@supports ("
                                                  .concat(h[4], ") {")
                                                  .concat(h[1], "}")),
                                              (h[4] = r))
                                            : (h[4] = "".concat(r))),
                                    t.push(h))
                            }
                        }),
                        t
                    )
                }
            },
            8081: e => {
                "use strict"
                e.exports = function (e) {
                    return e[1]
                }
            },
            5666: e => {
                var t = (function (e) {
                    "use strict"
                    var t,
                        n = Object.prototype,
                        i = n.hasOwnProperty,
                        r = "function" == typeof Symbol ? Symbol : {},
                        o = r.iterator || "@@iterator",
                        s = r.asyncIterator || "@@asyncIterator",
                        a = r.toStringTag || "@@toStringTag"
                    function l(e, t, n) {
                        return (
                            Object.defineProperty(e, t, {
                                value: n,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0,
                            }),
                            e[t]
                        )
                    }
                    try {
                        l({}, "")
                    } catch (e) {
                        l = function (e, t, n) {
                            return (e[t] = n)
                        }
                    }
                    function u(e, t, n, i) {
                        var r = t && t.prototype instanceof g ? t : g,
                            o = Object.create(r.prototype),
                            s = new C(i || [])
                        return (
                            (o._invoke = (function (e, t, n) {
                                var i = c
                                return function (r, o) {
                                    if (i === f)
                                        throw new Error(
                                            "Generator is already running"
                                        )
                                    if (i === p) {
                                        if ("throw" === r) throw o
                                        return P()
                                    }
                                    for (n.method = r, n.arg = o; ; ) {
                                        var s = n.delegate
                                        if (s) {
                                            var a = k(s, n)
                                            if (a) {
                                                if (a === v) continue
                                                return a
                                            }
                                        }
                                        if ("next" === n.method)
                                            n.sent = n._sent = n.arg
                                        else if ("throw" === n.method) {
                                            if (i === c) throw ((i = p), n.arg)
                                            n.dispatchException(n.arg)
                                        } else
                                            "return" === n.method &&
                                                n.abrupt("return", n.arg)
                                        i = f
                                        var l = h(e, t, n)
                                        if ("normal" === l.type) {
                                            if (
                                                ((i = n.done ? p : d),
                                                l.arg === v)
                                            )
                                                continue
                                            return {
                                                value: l.arg,
                                                done: n.done,
                                            }
                                        }
                                        "throw" === l.type &&
                                            ((i = p),
                                            (n.method = "throw"),
                                            (n.arg = l.arg))
                                    }
                                }
                            })(e, n, s)),
                            o
                        )
                    }
                    function h(e, t, n) {
                        try {
                            return { type: "normal", arg: e.call(t, n) }
                        } catch (e) {
                            return { type: "throw", arg: e }
                        }
                    }
                    e.wrap = u
                    var c = "suspendedStart",
                        d = "suspendedYield",
                        f = "executing",
                        p = "completed",
                        v = {}
                    function g() {}
                    function y() {}
                    function _() {}
                    var m = {}
                    l(m, o, function () {
                        return this
                    })
                    var x = Object.getPrototypeOf,
                        w = x && x(x(O([])))
                    w && w !== n && i.call(w, o) && (m = w)
                    var b = (_.prototype = g.prototype = Object.create(m))
                    function E(e) {
                        ;["next", "throw", "return"].forEach(function (t) {
                            l(e, t, function (e) {
                                return this._invoke(t, e)
                            })
                        })
                    }
                    function T(e, t) {
                        function n(r, o, s, a) {
                            var l = h(e[r], e, o)
                            if ("throw" !== l.type) {
                                var u = l.arg,
                                    c = u.value
                                return c &&
                                    "object" == typeof c &&
                                    i.call(c, "__await")
                                    ? t.resolve(c.__await).then(
                                          function (e) {
                                              n("next", e, s, a)
                                          },
                                          function (e) {
                                              n("throw", e, s, a)
                                          }
                                      )
                                    : t.resolve(c).then(
                                          function (e) {
                                              ;(u.value = e), s(u)
                                          },
                                          function (e) {
                                              return n("throw", e, s, a)
                                          }
                                      )
                            }
                            a(l.arg)
                        }
                        var r
                        this._invoke = function (e, i) {
                            function o() {
                                return new t(function (t, r) {
                                    n(e, i, t, r)
                                })
                            }
                            return (r = r ? r.then(o, o) : o())
                        }
                    }
                    function k(e, n) {
                        var i = e.iterator[n.method]
                        if (i === t) {
                            if (((n.delegate = null), "throw" === n.method)) {
                                if (
                                    e.iterator.return &&
                                    ((n.method = "return"),
                                    (n.arg = t),
                                    k(e, n),
                                    "throw" === n.method)
                                )
                                    return v
                                ;(n.method = "throw"),
                                    (n.arg = new TypeError(
                                        "The iterator does not provide a 'throw' method"
                                    ))
                            }
                            return v
                        }
                        var r = h(i, e.iterator, n.arg)
                        if ("throw" === r.type)
                            return (
                                (n.method = "throw"),
                                (n.arg = r.arg),
                                (n.delegate = null),
                                v
                            )
                        var o = r.arg
                        return o
                            ? o.done
                                ? ((n[e.resultName] = o.value),
                                  (n.next = e.nextLoc),
                                  "return" !== n.method &&
                                      ((n.method = "next"), (n.arg = t)),
                                  (n.delegate = null),
                                  v)
                                : o
                            : ((n.method = "throw"),
                              (n.arg = new TypeError(
                                  "iterator result is not an object"
                              )),
                              (n.delegate = null),
                              v)
                    }
                    function S(e) {
                        var t = { tryLoc: e[0] }
                        1 in e && (t.catchLoc = e[1]),
                            2 in e &&
                                ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                            this.tryEntries.push(t)
                    }
                    function A(e) {
                        var t = e.completion || {}
                        ;(t.type = "normal"), delete t.arg, (e.completion = t)
                    }
                    function C(e) {
                        ;(this.tryEntries = [{ tryLoc: "root" }]),
                            e.forEach(S, this),
                            this.reset(!0)
                    }
                    function O(e) {
                        if (e) {
                            var n = e[o]
                            if (n) return n.call(e)
                            if ("function" == typeof e.next) return e
                            if (!isNaN(e.length)) {
                                var r = -1,
                                    s = function n() {
                                        for (; ++r < e.length; )
                                            if (i.call(e, r))
                                                return (
                                                    (n.value = e[r]),
                                                    (n.done = !1),
                                                    n
                                                )
                                        return (n.value = t), (n.done = !0), n
                                    }
                                return (s.next = s)
                            }
                        }
                        return { next: P }
                    }
                    function P() {
                        return { value: t, done: !0 }
                    }
                    return (
                        (y.prototype = _),
                        l(b, "constructor", _),
                        l(_, "constructor", y),
                        (y.displayName = l(_, a, "GeneratorFunction")),
                        (e.isGeneratorFunction = function (e) {
                            var t = "function" == typeof e && e.constructor
                            return (
                                !!t &&
                                (t === y ||
                                    "GeneratorFunction" ===
                                        (t.displayName || t.name))
                            )
                        }),
                        (e.mark = function (e) {
                            return (
                                Object.setPrototypeOf
                                    ? Object.setPrototypeOf(e, _)
                                    : ((e.__proto__ = _),
                                      l(e, a, "GeneratorFunction")),
                                (e.prototype = Object.create(b)),
                                e
                            )
                        }),
                        (e.awrap = function (e) {
                            return { __await: e }
                        }),
                        E(T.prototype),
                        l(T.prototype, s, function () {
                            return this
                        }),
                        (e.AsyncIterator = T),
                        (e.async = function (t, n, i, r, o) {
                            void 0 === o && (o = Promise)
                            var s = new T(u(t, n, i, r), o)
                            return e.isGeneratorFunction(n)
                                ? s
                                : s.next().then(function (e) {
                                      return e.done ? e.value : s.next()
                                  })
                        }),
                        E(b),
                        l(b, a, "Generator"),
                        l(b, o, function () {
                            return this
                        }),
                        l(b, "toString", function () {
                            return "[object Generator]"
                        }),
                        (e.keys = function (e) {
                            var t = []
                            for (var n in e) t.push(n)
                            return (
                                t.reverse(),
                                function n() {
                                    for (; t.length; ) {
                                        var i = t.pop()
                                        if (i in e)
                                            return (
                                                (n.value = i), (n.done = !1), n
                                            )
                                    }
                                    return (n.done = !0), n
                                }
                            )
                        }),
                        (e.values = O),
                        (C.prototype = {
                            constructor: C,
                            reset: function (e) {
                                if (
                                    ((this.prev = 0),
                                    (this.next = 0),
                                    (this.sent = this._sent = t),
                                    (this.done = !1),
                                    (this.delegate = null),
                                    (this.method = "next"),
                                    (this.arg = t),
                                    this.tryEntries.forEach(A),
                                    !e)
                                )
                                    for (var n in this)
                                        "t" === n.charAt(0) &&
                                            i.call(this, n) &&
                                            !isNaN(+n.slice(1)) &&
                                            (this[n] = t)
                            },
                            stop: function () {
                                this.done = !0
                                var e = this.tryEntries[0].completion
                                if ("throw" === e.type) throw e.arg
                                return this.rval
                            },
                            dispatchException: function (e) {
                                if (this.done) throw e
                                var n = this
                                function r(i, r) {
                                    return (
                                        (a.type = "throw"),
                                        (a.arg = e),
                                        (n.next = i),
                                        r && ((n.method = "next"), (n.arg = t)),
                                        !!r
                                    )
                                }
                                for (
                                    var o = this.tryEntries.length - 1;
                                    o >= 0;
                                    --o
                                ) {
                                    var s = this.tryEntries[o],
                                        a = s.completion
                                    if ("root" === s.tryLoc) return r("end")
                                    if (s.tryLoc <= this.prev) {
                                        var l = i.call(s, "catchLoc"),
                                            u = i.call(s, "finallyLoc")
                                        if (l && u) {
                                            if (this.prev < s.catchLoc)
                                                return r(s.catchLoc, !0)
                                            if (this.prev < s.finallyLoc)
                                                return r(s.finallyLoc)
                                        } else if (l) {
                                            if (this.prev < s.catchLoc)
                                                return r(s.catchLoc, !0)
                                        } else {
                                            if (!u)
                                                throw new Error(
                                                    "try statement without catch or finally"
                                                )
                                            if (this.prev < s.finallyLoc)
                                                return r(s.finallyLoc)
                                        }
                                    }
                                }
                            },
                            abrupt: function (e, t) {
                                for (
                                    var n = this.tryEntries.length - 1;
                                    n >= 0;
                                    --n
                                ) {
                                    var r = this.tryEntries[n]
                                    if (
                                        r.tryLoc <= this.prev &&
                                        i.call(r, "finallyLoc") &&
                                        this.prev < r.finallyLoc
                                    ) {
                                        var o = r
                                        break
                                    }
                                }
                                o &&
                                    ("break" === e || "continue" === e) &&
                                    o.tryLoc <= t &&
                                    t <= o.finallyLoc &&
                                    (o = null)
                                var s = o ? o.completion : {}
                                return (
                                    (s.type = e),
                                    (s.arg = t),
                                    o
                                        ? ((this.method = "next"),
                                          (this.next = o.finallyLoc),
                                          v)
                                        : this.complete(s)
                                )
                            },
                            complete: function (e, t) {
                                if ("throw" === e.type) throw e.arg
                                return (
                                    "break" === e.type || "continue" === e.type
                                        ? (this.next = e.arg)
                                        : "return" === e.type
                                        ? ((this.rval = this.arg = e.arg),
                                          (this.method = "return"),
                                          (this.next = "end"))
                                        : "normal" === e.type &&
                                          t &&
                                          (this.next = t),
                                    v
                                )
                            },
                            finish: function (e) {
                                for (
                                    var t = this.tryEntries.length - 1;
                                    t >= 0;
                                    --t
                                ) {
                                    var n = this.tryEntries[t]
                                    if (n.finallyLoc === e)
                                        return (
                                            this.complete(
                                                n.completion,
                                                n.afterLoc
                                            ),
                                            A(n),
                                            v
                                        )
                                }
                            },
                            catch: function (e) {
                                for (
                                    var t = this.tryEntries.length - 1;
                                    t >= 0;
                                    --t
                                ) {
                                    var n = this.tryEntries[t]
                                    if (n.tryLoc === e) {
                                        var i = n.completion
                                        if ("throw" === i.type) {
                                            var r = i.arg
                                            A(n)
                                        }
                                        return r
                                    }
                                }
                                throw new Error("illegal catch attempt")
                            },
                            delegateYield: function (e, n, i) {
                                return (
                                    (this.delegate = {
                                        iterator: O(e),
                                        resultName: n,
                                        nextLoc: i,
                                    }),
                                    "next" === this.method && (this.arg = t),
                                    v
                                )
                            },
                        }),
                        e
                    )
                })(e.exports)
                try {
                    regeneratorRuntime = t
                } catch (e) {
                    "object" == typeof globalThis
                        ? (globalThis.regeneratorRuntime = t)
                        : Function("r", "regeneratorRuntime = r")(t)
                }
            },
            3379: e => {
                "use strict"
                var t = []
                function n(e) {
                    for (var n = -1, i = 0; i < t.length; i++)
                        if (t[i].identifier === e) {
                            n = i
                            break
                        }
                    return n
                }
                function i(e, i) {
                    for (var o = {}, s = [], a = 0; a < e.length; a++) {
                        var l = e[a],
                            u = i.base ? l[0] + i.base : l[0],
                            h = o[u] || 0,
                            c = "".concat(u, " ").concat(h)
                        o[u] = h + 1
                        var d = n(c),
                            f = {
                                css: l[1],
                                media: l[2],
                                sourceMap: l[3],
                                supports: l[4],
                                layer: l[5],
                            }
                        if (-1 !== d) t[d].references++, t[d].updater(f)
                        else {
                            var p = r(f, i)
                            ;(i.byIndex = a),
                                t.splice(a, 0, {
                                    identifier: c,
                                    updater: p,
                                    references: 1,
                                })
                        }
                        s.push(c)
                    }
                    return s
                }
                function r(e, t) {
                    var n = t.domAPI(t)
                    return (
                        n.update(e),
                        function (t) {
                            if (t) {
                                if (
                                    t.css === e.css &&
                                    t.media === e.media &&
                                    t.sourceMap === e.sourceMap &&
                                    t.supports === e.supports &&
                                    t.layer === e.layer
                                )
                                    return
                                n.update((e = t))
                            } else n.remove()
                        }
                    )
                }
                e.exports = function (e, r) {
                    var o = i((e = e || []), (r = r || {}))
                    return function (e) {
                        e = e || []
                        for (var s = 0; s < o.length; s++) {
                            var a = n(o[s])
                            t[a].references--
                        }
                        for (var l = i(e, r), u = 0; u < o.length; u++) {
                            var h = n(o[u])
                            0 === t[h].references &&
                                (t[h].updater(), t.splice(h, 1))
                        }
                        o = l
                    }
                }
            },
            569: e => {
                "use strict"
                var t = {}
                e.exports = function (e, n) {
                    var i = (function (e) {
                        if (void 0 === t[e]) {
                            var n = document.querySelector(e)
                            if (
                                window.HTMLIFrameElement &&
                                n instanceof window.HTMLIFrameElement
                            )
                                try {
                                    n = n.contentDocument.head
                                } catch (e) {
                                    n = null
                                }
                            t[e] = n
                        }
                        return t[e]
                    })(e)
                    if (!i)
                        throw new Error(
                            "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."
                        )
                    i.appendChild(n)
                }
            },
            609: e => {
                "use strict"
                e.exports = function (e) {
                    var t = document.createElement("style")
                    return (
                        e.setAttributes(t, e.attributes),
                        e.insert(t, e.options),
                        t
                    )
                }
            },
            3565: (e, t, n) => {
                "use strict"
                e.exports = function (e) {
                    var t = n.nc
                    t && e.setAttribute("nonce", t)
                }
            },
            3380: e => {
                "use strict"
                e.exports = function (e) {
                    var t = e.insertStyleElement(e)
                    return {
                        update: function (n) {
                            !(function (e, t, n) {
                                var i = ""
                                n.supports &&
                                    (i += "@supports (".concat(
                                        n.supports,
                                        ") {"
                                    )),
                                    n.media &&
                                        (i += "@media ".concat(n.media, " {"))
                                var r = void 0 !== n.layer
                                r &&
                                    (i += "@layer".concat(
                                        n.layer.length > 0
                                            ? " ".concat(n.layer)
                                            : "",
                                        " {"
                                    )),
                                    (i += n.css),
                                    r && (i += "}"),
                                    n.media && (i += "}"),
                                    n.supports && (i += "}")
                                var o = n.sourceMap
                                o &&
                                    "undefined" != typeof btoa &&
                                    (i +=
                                        "\n/*# sourceMappingURL=data:application/json;base64,".concat(
                                            btoa(
                                                unescape(
                                                    encodeURIComponent(
                                                        JSON.stringify(o)
                                                    )
                                                )
                                            ),
                                            " */"
                                        )),
                                    t.styleTagTransform(i, e, t.options)
                            })(t, e, n)
                        },
                        remove: function () {
                            !(function (e) {
                                if (null === e.parentNode) return !1
                                e.parentNode.removeChild(e)
                            })(t)
                        },
                    }
                }
            },
            4589: e => {
                "use strict"
                e.exports = function (e, t) {
                    if (t.styleSheet) t.styleSheet.cssText = e
                    else {
                        for (; t.firstChild; ) t.removeChild(t.firstChild)
                        t.appendChild(document.createTextNode(e))
                    }
                }
            },
        },
        __webpack_module_cache__ = {}
    function __webpack_require__(e) {
        var t = __webpack_module_cache__[e]
        if (void 0 !== t) return t.exports
        var n = (__webpack_module_cache__[e] = { id: e, exports: {} })
        return (
            __webpack_modules__[e](n, n.exports, __webpack_require__), n.exports
        )
    }
    ;(__webpack_require__.n = e => {
        var t = e && e.__esModule ? () => e.default : () => e
        return __webpack_require__.d(t, { a: t }), t
    }),
        (__webpack_require__.d = (e, t) => {
            for (var n in t)
                __webpack_require__.o(t, n) &&
                    !__webpack_require__.o(e, n) &&
                    Object.defineProperty(e, n, { enumerable: !0, get: t[n] })
        }),
        (__webpack_require__.g = (function () {
            if ("object" == typeof globalThis) return globalThis
            try {
                return this || new Function("return this")()
            } catch (e) {
                if ("object" == typeof window) return window
            }
        })()),
        (__webpack_require__.o = (e, t) =>
            Object.prototype.hasOwnProperty.call(e, t))
    var __webpack_exports__ = {}
    ;(() => {
        "use strict"
        __webpack_require__(1983)
        var e,
            t =
                (e = __webpack_require__(115)) && e.__esModule
                    ? e
                    : { default: e }
        t.default._babelPolyfill &&
            "undefined" != typeof console &&
            console.warn &&
            console.warn(
                "@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."
            ),
            (t.default._babelPolyfill = !0)
    })(),
        (() => {
            "use strict"
            var e = __webpack_require__(203),
                t = __webpack_require__(3379),
                n = __webpack_require__.n(t),
                i = __webpack_require__(3380),
                r = __webpack_require__.n(i),
                o = __webpack_require__(569),
                s = __webpack_require__.n(o),
                a = __webpack_require__(3565),
                l = __webpack_require__.n(a),
                u = __webpack_require__(609),
                h = __webpack_require__.n(u),
                c = __webpack_require__(4589),
                d = __webpack_require__.n(c),
                f = __webpack_require__(1424),
                p = {}
            function v(e) {
                return (
                    (v =
                        "function" == typeof Symbol &&
                        "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e
                              }
                            : function (e) {
                                  return e &&
                                      "function" == typeof Symbol &&
                                      e.constructor === Symbol &&
                                      e !== Symbol.prototype
                                      ? "symbol"
                                      : typeof e
                              }),
                    v(e)
                )
            }
            function g(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }
            function y(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n]
                    ;(i.enumerable = i.enumerable || !1),
                        (i.configurable = !0),
                        "value" in i && (i.writable = !0),
                        Object.defineProperty(e, i.key, i)
                }
            }
            function _(e, t) {
                return (
                    (_ =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e
                        }),
                    _(e, t)
                )
            }
            function m(e, t) {
                if (t && ("object" === v(t) || "function" == typeof t)) return t
                if (void 0 !== t)
                    throw new TypeError(
                        "Derived constructors may only return object or undefined"
                    )
                return (function (e) {
                    if (void 0 === e)
                        throw new ReferenceError(
                            "this hasn't been initialised - super() hasn't been called"
                        )
                    return e
                })(e)
            }
            function x(e) {
                return (
                    (x = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e)
                          }),
                    x(e)
                )
            }
            ;(p.styleTagTransform = d()),
                (p.setAttributes = l()),
                (p.insert = s().bind(null, "head")),
                (p.domAPI = r()),
                (p.insertStyleElement = h()),
                n()(f.Z, p),
                f.Z && f.Z.locals && f.Z.locals
            const w = (function (t) {
                !(function (e, t) {
                    if ("function" != typeof t && null !== t)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        )
                    ;(e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            writable: !0,
                            configurable: !0,
                        },
                    })),
                        Object.defineProperty(e, "prototype", { writable: !1 }),
                        t && _(e, t)
                })(a, t)
                var n,
                    i,
                    r,
                    o,
                    s =
                        ((r = a),
                        (o = (function () {
                            if (
                                "undefined" == typeof Reflect ||
                                !Reflect.construct
                            )
                                return !1
                            if (Reflect.construct.sham) return !1
                            if ("function" == typeof Proxy) return !0
                            try {
                                return (
                                    Boolean.prototype.valueOf.call(
                                        Reflect.construct(
                                            Boolean,
                                            [],
                                            function () {}
                                        )
                                    ),
                                    !0
                                )
                            } catch (e) {
                                return !1
                            }
                        })()),
                        function () {
                            var e,
                                t = x(r)
                            if (o) {
                                var n = x(this).constructor
                                e = Reflect.construct(t, arguments, n)
                            } else e = t.apply(this, arguments)
                            return m(this, e)
                        })
                function a() {
                    return g(this, a), s.apply(this, arguments)
                }
                return (
                    (n = a),
                    (i = [
                        {
                            key: "onResetEvent",
                            value: function () {
                                e.H6.world.addChild(
                                    new e.Tg("background", "#202020")
                                )
                            },
                        },
                    ]) && y(n.prototype, i),
                    Object.defineProperty(n, "prototype", { writable: !1 }),
                    a
                )
            })(e.Hf)
            function b(e) {
                return (
                    (b =
                        "function" == typeof Symbol &&
                        "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e
                              }
                            : function (e) {
                                  return e &&
                                      "function" == typeof Symbol &&
                                      e.constructor === Symbol &&
                                      e !== Symbol.prototype
                                      ? "symbol"
                                      : typeof e
                              }),
                    b(e)
                )
            }
            function E(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n]
                    ;(i.enumerable = i.enumerable || !1),
                        (i.configurable = !0),
                        "value" in i && (i.writable = !0),
                        Object.defineProperty(e, i.key, i)
                }
            }
            function T() {
                return (
                    (T =
                        "undefined" != typeof Reflect && Reflect.get
                            ? Reflect.get
                            : function (e, t, n) {
                                  var i = k(e, t)
                                  if (i) {
                                      var r = Object.getOwnPropertyDescriptor(
                                          i,
                                          t
                                      )
                                      return r.get
                                          ? r.get.call(
                                                arguments.length < 3 ? e : n
                                            )
                                          : r.value
                                  }
                              }),
                    T.apply(this, arguments)
                )
            }
            function k(e, t) {
                for (
                    ;
                    !Object.prototype.hasOwnProperty.call(e, t) &&
                    null !== (e = C(e));

                );
                return e
            }
            function S(e, t) {
                return (
                    (S =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e
                        }),
                    S(e, t)
                )
            }
            function A(e, t) {
                if (t && ("object" === b(t) || "function" == typeof t)) return t
                if (void 0 !== t)
                    throw new TypeError(
                        "Derived constructors may only return object or undefined"
                    )
                return (function (e) {
                    if (void 0 === e)
                        throw new ReferenceError(
                            "this hasn't been initialised - super() hasn't been called"
                        )
                    return e
                })(e)
            }
            function C(e) {
                return (
                    (C = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e)
                          }),
                    C(e)
                )
            }
            const O = (function (e) {
                    !(function (e, t) {
                        if ("function" != typeof t && null !== t)
                            throw new TypeError(
                                "Super expression must either be null or a function"
                            )
                        ;(e.prototype = Object.create(t && t.prototype, {
                            constructor: {
                                value: e,
                                writable: !0,
                                configurable: !0,
                            },
                        })),
                            Object.defineProperty(e, "prototype", {
                                writable: !1,
                            }),
                            t && S(e, t)
                    })(s, e)
                    var t,
                        n,
                        i,
                        r,
                        o =
                            ((i = s),
                            (r = (function () {
                                if (
                                    "undefined" == typeof Reflect ||
                                    !Reflect.construct
                                )
                                    return !1
                                if (Reflect.construct.sham) return !1
                                if ("function" == typeof Proxy) return !0
                                try {
                                    return (
                                        Boolean.prototype.valueOf.call(
                                            Reflect.construct(
                                                Boolean,
                                                [],
                                                function () {}
                                            )
                                        ),
                                        !0
                                    )
                                } catch (e) {
                                    return !1
                                }
                            })()),
                            function () {
                                var e,
                                    t = C(i)
                                if (r) {
                                    var n = C(this).constructor
                                    e = Reflect.construct(t, arguments, n)
                                } else e = t.apply(this, arguments)
                                return A(this, e)
                            })
                    function s(e, t, n) {
                        return (
                            (function (e, t) {
                                if (!(e instanceof t))
                                    throw new TypeError(
                                        "Cannot call a class as a function"
                                    )
                            })(this, s),
                            o.call(this, e, t, n)
                        )
                    }
                    return (
                        (t = s),
                        (n = [
                            {
                                key: "update",
                                value: function (e) {
                                    return T(
                                        C(s.prototype),
                                        "update",
                                        this
                                    ).call(this, e)
                                },
                            },
                        ]) && E(t.prototype, n),
                        Object.defineProperty(t, "prototype", { writable: !1 }),
                        s
                    )
                })(e.JH),
                P = [
                    {
                        name: "PressStart2P",
                        type: "image",
                        src: "./data/fnt/PressStart2P.png",
                    },
                    {
                        name: "PressStart2P",
                        type: "binary",
                        src: "./data/fnt/PressStart2P.fnt",
                    },
                ]
            e.Uh.onReady(function () {
                e.Rk.init(1218, 562, { parent: "screen", scale: "auto" })
                    ? (e.n0.init("mp3,ogg"),
                      (e._m.crossOrigin = "anonymous"),
                      e._m.preload(P, function () {
                          e.SB.set(e.SB.PLAY, new w()),
                              e.d_.register("mainPlayer", O),
                              e.SB.change(e.SB.PLAY)
                      }))
                    : alert("Your browser does not support HTML5 canvas.")
            })
        })()
})()
